<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pybonacci</title><link href="http://pybonacci.github.io/" rel="alternate"></link><link href="http://pybonacci.github.io/feeds/all.atom.xml" rel="self"></link><id>http://pybonacci.github.io/</id><updated>2018-05-09T18:00:00+00:00</updated><entry><title>Manejar dependencias y entornos de desarrollo en Python</title><link href="http://pybonacci.github.io/2018/05/09/manejar-dependencias-python/" rel="alternate"></link><published>2018-05-09T18:00:00+00:00</published><updated>2018-05-09T18:00:00+00:00</updated><author><name>Daniel Rodriguez</name></author><id>tag:pybonacci.github.io,2018-05-09:2018/05/09/manejar-dependencias-python/</id><summary type="html">&lt;p&gt;a.k.a. pip, conda, pipenv, pyenv, y mas! ¿Qué uso?&lt;/p&gt;
&lt;p&gt;Paquetes de Python, los hay para todos los gustos, muchas industrias (web, ciencia, datos y más), con buen soporte tanto de la comunidad como por empresas grandes en cada sector y en general te permiten resolver muchos problemas rápidamente y moverte al siguiente.&lt;/p&gt;
&lt;p&gt;Manejar estos paquetes y dependencias es parte natural de un proyecto de software y como es de esperarse en una comunidad tan grande y variada como lo es la de Python no existe solo una solución sino al contrario muchas (¡lo cual es bueno!) que se adaptan a diferentes necesidades de diferentes usuarios.&lt;/p&gt;
&lt;p&gt;Tantas opciones también pueden generar confusión al momento de elegir qué herramientas usar y aprender. Para la muestra un gran comic de XKCD que muestra lo que puede pasar.&lt;/p&gt;
&lt;p&gt;&lt;img alt="¡Ayuda!" src="https://imgs.xkcd.com/comics/python_environment.png" title="https://xkcd.com/1987/"&gt;&lt;/p&gt;
&lt;p&gt;Veamos cuales son las …&lt;/p&gt;</summary></entry><entry><title>Curso de datos de Manu Garrido: Así se hizo</title><link href="http://pybonacci.github.io/2018/04/13/curso-de-datos-de-manu-garrido/" rel="alternate"></link><published>2018-04-13T08:02:00+02:00</published><updated>2018-04-13T08:02:00+02:00</updated><author><name>kiario</name></author><id>tag:pybonacci.github.io,2018-04-13:2018/04/13/curso-de-datos-de-manu-garrido/</id><summary type="html">&lt;p&gt;Hoy hablamos entre pybonaccis para saber como, nuestro sospechoso
habitual, &lt;a href="http://manugarri.com/"&gt;Manu Garrido&lt;/a&gt;, ha ideado su &lt;a href="https://www.udemy.com/aprende-data-science-y-machine-learning-con-python/"&gt;curso
sobre ciencia de datos, disponible para todos en
Udemy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.udemy.com/aprende-data-science-y-machine-learning-con-python/?couponCode=PYBONACCI"&gt;Manu ha creado un cupón de descuento del 90% para todos los lectores
de
pybonacci&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;La idea de la entrada de hoy no es hablar del curso, el curso habla por
si mismo, sino saber un poco más sobre lo que hay detrás de un curso tan
elaborado como este.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;KC: Manu, ¿cuéntanos tus motivaciones para meterte en semejante
embrollo, hacer un curso&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;en vídeo, con 23 horas de vídeos, y en
español, limitando considerablemente la cantidad&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;de público?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;MG: Bueno, estuve unos años viviendo en Nueva York, y allí fue donde
aprendí sobre este mundo tan apasionante. Al volver a España, me di
cuenta de que el nivel de conocimiento sobre Data Science estaba …&lt;/em&gt;&lt;/p&gt;</summary><category term="curso"></category><category term="data science"></category><category term="udemy"></category></entry><entry><title>Performance: Pandas vs NumPy (vs Bottleneck)</title><link href="http://pybonacci.github.io/2018/03/27/performance-pandas-numpy-bottleneck/" rel="alternate"></link><published>2018-03-27T18:02:36+00:00</published><updated>2018-03-27T18:02:36+00:00</updated><author><name>Maximiliano Greco</name></author><id>tag:pybonacci.github.io,2018-03-27:2018/03/27/performance-pandas-numpy-bottleneck/</id><summary type="html">

&lt;p&gt;Hace varias semanas salió un &lt;a href="https://github.com/mm-mansour/Fast-Pandas"&gt;proyecto muy interesante&lt;/a&gt; en el que se compara la performance  de &lt;code&gt;Pandas&lt;/code&gt; con &lt;code&gt;NumPy&lt;/code&gt;. Bien, dado que uso &lt;code&gt;Pandas&lt;/code&gt; y &lt;code&gt;NumPy&lt;/code&gt; a diario no me costó demasiado encontrar algunas cosas (quizá algo difusas) que estarían bien comentar o matizar. Sobre todo cuando vemos comparaciones de este estilo, ya que nos podemos quedar con alguna que otra idea errónea.&lt;/p&gt;
&lt;p&gt;A continuación voy a tratar de explicar cómo funciona &lt;code&gt;Pandas&lt;/code&gt; y &lt;code&gt;NumPy&lt;/code&gt; cuando hacemos llamadas del estilo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;In [0]: d = pd.DataFrame(...)
In [1]: d.sum()
In [2]: np.sum(d)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De hecho, aunque nos pueda parecer trivial, cuando buscamos la máxima performance hacerlo de una u otra forma toma especial relevancia. Como podéis intuir, no es lo mismo hacer &lt;code&gt;d.sum()&lt;/code&gt; que &lt;code&gt;np.sum(d)&lt;/code&gt;. Otro apunte intersante, para los que no lo sabéis, los cálculos en &lt;code&gt;Pandas&lt;/code&gt; se apoyan en &lt;code&gt;NumPy&lt;/code&gt;, pero también en &lt;a href="https://github.com/kwgoodman/bottleneck"&gt;&lt;code&gt;bottleneck&lt;/code&gt;&lt;/a&gt; (y en el futuro quizá otras librerías), por ese motivo lo incluyo en esta comparativa, lo veremos con más detalle.&lt;/p&gt;
</summary></entry><entry><title>¿Cómo crear un mapa interactivo con Folium?</title><link href="http://pybonacci.github.io/2017/09/07/como-crear-un-mapa-interactivo-con-folium/" rel="alternate"></link><published>2017-09-07T12:58:00+02:00</published><updated>2017-09-07T12:58:00+02:00</updated><author><name>kiario</name></author><id>tag:pybonacci.github.io,2017-09-07:2017/09/07/como-crear-un-mapa-interactivo-con-folium/</id><summary type="html">&lt;p&gt;En esta entrada voy a describir el proceso usado para crear
&lt;a href="https://kikocorreoso.github.io/datos_aemet/"&gt;https://kikocorreoso.github.io/datos_aemet/&lt;/a&gt; con la ayuda de la
librería Folium.&lt;/p&gt;
&lt;h2&gt;¿Qué es Folium?&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://folium.readthedocs.io/en/latest/"&gt;Folium&lt;/a&gt; es una librería Python
que permite crear mapas interactivos usando
&lt;a href="http://leafletjs.com/"&gt;Leaflet.js&lt;/a&gt;. Lo que hace, de forma elegante, es
crear código javascript que usa la maravillosa librería de mapas
interactivos leaflet.&lt;/p&gt;
&lt;h2&gt;¿Crear el mapa?&lt;/h2&gt;
&lt;p&gt;En la rama &lt;em&gt;gh-pages&lt;/em&gt; del repositorio git &lt;em&gt;datos_aemet&lt;/em&gt; en github
(&lt;a href="https://github.com/kikocorreoso/datos_aemet/tree/gh-pages"&gt;https://github.com/kikocorreoso/datos_aemet/tree/gh-pages&lt;/a&gt;) hay una
serie de ficheros. Los ficheros &lt;em&gt;index.html&lt;/em&gt;, &lt;em&gt;map.html&lt;/em&gt; y &lt;em&gt;readme.html&lt;/em&gt;
los generaremos a partir de los ficheros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;custom.css&lt;/em&gt;: Algo de css para que la página cuadre. Por debajo usa,
    además, bootstrap.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;src/create_base_map.py&lt;/em&gt;: Esta es la madre del cordero y lo que
    vamos a comentar.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;src/template.html&lt;/em&gt;: Aquí tenemos la estructura principal del HTML
    usado …&lt;/li&gt;&lt;/ul&gt;</summary><category term="aemet"></category><category term="folium"></category><category term="gis"></category><category term="leaflet"></category><category term="mapa"></category><category term="mapping"></category><category term="opendata"></category><category term="sig"></category></entry><entry><title>Microentradas: Unicode/látex en la consola IPython/notebook Jupyter</title><link href="http://pybonacci.github.io/2017/08/02/microentradas-unicodelatex-en-la-consola-ipythonnotebook-jupyter/" rel="alternate"></link><published>2017-08-02T19:17:00+02:00</published><updated>2017-08-02T19:17:00+02:00</updated><author><name>kiario</name></author><id>tag:pybonacci.github.io,2017-08-02:2017/08/02/microentradas-unicodelatex-en-la-consola-ipythonnotebook-jupyter/</id><summary type="html">&lt;p&gt;&lt;em&gt;Este es un &lt;a href="https://www.reddit.com/r/todayilearned/"&gt;TIL&lt;/a&gt; que vi el
otro día. Lo dejo aquí por si otros no lo sabían y les resulta útil.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;En la consola de IPython o en el notebook Jupyter podéis usar unicode
escribiendo símbolos látex.&lt;/p&gt;
&lt;p&gt;Por ejemplo, si escribes lo siguiente (en la consola o en una celda del
notebook):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [1]: \alpha
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;y pulsáis después la tecla &lt;code&gt;tab&lt;/code&gt; veréis que se transforma a su símbolo
látex y lo podéis usar fácilmente en vuestro código.&lt;/p&gt;
&lt;p&gt;El resultado sería algo como lo siguiente (antes y después de pulsar la
tecla &lt;code&gt;tab&lt;/code&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Antes:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="https://pybonacci.org/images/2017/08/console1.png?style=centerme"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Después:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="https://pybonacci.org/images/2017/08/console2.png?style=centerme"&gt;&lt;/p&gt;
&lt;p&gt;Esto puede ser útil para scripts propios, demos, formación,..., pero os
lo desaconsejo en código en producción o a compartir ;-)&lt;/p&gt;
&lt;p&gt;Saludos.&lt;/p&gt;</summary><category term="ipython"></category><category term="jupyter"></category><category term="látex"></category><category term="MicroEntradas"></category><category term="til"></category><category term="unicode"></category></entry><entry><title>Instalando PostgreSQL en local en windows o linux usando conda</title><link href="http://pybonacci.github.io/2017/07/25/instalando-postgresql-en-local-en-windows-o-linux-usando-conda/" rel="alternate"></link><published>2017-07-25T18:49:00+02:00</published><updated>2017-07-25T18:49:00+02:00</updated><author><name>kiario</name></author><id>tag:pybonacci.github.io,2017-07-25:2017/07/25/instalando-postgresql-en-local-en-windows-o-linux-usando-conda/</id><summary type="html">&lt;p&gt;Para el que no lo sepa, podéis instalar PostgreSQL usando &lt;code&gt;conda&lt;/code&gt; \o/&lt;/p&gt;
&lt;p&gt;Vamos a hacer un tutorial paso a paso para poder instalarlo todo y
dejarlo listo para trabajar desde Python de forma sencilla.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[&lt;em&gt;A lo largo de todo el tutorial se indica si el código a usar es
para windows o para linux. Si no se indica nada el código debería ser
válido en ambos sistemas operativos.&lt;/em&gt;]&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;1. Creamos un entorno virtual usando &lt;code&gt;conda&lt;/code&gt; e instalamos PostgreSQL.&lt;/h1&gt;
&lt;p&gt;Este paso es sencillo. Solo necesitáis tener instalado &lt;code&gt;conda&lt;/code&gt; en
vuestro equipo y una conexión a internet. Si no tenéis &lt;code&gt;conda&lt;/code&gt; instalado
podéis ir a la sección de enlaces, más abajo, para visitar la
documentación de &lt;code&gt;conda&lt;/code&gt; donde os indica como instalarlo. Con &lt;code&gt;conda&lt;/code&gt;
instalado, podemos añadir el canal de &lt;code&gt;conda-forge&lt;/code&gt; (básico para poder
extender la cantidad de paquetes disponibles además de …&lt;/p&gt;</summary><category term="base de datos"></category><category term="bases de datos"></category><category term="bbdd"></category><category term="conda"></category><category term="conda-forge"></category><category term="pgcli"></category><category term="postgresql"></category><category term="psycopg2"></category></entry><entry><title>Donaciones gracias a Packtpub</title><link href="http://pybonacci.github.io/2017/06/03/donaciones-gracias-a-packtpub/" rel="alternate"></link><published>2017-06-03T12:01:00+02:00</published><updated>2017-06-03T12:01:00+02:00</updated><author><name>kiario</name></author><id>tag:pybonacci.github.io,2017-06-03:2017/06/03/donaciones-gracias-a-packtpub/</id><summary type="html">&lt;p&gt;&lt;a href="#en"&gt;Go to english version&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hola a todos.&lt;/p&gt;
&lt;p&gt;Durante la semana del 5 al 11 de junio (desde el próximo lunes al
próximo domingo), desde &lt;a href="https://www.packtpub.com/"&gt;PacktPub&lt;/a&gt;, nos han
propuesto usar un &lt;a href="https://en.wikipedia.org/wiki/UTM_parameters"&gt;enlace de
afiliación&lt;/a&gt; que se usará
para que donen 1\$ (hasta 1000\$) a la organización sin ánimo de lucro
que les indiquemos.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.packtpub.com/packt/offers/free-learning?utm_source=Pybonacci&amp;amp;utm_medium=referral&amp;amp;utm_campaign=FreeLearning2017CharityReferrals"&gt;&lt;img alt="" src="https://www.pybonacci.org/images/2017/06/FLSS-Social-V2-300x150.png?style=centerme"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;¿Cómo funcionará la campaña y cómo nos podéis ayudar?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vamos a dejar &lt;a href="https://twitter.com/Pybonacci/status/870943704500056065"&gt;un
    tweet&lt;/a&gt; para
    qué votéis a qué organización sin ánimo de lucro queréis hacer la
    donación entre las tres siguientes. Esa votación estará abierta
    hasta el miércoles, (daos prisa), y en cuanto se cierre la votación
    le indicaremos a PacktPub la organización seleccionada:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/psf/"&gt;Python Software Foundation&lt;/a&gt; (PSF).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://es.python.org/"&gt;Python España&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.numfocus.org/"&gt;NumFocus&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Durante la semana que viene vamos a twittear sobre los libros
    gratuitos de PackPub usando el link de afiliación siguiente:
    &lt;a href="https://www.packtpub.com/packt/offers/free-learning?utm_source=Pybonacci&amp;amp;utm_medium=referral&amp;amp;utm_campaign=FreeLearning2017CharityReferrals"&gt;https://www.packtpub.com/packt/offers …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><category term="comunidad"></category><category term="NumFocus"></category><category term="packtpub"></category><category term="PSF"></category><category term="python españa"></category></entry><entry><title>Como hacer un mapa muy bonito de España en ggplot2</title><link href="http://pybonacci.github.io/2017/04/17/como-hacer-un-mapa-muy-bonito-de-espana-en-ggplot2/" rel="alternate"></link><published>2017-04-17T08:57:12+00:00</published><updated>2017-04-17T08:57:12+00:00</updated><author><name>Manuel Garrido</name></author><id>tag:pybonacci.github.io,2017-04-17:2017/04/17/como-hacer-un-mapa-muy-bonito-de-espana-en-ggplot2/</id><summary type="html">&lt;p&gt;&lt;em&gt;(Este post apareció originalmente en &lt;a href="http://blog.manugarri.com/making-a-beautiful-map-of-spain-in-ggplot2/" target="_blank"&gt;mi blog&lt;/a&gt;).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Hace unas semanas leí un artículo en el cual Timo Grossenbacher mostraba como consiguió hacer, en mi opinión, &lt;a href="https://timogrossenbacher.ch/2016/12/beautiful-thematic-maps-with-ggplot2-only/" target="_blank"&gt;uno de los mapas más bonitos que he visto nunca&lt;/a&gt;. Timo empleó la que es, en mi opinión, una de las librerias más expresivas y bellas que hay para hacer gráficos, &lt;a href="http://ggplot2.org/" target="_blank"&gt;ggplot2&lt;/a&gt;. La versión original de ggplot2 es para R, pero existe una versión de python no exhaustiva gracias a la buena gente de &lt;a href="http://ggplot.yhathq.com/" target="_blank"&gt;Yhat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Asi que por supuesto, tenía que replicarlo.&lt;/p&gt;
&lt;p&gt;Antes que nada, aquí está el mapa.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mapilla" src="http://i.imgur.com/MrNL3bE.png"&gt;&lt;/p&gt;
&lt;p&gt;El código empleado para hacer el mapa lo podeis descargar en &lt;a href="https://github.com/manugarri/spain_census_map" target="_blank"&gt;github&lt;/a&gt;. He compartido varias versiones del mapa para que se pueda observar como los diferentes cambios en las escalas afectan a la visualización.&lt;/p&gt;
&lt;h1&gt;Código.&lt;/h1&gt;
&lt;p&gt;Para empezar, importamos las librerías necesarias:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;setwd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/DIRECTORIO_DE_TRABAJO/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kn"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;rgdal …&lt;/pre&gt;&lt;/div&gt;</summary><category term="gis"></category><category term="mapa"></category><category term="mapping"></category><category term="opendata"></category><category term="R"></category></entry><entry><title>Manejo de atributos mediante propiedades.</title><link href="http://pybonacci.github.io/2017/01/11/manejo-de-atributos-mediante-propiedades/" rel="alternate"></link><published>2017-01-11T09:34:12+00:00</published><updated>2017-01-11T09:34:12+00:00</updated><author><name>Alberto Cuevas</name></author><id>tag:pybonacci.github.io,2017-01-11:2017/01/11/manejo-de-atributos-mediante-propiedades/</id><summary type="html">&lt;p&gt;En &lt;em&gt;Python&lt;/em&gt;, cuando creamos una clase, definimos una serie de &lt;em&gt;atributos&lt;/em&gt; (que indicarán su estado) y de &lt;em&gt;métodos&lt;/em&gt; (que marcarán su comportamiento). El acceso a ambos se realiza de manera sencilla mediante el &lt;em&gt;operador punto&lt;/em&gt;. Un ejemplo de ello (como nota decir que todo el código mostrado en esta entrada está escrito en &lt;em&gt;Python 3&lt;/em&gt; sobre el &lt;em&gt;IDE PyScripter&lt;/em&gt;)  es el siguiente:&lt;/p&gt;
&lt;pre&gt;class MiClase:
    def __init__(self, midato):
        self.dato = midato
    def cuadrado(self):
        return self.dato ** 2
a = MiClase(12.72)
print("El cuadrado es:", a.cuadrado())
a.dato = 7.72
print("El cuadrado es:", a.cuadrado())&lt;/pre&gt;

&lt;p&gt;La salida sería:&lt;/p&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; 
El cuadrado es: 161.79840000000002
El cuadrado es: 59.5984
&amp;gt;&amp;gt;&amp;gt;&lt;/pre&gt;

&lt;p&gt;Para ejemplos sencillos podría ser suficiente actuar de esta manera, pero en otros momentos necesitaremos más versatilidad. Imaginemos que queremos validar los atributos con una determinada condición. En nuestro …&lt;/p&gt;</summary><category term="atributos"></category><category term="deletter"></category><category term="getter"></category><category term="property"></category><category term="propiedades"></category><category term="python"></category><category term="setter"></category></entry><entry><title>Revisión del libro “Python 3, Curso Práctico” de Alberto Cuevas</title><link href="http://pybonacci.github.io/2016/10/30/revision-del-libro-python-3-curso-practico-de-alberto-cuevas/" rel="alternate"></link><published>2016-10-30T00:48:19+00:00</published><updated>2016-10-30T00:48:19+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2016-10-30:2016/10/30/revision-del-libro-python-3-curso-practico-de-alberto-cuevas/</id><summary type="html">&lt;p&gt;Nos han pedido una revisión de un nuevo libro sobre Python en español. El libro se titula 'Python 3, Curso Práctico' y lo ha escrito Alberto Cuevas Álvarez. Si seguís leyendo podréis ver cómo ganar una copia en papel del mismo ;-D&lt;/p&gt;
&lt;p&gt;Primero de todo, algunas características del libro:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Título: Python 3, Curso Práctico.&lt;/li&gt;
&lt;li&gt;Autor: Alberto Cuevas Álvarez&lt;/li&gt;
&lt;li&gt;Año de edición: 2016&lt;/li&gt;
&lt;li&gt;Nº páginas: 560&lt;/li&gt;
&lt;li&gt;ISBN: 978-84-9964-658-9&lt;/li&gt;
&lt;li&gt;Editorial: RA-MA EDITORIAL&lt;/li&gt;
&lt;li&gt;Encuadernación: Rústica&lt;/li&gt;
&lt;li&gt;Idioma: Español (de España).&lt;/li&gt;
&lt;li&gt;Versión de Python usada en el libro: 3.3&lt;/li&gt;
&lt;li&gt;Link: &lt;a href="http://www.ra-ma.es/libros/PYTHON-3-CURSO-PRACTICO/94627/978-84-9964-658-9"&gt;http://www.ra-ma.es/libros/PYTHON-3-CURSO-PRACTICO/94627/978-84-9964-658-9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Precio: 31.90 € para la versión en papel.&lt;/li&gt;
&lt;li&gt;Versión electrónica: No disponible de momento.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img class="aligncenter" src="http://www.tecno-libro.es/imagenes/9788499/978849964658.GIF" alt="" width="93" height="140" /&gt;&lt;/p&gt;
&lt;p&gt;Le hemos pedido al autor que nos defina su intención al escribir el libro y esta es la frase resumen que nos ha enviado:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Mi intención a la hora de realizar el …&lt;/p&gt;&lt;/blockquote&gt;</summary><category term="alberto cuevas"></category><category term="libro"></category><category term="python 3"></category><category term="ra-ma"></category></entry><entry><title>Joyitas en la stdlib: concurrent.futures</title><link href="http://pybonacci.github.io/2016/10/27/joyitas-en-la-stdlib-concurrent-futures/" rel="alternate"></link><published>2016-10-27T14:37:36+00:00</published><updated>2016-10-27T14:37:36+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2016-10-27:2016/10/27/joyitas-en-la-stdlib-concurrent-futures/</id><summary type="html">&lt;p&gt;El módulo que vamos a ver, &lt;code&gt;concurrent.futures&lt;/code&gt;, tiene una funcionalidad limitada. Trata de introducir una capa de simplificación sobre los módulos &lt;code&gt;threading&lt;/code&gt; y &lt;code&gt;multiprocessing&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solo disponible en Python 3!!!!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Según la &lt;a href="https://docs.python.org/3/library/concurrent.futures.html"&gt;documentación oficial&lt;/a&gt;, el módulo proporciona una interfaz de alto nivel para ejecutar &lt;em&gt;callables (¿invocables?)&lt;/em&gt; de forma asíncrona. Por su parte, &lt;a href="https://es.wikipedia.org/wiki/Valor_futuro_(inform%C3%A1tica)"&gt;según la Wikipedia&lt;/a&gt;, los futuros (no vamos a hablar de bolsa ni de especulación), en Programación, son un reemplazo para un resultado que todavía no está disponible, generalmente debido a que su cómputo todavía no ha terminado, o su transferencia por la red no se ha completado. El término &lt;em&gt;futures&lt;/em&gt; también lo podéis encontrar como &lt;em&gt;promises, delay, deferred&lt;/em&gt;,... En general, independientemente de cómo lo queráis llamar, lo podéis ver como un resultado pendiente.&lt;/p&gt;
&lt;p&gt;El módulo posee una base abstracta, &lt;code&gt;Executor&lt;/code&gt;, que se usa para las subclases &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; y …&lt;/p&gt;</summary><category term="asincronia"></category><category term="asyncio"></category><category term="concurrent.futures"></category><category term="deferred"></category><category term="delayed"></category><category term="futures"></category><category term="multiprocessing"></category><category term="promises"></category><category term="stdlib"></category><category term="threading"></category></entry><entry><title>Revisión del libro “Introducción a la programación con Python” de Nilo Menezes</title><link href="http://pybonacci.github.io/2016/09/19/revision-del-libro-introduccion-a-la-programacion-con-python-de-nilo-menezes/" rel="alternate"></link><published>2016-09-19T08:27:37+00:00</published><updated>2016-09-19T08:27:37+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2016-09-19:2016/09/19/revision-del-libro-introduccion-a-la-programacion-con-python-de-nilo-menezes/</id><summary type="html">&lt;p&gt;En esta entrada vamos a hablar sobre el libro &lt;a href="https://librodepython.com/" title="El libro de Python en español"&gt;"Introducción a la programación con Python" escrito por Nilo Ney Coutinho Menezes.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;El autor del libro se puso en contacto gentilmente con la "&lt;em&gt;Pybonacci Crew&lt;/em&gt;" para hacer una revisión de su libro. Nosotros, como no podía ser de otra forma, hemos intentado colaborar agradeciendo su confianza.&lt;/p&gt;
&lt;p&gt;Algunas generalidades del libro:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Escrito en español, cosa que se agradece dentro del desierto de recursos en español.&lt;/li&gt;
&lt;li&gt;La calidad del libro en papel está muy bien y el diseño es bonito.&lt;/li&gt;
&lt;li&gt;La primera edición en español (Julio/2016), que es la que hemos revisado, tiene un total de 336 páginas. En todo el libro no hay páginas en blanco para hacer que el libro sea más gordo, las partes de códigos de ejemplo del libro se saltan la parte relevante de &lt;a href="http://pep8.org/#blank-lines"&gt;saltos de línea …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><category term="libro"></category><category term="libros"></category><category term="Menezes"></category><category term="Nilo"></category><category term="revisión"></category><category term="sorteo"></category></entry><entry><title>Analizando datos sobre el Brexit con Pandas</title><link href="http://pybonacci.github.io/2016/07/11/analizando-datos-sobre-el-brexit-con-pandas/" rel="alternate"></link><published>2016-07-11T15:38:31+00:00</published><updated>2016-07-11T15:38:31+00:00</updated><author><name>Bob Belderbos</name></author><id>tag:pybonacci.github.io,2016-07-11:2016/07/11/analizando-datos-sobre-el-brexit-con-pandas/</id><summary type="html">&lt;p&gt;&lt;a href="http://bobbelderbos.com/2016/06/analyzing-brexit-data-with-pandas/" target="_blank"&gt;Esta entrada apareció en inglés en mi blog.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Desde hace tiempo quería aprender &lt;a href="http://pandas.pydata.org"&gt;Pandas&lt;/a&gt;. Por fin llegó la oportunidad: Brexit = datos.&lt;/p&gt;
&lt;p&gt;Como siempre empecé con un ejercicio / objetivo práctico, en este caso procesar los datos del referéndum. Usé Pandas para analizar los datos (CSV) publicados por &lt;a href="http://www.electoralcommission.org.uk/find-information-by-subject/elections-and-referendums/upcoming-elections-and-referendums/eu-referendum/electorate-and-count-information"&gt;electoralcommission.org.uk&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aunque quería responder a más preguntas este CSV era suficiente para estrenarme con Pandas (¡es inmenso!). Además aprendí a usar &lt;a href="http://jupyter.readthedocs.io/en/latest/"&gt;Jupyter notebook&lt;/a&gt; para documentar todo. El notebook lo &lt;a href="https://github.com/bbelderbos/brexit-pandas/blob/master/Analyze_Brexit_Pandas_ES.ipynb"&gt;puedes ver / bajar desde Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Consegui mi objetivo de representar los datos mostrados &lt;a href="https://ig.ft.com/sites/elections/2016/uk/eu-referendum/index.html"&gt;aquí&lt;/a&gt;. Aquí algunos pantallazos del notebook:&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;img class="alignnone" src="http://bobbelderbos.com/assets/notebook_screenshot1.png" alt="" width="745" height="260" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class="alignnone" src="http://bobbelderbos.com/assets/notebook_screenshot2.png" alt="" width="592" height="429" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class="alignnone" src="http://bobbelderbos.com/assets/notebook_screenshot3.png" alt="" width="615" height="465" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class="alignnone" src="http://bobbelderbos.com/assets/notebook_screenshot4.png" alt="" width="935" height="443" /&gt;&lt;/p&gt;
&lt;h3&gt;Añadiendo datos demográficos&lt;/h3&gt;
&lt;p&gt;Vinculé los datos del voto con los &lt;a href="http://www.ons.gov.uk/census/2011census/2011censusdata"&gt;datos de censo&lt;/a&gt; públicamente disponibles (como sugirió &lt;a href="https://twitter.com/Pybonacci"&gt;Pybonacci&lt;/a&gt;), gracias). Encontré unas correlaciones interesantes (y aprendí algunas cosas de matplotlib usándolo), puedes ver el notebook &lt;a href="https://github.com/bbelderbos/brexit-pandas/blob/master/brexit_demographics.ipynb"&gt;aquí&lt;/a&gt;:&lt;/p&gt;
&lt;h4&gt;¿Cómo influye la edad en el voto por salir …&lt;/h4&gt;</summary></entry><entry><title>Como mejorar tu script fácilmente</title><link href="http://pybonacci.github.io/2016/06/21/como-mejorar-tu-script-facilmente/" rel="alternate"></link><published>2016-06-21T11:15:39+00:00</published><updated>2016-06-21T11:15:39+00:00</updated><author><name>Manuel Garrido</name></author><id>tag:pybonacci.github.io,2016-06-21:2016/06/21/como-mejorar-tu-script-facilmente/</id><summary type="html">&lt;p&gt;&lt;a href="http://blog.manugarri.com/how-to-make-your-script-2x-better/" title="Esta entrada apareció originalmente en inglés en mi blog."&gt;Esta entrada apareció originalmente en inglés en mi blog.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nos ha pasado a todos. Ese momento en el que descubres que sabes suficiente sobre un lenguage de programacion que quieres ponerlo en práctica y construir "algo", lo que sea.&lt;/p&gt;
&lt;p&gt;Una de las mejores cosas de la comunidad de Python es no sólo su habilidad para construir cosas increíbles, sino también para compartirlas con todo el mundo, mejorando la comunidad en el proceso.&lt;/p&gt;
&lt;p&gt;Sin embargo, llevo un tiempo fijándome en un patrón que se repite en algunos de estos proyectos. Seguro que has visto alguno así. Hablo de esos proyectos con 2 ó 3 componentes, donde el README tiene una pequeña descripción del proyecto, quizás un par de lineas explicando como ejecutar el proyecto, y frases del tipo, &lt;em&gt;"Seguramente añadiré X o Y si tengo tiempo"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El caso es que muchos …&lt;/p&gt;</summary><category term="principiante"></category><category term="python"></category></entry><entry><title>Microentradas: Evitar ciertas etiquetas en la leyenda en Matplotlib</title><link href="http://pybonacci.github.io/2016/06/07/microentradas-evitar-ciertas-etiquetas-en-la-leyenda-en-matplotlib/" rel="alternate"></link><published>2016-06-07T01:51:59+00:00</published><updated>2016-06-07T01:51:59+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2016-06-07:2016/06/07/microentradas-evitar-ciertas-etiquetas-en-la-leyenda-en-matplotlib/</id><summary type="html">&lt;div&gt;
  &lt;p&gt;
    A veces, me llegan ficheros de datos con datos cada hora o cada día y los quiero representar en un &lt;em&gt;plot&lt;/em&gt;. Para ello, podría acumular los ficheros en uno solo y luego pintarlo pero como lo debo hacer en 'tiempo casi-real' se puede meter todo en un bucle &lt;code&gt;while&lt;/code&gt; que espera los ficheros cada hora/día/lo que sea y va pintando cada variable por tramos. Por ejemplo, una aproximación podría ser la siguiente:
  &lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;div&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;div class=" highlight hl-ipython3"&gt;
          &lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'bmh'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y_var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y_var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'variable1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_var2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'g'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'variable2'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;plt …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><category term="labels"></category><category term="Legend"></category><category term="matplotlib"></category><category term="MicroEntradas"></category></entry><entry><title>Cómo llamar código C/C++ desde CPython (y Pypy) usando Cython y CFFI</title><link href="http://pybonacci.github.io/2016/05/25/como-llamar-codigo-cc-desde-cpython-y-pypy-usando-cython-y-cffi/" rel="alternate"></link><published>2016-05-25T07:00:35+00:00</published><updated>2016-05-25T07:00:35+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2016-05-25:2016/05/25/como-llamar-codigo-cc-desde-cpython-y-pypy-usando-cython-y-cffi/</id><summary type="html">&lt;p&gt;Hace unas semanas surgió esta pregunta en &lt;a href="http://es.stackoverflow.com/"&gt;StackOverflow en español&lt;/a&gt;: &lt;a href="http://es.stackoverflow.com/questions/9069/c%C3%B3mo-llamar-a-c%C3%B3digo-c-desde-python"&gt;¿Cómo llamar a código C++ desde Python?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Y &lt;a href="http://es.stackoverflow.com/a/9119/2816"&gt;la respuesta aceptada explica como hacer un wrapper sencillo usando Cython y CFFI&lt;/a&gt;. Como da la casualidad que la respuesta es mía voy a extenderla un poco para añadir más cosas y poder explicarla un poco mejor.&lt;/p&gt;
&lt;h2&gt;Prolegómenos&lt;/h2&gt;
&lt;p&gt;Antes de empezar a leer esta entrada deberías pasar a leer la entrada que hizo Juanlu hace un tiempo sobre CFFI titulada '&lt;a href="http://pybonacci.org/2016/02/07/como-crear-extensiones-en-c-para-python-usando-cffi-y-numba/"&gt;como crear extensiones en C para Python usando CFFI y Numba&lt;/a&gt;' donde se dan más detalles de todo el proceso a realizar con CFFI.&lt;/p&gt;
&lt;p&gt;Antes de probar el código de la presente entrada deberías instalar cffi y cython:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;conda&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;cffi&lt;/span&gt; &lt;span class="n"&gt;cython&lt;/span&gt; &lt;span class="c1"&gt;# Válido en CPython&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;o&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;cffi&lt;/span&gt; &lt;span class="n"&gt;cython&lt;/span&gt; &lt;span class="c1"&gt;# Válido en CPython y Pypy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Todo lo que viene a continuación lo …&lt;/p&gt;</summary><category term="c"></category><category term="cffi"></category><category term="cython"></category><category term="fortran"></category><category term="pypy"></category></entry><entry><title>Joyitas en la stdlib: pathlib</title><link href="http://pybonacci.github.io/2016/05/18/joyitas-en-la-stdlib-pathlib/" rel="alternate"></link><published>2016-05-18T22:06:30+00:00</published><updated>2016-05-18T22:06:30+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2016-05-18:2016/05/18/joyitas-en-la-stdlib-pathlib/</id><summary type="html">&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      &lt;p&gt;
        El otro día estuvimos hablando de la &lt;a href="http://pybonacci.org/2016/05/08/joyitas-en-la-stdlib-collections/"&gt;biblioteca &lt;code&gt;collections&lt;/code&gt;&lt;/a&gt;, una joya dentro de la librería estándar. Hoy vamos a hablar de una nueva biblioteca que se incluyó en la versión 3.4 de CPython llamada &lt;a href="https://docs.python.org/3/library/pathlib.html"&gt;&lt;code&gt;pathlib&lt;/code&gt;&lt;/a&gt;.
      &lt;/p&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Solo python 3, actualízate!!!&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Esta biblioteca nos da la posibilidad de usar clases para trabajar con las rutas del sistema de ficheros con una serie de métodos muy interesantes.
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Algunas-utilidades-para-configurar-el-problema&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Algunas utilidades para configurar el problema&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anchor-link&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#Algunas-utilidades-para-configurar-el-problema&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;¶&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Vamos a crear un par de funciones que nos permiten crear y borrar un directorio de pruebas para poder reproducir el ejemplo de forma sencilla:
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;div&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;div class=" highlight hl-ipython3"&gt;
          &lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shutil&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ascii_letters&lt;/span&gt;

&lt;span class="c1"&gt;# función que nos crea un directorio de prueba en …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><category term="directorios"></category><category term="ficheros"></category><category term="path"></category><category term="pathlib"></category><category term="rutas"></category><category term="stdlib"></category></entry><entry><title>Joyitas en la stdlib: collections</title><link href="http://pybonacci.github.io/2016/05/08/joyitas-en-la-stdlib-collections/" rel="alternate"></link><published>2016-05-08T18:48:58+00:00</published><updated>2016-05-08T18:48:58+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2016-05-08:2016/05/08/joyitas-en-la-stdlib-collections/</id><summary type="html">&lt;div&gt;
  &lt;div&gt;
    &lt;div&gt;
      &lt;p&gt;
        Dentro de la biblioteca estándar de Python dispones de auténticas joyas, muchas veces ignoradas u olvidadas. Es por ello que voy a empezar un breve pero intenso recorrido por algunas piezas de arte disponibles de serie.
      &lt;/p&gt;

      &lt;h1 id="Módulo-collections"&gt;
        Módulo &lt;code&gt;collections&lt;/code&gt;&lt;a class="anchor-link" href="#Módulo-collections"&gt;¶&lt;/a&gt;
      &lt;/h1&gt;

      &lt;p&gt;
        Con la ayuda de este módulo puedes aumentar las estructuras de datos típicas disponibles en Python (listas, tuplas, diccionarios,...). Veamos algunas utilidades disponibles:
      &lt;/p&gt;

      &lt;h2 id="ChainMap"&gt;
        &lt;code&gt;ChainMap&lt;/code&gt;&lt;a class="anchor-link" href="#ChainMap"&gt;¶&lt;/a&gt;
      &lt;/h2&gt;

      &lt;p&gt;
        &lt;strong&gt;Solo Python 3. Actualízate!!&lt;/strong&gt;
      &lt;/p&gt;

      &lt;p&gt;
        Dicho en bruto, es un conglomerado de diccionarios (también conocidos como &lt;em&gt;mappings&lt;/em&gt; o &lt;em&gt;hash tables&lt;/em&gt;).
      &lt;/p&gt;

      &lt;p&gt;
        Para que puede ser útil:
      &lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;
          &lt;a href="https://docs.python.org/3/library/collections.html#chainmap-examples-and-recipes"&gt;Ejemplos en la documentación de Python&lt;/a&gt;.
        &lt;/li&gt;
        &lt;li&gt;
          Actualizar partes de una configuración.
        &lt;/li&gt;
        &lt;li&gt;
          Actualizar un diccionario pero que pueda ser de forma reversible.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href="https://github.com/search?l=python&amp;q=from+collections+import+Chainmap&amp;ref=searchresults&amp;type=Code&amp;utf8=%E2%9C%93"&gt;Ejemplos de uso en github&lt;/a&gt;.
        &lt;/li&gt;
        &lt;li&gt;
          ...
        &lt;/li&gt;
      &lt;/ul&gt;

      &lt;p&gt;
        Ejemplo, imaginemos que tenemos un diccionario de configuración &lt;code&gt;dict_a&lt;/code&gt;, que posee las claves &lt;code&gt;a&lt;/code&gt; y &lt;code&gt;b&lt;/code&gt;, y queremos actualizar sus valores con otros pares &lt;em&gt;clave:valor&lt;/em&gt; que están …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><category term="collections"></category><category term="contenedores"></category><category term="secuencias"></category><category term="stdlib"></category></entry><entry><title>Resaca PyData Madrid 2016</title><link href="http://pybonacci.github.io/2016/04/16/resaca-pydata-madrid-2016/" rel="alternate"></link><published>2016-04-16T15:02:16+00:00</published><updated>2016-04-16T15:02:16+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2016-04-16:2016/04/16/resaca-pydata-madrid-2016/</id><summary type="html">&lt;p&gt;Este es un mini resumen de parte del trabajo y experiencias vividas durante muchos meses trabajando en la organización de la primera PyData por estos lares.&lt;/p&gt;
&lt;h2&gt;¿Cómo?&lt;/h2&gt;
&lt;p&gt;Muchos de los que nos leéis, seguramente, ya estéis envueltos en meetups locales, talleres,... Estos eventos son importantísimos para que la comunidad se conozca a pequeña escala y es una labor regular de mucha gente que os agradezco ya que es el germen de cosas más grandes. Una vez que hay comunidad local, esta puede contactar con otras comunidades locales o pueden intentar crear un evento que salga de ese ámbito más pequeño o cerrado. Estos eventos mayores hacen que las comunidades locales puedan interactuar en persona con el resto de comunidades locales.&lt;/p&gt;
&lt;p&gt;De la experiencia vivida detrás de la &lt;a href="http://www.es.python.org/"&gt;asociación Python España&lt;/a&gt; desde sus inicios hasta hoy (en realidad, hasta anteayer) he …&lt;/p&gt;</summary><category term="comunidad"></category><category term="eventos"></category><category term="guillem"></category><category term="pydata"></category><category term="salva"></category></entry><entry><title>Instala pypy 5.0 y numpypy en un virtualenv y juega con Jupyter</title><link href="http://pybonacci.github.io/2016/03/13/instala-pypy-5-0-y-numpypy-en-un-virtualenv-y-juega-con-jupyter/" rel="alternate"></link><published>2016-03-13T21:10:52+00:00</published><updated>2016-03-13T21:10:52+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2016-03-13:2016/03/13/instala-pypy-5-0-y-numpypy-en-un-virtualenv-y-juega-con-jupyter/</id><summary type="html">&lt;p&gt;Hoy voy a mostrar como usar la última versión de pypy y numpypy en vuestro linux. Para instalar pypy usaremos la versión &lt;a href="https://github.com/squeaky-pl/portable-pypy"&gt;portable&lt;/a&gt; creada por &lt;a href="https://github.com/squeaky-pl"&gt;squeaky-pl&lt;/a&gt;. Numpypy lo instalaremos en un entorno virtual juntamente con Jupyter para poder hacer las pruebas en un entorno más amigable que la consola de pypy.&lt;/p&gt;
&lt;h2&gt;Requerimientos&lt;/h2&gt;
&lt;p&gt;Necesitaremos tener instalada una versión reciente de virtualenv y git.&lt;/p&gt;
&lt;h2&gt;Al lío&lt;/h2&gt;
&lt;p&gt;¡Si queréis la versión TL;DR &lt;a href="https://github.com/kikocorreoso/test_pypy_numpypy#usage-of-the-script"&gt;pinchad aquí&lt;/a&gt;! Si sois un poco más pacientes y queréis entender un poco lo que vamos a hacer seguid leyento.&lt;/p&gt;
&lt;p&gt;Todos los comandos que vienen a continuación los tenéis que meter en un terminal. Primero creamos un directorio que se llamará &lt;strong&gt;pypy50&lt;/strong&gt; en vuestro &lt;strong&gt;$HOME&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir &lt;span class="nv"&gt;$HOME&lt;/span&gt;/pypy50
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora nos vamos al directorio recién creado y nos descargamos el fichero comprimido que contiene el pypy portable de 64 bits&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><category term="jupyter"></category><category term="numpy"></category><category term="numpypy"></category><category term="pypy"></category><category term="pypy-portable"></category><category term="virtualenv"></category></entry><entry><title>El producto de matrices y el nuevo operador @</title><link href="http://pybonacci.github.io/2016/02/22/el-producto-de-matrices-y-el-nuevo-operador/" rel="alternate"></link><published>2016-02-22T15:00:46+00:00</published><updated>2016-02-22T15:00:46+00:00</updated><author><name>Álex Sáez</name></author><id>tag:pybonacci.github.io,2016-02-22:2016/02/22/el-producto-de-matrices-y-el-nuevo-operador/</id><summary type="html">&lt;style type="text/css"&gt;/*!
*
* IPython notebook
*
*/
/* CSS font colors for translated ANSI colors. */
.ansibold {
  font-weight: bold;
}
/* use dark versions for foreground, to improve visibility */
.ansiblack {
  color: black;
}
.ansired {
  color: darkred;
}
.ansigreen {
  color: darkgreen;
}
.ansiyellow {
  color: #c4a000;
}
.ansiblue {
  color: darkblue;
}
.ansipurple {
  color: darkviolet;
}
.ansicyan {
  color: steelblue;
}
.ansigray {
  color: gray;
}
/* and light for background, for the same reason */
.ansibgblack {
  background-color: black;
}
.ansibgred {
  background-color: red;
}
.ansibggreen {
  background-color: green;
}
.ansibgyellow {
  background-color: yellow;
}
.ansibgblue {
  background-color: blue;
}
.ansibgpurple {
  background-color: magenta;
}
.ansibgcyan {
  background-color: cyan;
}
.ansibggray {
  background-color: gray;
}
div.cell {
  /* Old browsers */
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-box-align: stretch;
  display: -moz-box;
  -moz-box-orient: vertical;
  -moz-box-align: stretch;
  display: box;
  box-orient: vertical;
  box-align: stretch;
  /* Modern browsers */
  display: flex;
  flex-direction: column;
  align-items: stretch;
  border-radius: 2px;
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  border-width: 1px;
  border-style: solid;
  border-color: transparent;
  width: 100%;
  padding: 5px;
  /* This acts as a spacer between cells, that is outside the border */
  margin: 0px;
  outline: none …&lt;/style&gt;</summary><category term="arrays"></category><category term="científico"></category><category term="dot"></category><category term="matrices"></category><category term="matrix"></category><category term="multiplicación"></category><category term="numpy"></category><category term="pep 465"></category><category term="product"></category><category term="python 3.5"></category></entry><entry><title>Fórmula para el amor</title><link href="http://pybonacci.github.io/2016/02/14/formula-para-el-amor/" rel="alternate"></link><published>2016-02-14T06:00:41+00:00</published><updated>2016-02-14T06:00:41+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2016-02-14:2016/02/14/formula-para-el-amor/</id><summary type="html">&lt;p&gt;Esta entrada &lt;a href="https://twitter.com/Pybonacci/status/478209983595962368"&gt;se proyectó hace unos doscientos cuarenta y pico días&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vamos a representar la siguiente fórmula:&lt;/p&gt;
&lt;p&gt;${x}^2 + (y - \sqrt{x^2})^2 = 1$&lt;/p&gt;
&lt;p&gt;Si despejamos la $y$ nos quedarán las siguientes soluciones:&lt;/p&gt;
&lt;p&gt;$y_{1} = \sqrt{x^2} + \sqrt{1 - x^2}$&lt;/p&gt;
&lt;p&gt;$y_{2} = \sqrt{x^2} - \sqrt{1 - x^2}$&lt;/p&gt;
&lt;p&gt;En código Python usando Numpy y Matplotlib tendremos lo siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Felicidades a quien corresponda.&lt;/p&gt;
&lt;p&gt;Idea copiada literalmente de &lt;a href="https://news.ycombinator.com/item?id=2218311"&gt;aquí&lt;/a&gt;.&lt;/p&gt;</summary><category term="amor"></category><category term="love"></category><category term="Love supreme"></category><category term="mami je t'aime"></category></entry><entry><title>Por qué dar una charla *ahora* y no luego</title><link href="http://pybonacci.github.io/2016/02/13/por-que-dar-una-charla-ahora-y-no-luego/" rel="alternate"></link><published>2016-02-13T17:57:33+00:00</published><updated>2016-02-13T17:57:33+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2016-02-13:2016/02/13/por-que-dar-una-charla-ahora-y-no-luego/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; Esto iba a ser un email para la lista de PyLadies España, pero me ha parecido más divertido compartirlo en público 🙂&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Contexto:&lt;/strong&gt; Como sabéis, &lt;a href="http://pydata.org/madrid2016/cfp/"&gt;dentro de una semana se cierra el plazo para presentar charlas a la PyData Madrid 2016&lt;/a&gt;, que se celebrará en abril. Es un momento importante porque, si bien no es la primera vez que tenemos presencia de «trazas de PyData» en nuestro país (la primera fue en la EuroPython 2015) es la primera vez que se organiza como evento independiente. Yo tuve el privilegio de asistir a la primera que se hizo en Europa en un tiempo en el que me podía permitir el lujo de hacer estas cosas. Mucha gente se piensa que soy una especie de experto nacional de Python así que, inspirado por un intercambio que hemos tenido con una chica en …&lt;/em&gt;&lt;/p&gt;</summary></entry><entry><title>Cómo crear extensiones en C para Python usando CFFI y numba</title><link href="http://pybonacci.github.io/2016/02/07/como-crear-extensiones-en-c-para-python-usando-cffi-y-numba/" rel="alternate"></link><published>2016-02-07T23:23:18+00:00</published><updated>2016-02-07T23:23:18+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2016-02-07:2016/02/07/como-crear-extensiones-en-c-para-python-usando-cffi-y-numba/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este artículo vamos a ver &lt;strong&gt;cómo crear extensiones en C para Python usando CFFI y aceleradas con numba&lt;/strong&gt;. El proyecto &lt;a href="http://cffi.readthedocs.org/"&gt;CFFI&lt;/a&gt; ("C Foreign Function Interface") pretende ofrecer una manera de llamar a bibliotecas escritas en C desde Python de una manera simple, mientras que &lt;a href="http://pybonacci.org/tag/numba/"&gt;numba&lt;/a&gt;, como podéis leer en nuestro blog, es un compilador JIT para código Python numérico. Mientras que hay algo de literatura sobre cómo usar CFFI, muy poco se ha escrito sobre cómo usar funciones CFFI desde numba, una característica que estaba desde las primeras versiones pero que no se completó &lt;a href="https://github.com/numba/numba/pull/1454"&gt;hasta hace cuatro meses&lt;/a&gt;. Puede parecer contradictorio mezclar estos dos proyectos pero en seguida veremos la justificación y por qué hacerlo puede abrir nuevos caminos para escribir código Python extremadamente eficiente.&lt;/p&gt;
&lt;p&gt;Este trabajo ha surgido a raíz de mis intentos de utilizar funciones hipergeométricas …&lt;/p&gt;</summary><category term="c"></category><category term="cffi"></category><category term="numba"></category><category term="performance"></category><category term="python"></category><category term="python 3"></category></entry><entry><title>Explorando el Planeta Nueve con Python usando poliastro</title><link href="http://pybonacci.github.io/2016/01/26/explorando-el-planeta-nueve-con-python-usando-poliastro/" rel="alternate"></link><published>2016-01-26T23:37:19+00:00</published><updated>2016-01-26T23:37:19+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2016-01-26:2016/01/26/explorando-el-planeta-nueve-con-python-usando-poliastro/</id><summary type="html">

&lt;blockquote&gt;&lt;p&gt;"Sometimes I think, how lucky we are to live in this time, the first moment in human history when we are, in fact visiting other worlds and engaging in a deep reconnaissance of the cosmos" — Carl Sagan&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Cuando aún resonaban los ecos de la «expulsión» de Plutón de nuestro sistema planetario (o más bien, de su descenso a la división de los planetas enanos), de repente dos científicos del Instituto de Tecnología de California (Caltech para los amigos) publican un artículo en el que &lt;strong&gt;hipotetizan la existencia de un planeta más masivo que la Tierra mucho más allá de la órbita de Neptuno&lt;/strong&gt;. Batygin y Brown, los responsables de la investigación, han bautizado a su &lt;em&gt;aún no observado&lt;/em&gt; descubrimiento como &lt;strong&gt;Planeta Nueve&lt;/strong&gt;. No he podido evitar acordarme de la cita de Carl Sagan mientras escribía este artículo :)&lt;/p&gt;
&lt;p&gt;Para los detalles de este fantástico avance y un análisis de sus implicaciones os remito a &lt;a href="http://danielmarin.naukas.com/2016/01/20/estrechando-el-cerco-alrededor-del-planeta-x/"&gt;los excelentes artículos de Daniel Marín en Eurekablog acerca del "Planeta Nueve"&lt;/a&gt;. En Pybonacci vamos a aportar nuestro granito de arena, y como apasionados de la astronomía y del software libre que somos, vamos a darle una pasada al &lt;a href="http://iopscience.iop.org/article/10.3847/0004-6256/151/2/22/pdf"&gt;artículo original de Batygin y Brown&lt;/a&gt; (disponible libremente en PDF) y jugar con los datos que ofrece como más nos gusta: usando Python ;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: El análisis que se plantea a continuación no tiene el debido rigor científico y en ningún caso debe tomarse como un punto de partida para una búsqueda seria del Planeta Nueve. Dicho lo cual, si alguien lo encuentra gracias a este artículo por lo menos que me invite a un café :D</summary><category term="astronomía"></category><category term="astropy"></category><category term="poliastro"></category><category term="python"></category><category term="python 3"></category></entry><entry><title>Reglas para refactorizar funciones lambda</title><link href="http://pybonacci.github.io/2016/01/03/reglas-para-refactorizar-funciones-lambda/" rel="alternate"></link><published>2016-01-03T14:27:12+00:00</published><updated>2016-01-03T14:27:12+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2016-01-03:2016/01/03/reglas-para-refactorizar-funciones-lambda/</id><summary type="html">&lt;p&gt;Un gran ejercicio que podéis hacer de vez en cuando es revisar la documentación oficial de Python. La misma me parece increiblemente completa aunque también un poco anárquica o sin un guión mínimamente claro para seguir diferentes tópicos.&lt;/p&gt;
&lt;p&gt;Hoy, revisando el &lt;a href="https://docs.python.org/3.6/howto/functional.html#small-functions-and-the-lambda-expression"&gt;HOWTO de programación funcional, casi al final del documento y sin llamar la atención&lt;/a&gt;, he encontrado la siguiente documentación para refactorizar funciones lambda sugerida por &lt;a href="https://wiki.python.org/moin/FredrikLundh"&gt;Fredrik Lundh&lt;/a&gt;. Las reglas que propone para la refactorización de las funciones lambda dicen lo siguiente:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
  &lt;li&gt;
    Escribe una función Lambda.
  &lt;/li&gt;
  &lt;li&gt;
    Escribe un comentario explicando qué se supone que hace la función lambda.
  &lt;/li&gt;
  &lt;li&gt;
    Estudia el comentario durante un rato y piensa un nombre que capture la esencia del comentario.
  &lt;/li&gt;
  &lt;li&gt;
    Convierte la función lambda a una declaración &lt;code&gt;def&lt;/code&gt; usando el nombre pensado en el anterior paso.
  &lt;/li&gt;
  &lt;li&gt;
    Elimina el comentario.
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;😛&lt;/p&gt;
&lt;p&gt;Feliz año 2016.&lt;/p&gt;</summary><category term="programación funcional"></category><category term="python"></category><category term="refactoring"></category><category term="trol"></category></entry><entry><title>Joyas Python del 2015</title><link href="http://pybonacci.github.io/2015/12/28/joyas-python-del-2015/" rel="alternate"></link><published>2015-12-28T19:42:54+00:00</published><updated>2015-12-28T19:42:54+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2015-12-28:2015/12/28/joyas-python-del-2015/</id><summary type="html">&lt;p&gt;Este es un resumen de algunas joyas que he descubierto este 2015 dentro del mundo Python. Que las haya descubierto en el 2015 no significa que necesariamente sean cosas novedosas pero la mayoría siguen de actualidad. Tampoco es un resumen ordenado. de hecho, es un pequeño cajón de sastre. Tampoco es temático sobre ciencia, aunque la mayoría están relacionadas con ciencia ya que es a lo que me dedico. En las siguientes líneas nombro muchas cosas pero solo incluyo enlaces sobre las joyas de las que quiero hablar.&lt;/p&gt;
&lt;p&gt;WEB:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;En el pasado he trasteado algo con Django para hacer cosas que se puedan compartir con mucha otra gente. Django es un framework web muy completo o, como se suele decir, con baterías incluidas y el de más amplio uso dentro del mundo Python. El hecho de incluir tantas cosas de …&lt;/li&gt;&lt;/ul&gt;</summary></entry><entry><title>The Software Sustainability Institute</title><link href="http://pybonacci.github.io/2015/12/14/the-software-sustainability-institute/" rel="alternate"></link><published>2015-12-14T20:22:38+00:00</published><updated>2015-12-14T20:22:38+00:00</updated><author><name>David Pérez Suárez</name></author><id>tag:pybonacci.github.io,2015-12-14:2015/12/14/the-software-sustainability-institute/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Y eso... ¿qué es?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;El &lt;a href="http://software.ac.uk/" title="Software Sustainability Institute"&gt;instituto de software sostenible&lt;/a&gt; (SSI por sus siglas del inglés) es una organización con sede en el Reino Unido cuyo objetivo es mejorar el software en el ámbito de la investigación, cubriendo áreas de ciencia, humanidades y arte. Su lema es claro:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Un mejor software, una mejor investigación".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Según &lt;a href="http://www.software.ac.uk/blog/2014-12-04-its-impossible-conduct-research-without-software-say-7-out-10-uk-researchers"&gt;los resultados de una encuesta que realizaron el año pasado&lt;/a&gt;, siete de cada diez investigadores en Reino Unido no pueden llevar a cabo su investigación sin software. Lo que muestra que el software es una pieza imprescindible en la investigación de hoy en día.&lt;/p&gt;
&lt;p&gt;Por otro lado, el término &lt;em&gt;sostenible&lt;/em&gt;, en software, significa que lo que uses hoy puedas usarlo mañana, y que no se haya abandonado. Esto, que puede parecer una trivialidad, no es una cosa que se haya tenido en cuenta en muchas disciplinas …&lt;/p&gt;</summary></entry><entry><title>Breve introducción a los Sistemas de Recomendación</title><link href="http://pybonacci.github.io/2015/12/11/breve-introduccion-a-los-sistemas-de-recomendacion/" rel="alternate"></link><published>2015-12-11T12:47:08+00:00</published><updated>2015-12-11T12:47:08+00:00</updated><author><name>Manuel Garrido</name></author><id>tag:pybonacci.github.io,2015-12-11:2015/12/11/breve-introduccion-a-los-sistemas-de-recomendacion/</id><summary type="html">&lt;p&gt;En este pequeño tutorial, vamos a hablar sobre &lt;a href="https://es.wikipedia.org/wiki/Sistema_de_recomendaci%C3%B3n"&gt;Sistemas de Recomendación&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Es posible que no sepas que son, sin embargo interactúas constantemente con ellos en Internet.&lt;/p&gt;
&lt;p&gt;&lt;img alt="amazon" src="http://www.getvero.com/wp-content/uploads/2013/02/amazon-recommendations.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;Cada vez que Amazon te sugiere productos relacionados...&lt;/p&gt;
&lt;p&gt;&lt;img alt="netflix" src="/images/2015/12/netflixpregodmode-100574324-orig.png"&gt;&lt;/p&gt;
&lt;p&gt;O cuando Netflix o Youtube te recomiendan contenido que te puede interesar...&lt;/p&gt;
&lt;p&gt;La finalidad de un sistema de recommendación es predecir la valoración que un usuario va a hacer de un ítem que todavía no ha evaluado.&lt;/p&gt;
&lt;p&gt;Esta valoración se genera al analizar una de dos cosas, o las características de cada item, o las valoraciones de cada usuario a cada item, y se usa para recomendar contenido personalizado a los usuarios.&lt;/p&gt;
&lt;p&gt;Hay dos tipos principales de sistemas de recomendación:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Filtrado de Contenido. Las recomendaciones están basadas en las características de cada item.&lt;/li&gt;
&lt;li&gt;Filtrado Colaborativo. Las recomendaciones están basadas en las valoraciones existentes de los usuarios …&lt;/li&gt;&lt;/ul&gt;</summary></entry><entry><title>Aprende historia gracias a geocodificación inversa, mapping y wikipedia</title><link href="http://pybonacci.github.io/2015/12/01/aprende-historia-gracias-a-geocodificacion-inversa-mapping-y-wikipedia/" rel="alternate"></link><published>2015-12-01T08:40:18+00:00</published><updated>2015-12-01T08:40:18+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2015-12-01:2015/12/01/aprende-historia-gracias-a-geocodificacion-inversa-mapping-y-wikipedia/</id><summary type="html">&lt;p&gt;El otro día, mientras esperaba en Juan Bravo a un amigo, tuve algo de tiempo para divagar y entre esas divagaciones junté Juan Bravo, Python, Internet, geolocalización, historia,... En fin, que estaba en Juan Bravo, no tenía ni idea de quien era ese señor (llamadme ignorante), tenía algo de tiempo y se me ocurrió poder obtener información de calles a partir de un mapa y de la wikipedia y, de aquellos polvos, estos lodos, y nació &lt;a href="http://map2wiki.runbear.webfactional.com/"&gt;map2wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;¿Qué es map2wiki?&lt;/h2&gt;
&lt;p&gt;En pocas palabras, es una aplicación web que te permite buscar una calle/avenida/plaza/... en un mapa y obtener información sobre lo que le da nombre a esa dirección.&lt;/p&gt;
&lt;h2&gt;¿Por qué no buscarlo directamente en la wikipedia?&lt;/h2&gt;
&lt;p&gt;Porque eso no es tan divertido y no hubiera aprendido nada sobre &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;, &lt;a href="http://jinja.pocoo.org/"&gt;Jinja2&lt;/a&gt;, &lt;a href="https://es.wikipedia.org/wiki/Geocodificaci%C3%B3n_inversa"&gt;geocodificación inversa&lt;/a&gt;, &lt;a href="http://www.openstreetmap.org/"&gt;OpenStreetMap&lt;/a&gt;, &lt;a href="http://wiki.openstreetmap.org/wiki/Nominatim"&gt;Nominatim&lt;/a&gt;, &lt;a href="http://openlayers.org/"&gt;OpenLayers&lt;/a&gt;, Javascript, &lt;a href="http://www.brython.info"&gt;Brython&lt;/a&gt;, la …&lt;/p&gt;</summary><category term="APIs"></category><category term="brython"></category><category term="flask"></category><category term="Jinja2"></category><category term="map2wiki"></category><category term="nominatim"></category><category term="openlayers"></category><category term="openstreetmap"></category><category term="wikipedia"></category></entry><entry><title>PyConES 2015: Crónica de un evento inolvidable</title><link href="http://pybonacci.github.io/2015/11/26/pycones-2015-cronica-de-un-evento-inolvidable/" rel="alternate"></link><published>2015-11-26T21:12:32+00:00</published><updated>2015-11-26T21:12:32+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2015-11-26:2015/11/26/pycones-2015-cronica-de-un-evento-inolvidable/</id><summary type="html">&lt;p&gt;Esta es la primera crónica que escribo de una conferencia a la que asisto desde que existe este blog. Y no puedo dejar de pensar que «ya iba siendo hora», porque en todo este tiempo he ido a 3 PyConES, 2 PyData London, 1 PyConSE y 1 SciPy LA. Todas ellas fueron especiales a su modo y me enseñaron mucho, pero &lt;a href="http://2015.es.pycon.org/"&gt;la tercera PyCon España que se ha celebrado en Valencia&lt;/a&gt; ha significado el fin de semana más emocionante (y estresante) de mi vida. Va a ser una crónica un poco rara porque solo fui a una charla, pero aun así la quiero compartir con vosotros para dejar de sentirme culpable, empezar a relatar todos los eventos a los que vaya a partir de ahora y contaros nuestra experiencia «desde la retaguardia».&lt;/p&gt;
&lt;p&gt;El 4 de enero de este año le …&lt;/p&gt;</summary><category term="pycones"></category></entry><entry><title>Como hacer Análisis de Sentimiento en español</title><link href="http://pybonacci.github.io/2015/11/24/como-hacer-analisis-de-sentimiento-en-espanol-2/" rel="alternate"></link><published>2015-11-24T11:47:34+00:00</published><updated>2015-11-24T11:47:34+00:00</updated><author><name>Manuel Garrido</name></author><id>tag:pybonacci.github.io,2015-11-24:2015/11/24/como-hacer-analisis-de-sentimiento-en-espanol-2/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Este post es una continuación de un &lt;a href="http://pybonacci.org/2015/11/16/dibujando-100k-tweets-de-mi-ciudad/"&gt;articulo previo&lt;/a&gt; donde explico como obtener y dibujar en un mapa un mapa de calor de miles de tweets enviados desde mi ciudad&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Puedes encontrar el código que he usado en &lt;a href="https://github.com/manugarri/tweets_map"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Tambien he subido el archivo de tweets obtenido en el articulo anterior para que puedas seguir este tutorial sin tener que descargarte los tweets.&lt;/p&gt;
&lt;p&gt;En este post, me enfocaré en como hacer análisis de sentimiento (Sentiment Analysis) en español.&lt;/p&gt;
&lt;p&gt;Hacer Sentiment Analysis en inglés es muy fácil. Hay múltiples paquetes que vienen con modelos preparados para calcular el sentimiento o polaridad de un nuevo texto (ejemplos incluyen &lt;a href="https://textblob.readthedocs.org"&gt;TextBlob&lt;/a&gt; o &lt;a href="https://code.google.com/p/word2vec/"&gt;word2vec&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Sin embargo, no tengo constancia de un modelo preparado en español, así que en este post vamos a hacer nuestro propio modelo predictivo :).&lt;/p&gt;
&lt;p&gt;Para eso, lo primero que necesitamos es un …&lt;/p&gt;</summary></entry><entry><title>Dibujando 100k tweets de mi ciudad</title><link href="http://pybonacci.github.io/2015/11/16/dibujando-100k-tweets-de-mi-ciudad/" rel="alternate"></link><published>2015-11-16T20:27:46+00:00</published><updated>2015-11-16T20:27:46+00:00</updated><author><name>Manuel Garrido</name></author><id>tag:pybonacci.github.io,2015-11-16:2015/11/16/dibujando-100k-tweets-de-mi-ciudad/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Esta entrada &lt;a href="http://blog.manugarri.com/plotting-100k-tweets-from-my-home-town/"&gt;apareció originalmente en inglés en mi blog&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hace tiempo que he querido jugar con la API de Twitter. El pasado verano se me ocurrió que podría ser interesante dibujar un mapa de mi ciudad (Murcia, España, bella ciudad con comida increible) mostrando un heatmap de tweets.&lt;/p&gt;
&lt;p&gt;La idea es que dibujando esos tweets podría encontrar patrones interesantes de mi ciudad. Por ejemplo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;¿Desde qué áreas la gente &lt;em&gt;tuitea&lt;/em&gt; más?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;¿Qué horas del día son las más activas?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;¿Cuales son los lugares más felices/tristes?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;¿Hay alguna comunidad &lt;em&gt;tuitera&lt;/em&gt; local extranjera?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Con esas ideas en la cabeza empecé la investigación. Primero, necesitaba una librería para interactuar con la API de Twitter. Después de probar la extensa cantidad de &lt;em&gt;wrappers&lt;/em&gt; disponibles me decidí por &lt;a href="http://www.tweepy.org/" target="_blank"&gt;Tweepy&lt;/a&gt;. Posee una interfaz simple y agradable de usar y está bien mantenida.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(INCISO, todo el …&lt;/em&gt;&lt;/p&gt;</summary><category term="API"></category><category term="heatmap"></category><category term="Murcia que bella eres"></category><category term="twitter"></category></entry><entry><title>¿Cómo funciona el método append de una lista en CPython?</title><link href="http://pybonacci.github.io/2015/11/12/como-funciona-el-metodo-append-de-una-lista-en-cpython/" rel="alternate"></link><published>2015-11-12T23:01:56+00:00</published><updated>2015-11-12T23:01:56+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2015-11-12:2015/11/12/como-funciona-el-metodo-append-de-una-lista-en-cpython/</id><summary type="html">&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      &lt;p&gt;
        Vamos a empezar con más preguntas que respuestas.
      &lt;/p&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Como sabéis, las listas de Python son &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;arrays&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; dinámicos. Por otro lado, las tuplas son &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;arrays&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; estáticos.
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;¿Qué implica que las listas sean &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;arrays&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; dinámicos?&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Al ser un array dinámico podemos modificar sus elementos así como extender el array (lista).
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;¿Cómo funciona lo de extender el &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;array&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; (lista)?&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Cada vez que usamos el método &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;append&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; de las listas se crea una copia de la lista original y se añade un elemento a esa copia para luego borrar el array original.
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;¿Es esto último cierto?&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Más o menos.
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Todos estaréis conmigo que si cada vez que añadimos un nuevo elemento tenemos que …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><category term="append"></category><category term="CPython"></category><category term="implementación"></category><category term="lista"></category></entry><entry><title>Vamos a comernos el mundo y [Argentina] en Python</title><link href="http://pybonacci.github.io/2015/11/08/vamos-a-comernos-el-mundo-y-argentina-en-python/" rel="alternate"></link><published>2015-11-08T23:13:14+00:00</published><updated>2015-11-08T23:13:14+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2015-11-08:2015/11/08/vamos-a-comernos-el-mundo-y-argentina-en-python/</id><summary type="html">&lt;hr&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Edit (2015/11/14):&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Quiero agradecer a todos los que se han prestado al juego de la subasta. Al final hemos conseguido donar más de 120 € al proyecto Argentina en Python.&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;¡¡¡Sois grandes!!!!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Quiero agradecer, especialmente, a Yami y a Ariel su generosidad&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Hoy nos alejamos un poco de la temática general del blog pero nos metemos de lleno en el tema de cómo crear comunidad, con amor, con dedicación y con mucho esfuerzo, en una apuesta personal de unas personas admirables.&lt;/p&gt;
&lt;p&gt;Además del apasionante relato que tenemos hoy, si sigues leyendo, puedes llegar a conseguir una entrada para la &lt;a href="http://2015.es.pycon.org/es/"&gt;PyConES 2015 en Valencia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En la presente entrada vamos a charlar con &lt;a href="http://argentinaenpython.com.ar/el-equipo/"&gt;Johanna, Manuel y Errante, equipo fullstack de Argentina en Python&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Pero, -¿quiénes son estos?-, os preguntáreis.&lt;/h2&gt;
&lt;p&gt;Todo esto empezó como la apuesta vital de una persona que ve …&lt;/p&gt;</summary><category term="Argentina en Python"></category><category term="comunidad"></category><category term="humitos"></category><category term="Johanna"></category><category term="Kauffman"></category><category term="pycones"></category><category term="Quimica &amp; Nomada"></category></entry><entry><title>Curso de Python en la ETSIAE: 4ª edición</title><link href="http://pybonacci.github.io/2015/10/15/curso-de-python-en-la-etsiae-4a-edicion/" rel="alternate"></link><published>2015-10-15T12:05:25+00:00</published><updated>2015-10-15T12:05:25+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2015-10-15:2015/10/15/curso-de-python-en-la-etsiae-4a-edicion/</id><summary type="html">&lt;p&gt;¡Ya vamos a por la &lt;strong&gt;cuarta edición de nuestro curso de Python para aeronáuticos&lt;/strong&gt;! Esta vez durará &lt;del datetime="2015-10-25T22:10:48+00:00"&gt;15&lt;/del&gt;&lt;ins datetime="2015-10-25T22:10:48+00:00"&gt;12&lt;/ins&gt; horas y este es el temario:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Introducción a la sintaxis de &lt;strong&gt;Python&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Uso del Notebook de &lt;strong&gt;IPython&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Arrays de &lt;strong&gt;NumPy&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Representación gráfica con &lt;strong&gt;matplotlib&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Análisis numérico con &lt;strong&gt;SciPy&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Cálculo simbólico con &lt;strong&gt;SymPy&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://pybonacci.org/images/2015/10/cartel-213x300.png"&gt;&lt;/p&gt;
&lt;p&gt;El curso se desarrollará en la &lt;strong&gt;sala II del centro de cálculo de la ETSI Aeronáutica y del Espacio&lt;/strong&gt; de &lt;del datetime="2015-10-25T22:05:45+00:00"&gt;17:30&lt;/del&gt;&lt;ins datetime="2015-10-25T22:05:45+00:00"&gt;18:00&lt;/ins&gt; a 20:00 a lo largo de &lt;strong&gt;dos semanas&lt;/strong&gt;, los días 3, 4, 5, 10, 11 y 12.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;ins datetime="2015-10-29T17:07:38+00:00"&gt;La inscripción se ha cerrado.&lt;/ins&gt; ¡Estad atentos vuestro email institucional estos días!&lt;/p&gt;
&lt;p&gt;Lo impartiremos conjuntamente el equipo AeroPython y estará pensado para que sea un curso eminentemente práctico, con ejemplos extraídos de asignaturas de la carrera. Con los conocimientos básicos de programación que se imparten en la …&lt;/p&gt;</summary><category term="#aeropython"></category><category term="curso"></category><category term="etsiae"></category><category term="python"></category></entry><entry><title>Comunidades, relevo generacional y la muerte de Python Hispano</title><link href="http://pybonacci.github.io/2015/10/13/comunidades-relevo-generacional-y-la-muerte-de-python-hispano/" rel="alternate"></link><published>2015-10-13T21:30:18+00:00</published><updated>2015-10-13T21:30:18+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2015-10-13:2015/10/13/comunidades-relevo-generacional-y-la-muerte-de-python-hispano/</id><summary type="html">&lt;p&gt;Hace muchos meses que no escribo un artículo técnico, y me temo que este tampoco va a serlo. Lo que es peor: hace aún más meses que no escribo un artículo triste, y lamentablemente ha llegado el momento de poner algunas ideas negro sobre blanco. Este texto, como su propio título indica, trata de comunidades, de relevo generacional y de la muerte de Python Hispano.&lt;/p&gt;
&lt;p&gt;Primero, un poco de contexto. &lt;a href="https://groups.google.com/d/msg/clases-2009-2010/2ZBNzZKfypk/6ai711EZE94J"&gt;Descubrí Python en 2010&lt;/a&gt; buscando en Google "free alternative to Mathematica" y accediendo al proyecto Sage, en diciembre de 2011 creé un blog llamado &lt;a href="http://web.archive.org/web/20120505160240/http://juanlu001.github.com/"&gt;"Dead Epsilon"&lt;/a&gt;, en enero de 2012 fui a &lt;a href="http://python-madrid.es/meetings/reunion-enero-2012-python-madrid/"&gt;mi primera reunión de Python Madrid&lt;/a&gt; y en marzo de 2012 maté Dead Epsilon y &lt;a href="http://pybonacci.org/2012/03/16/introduccion-a-python-para-cientificos-e-ingenieros/"&gt;creamos Pybonacci&lt;/a&gt;. Eso significa que pronto va a hacer 4 años que formo parte de esta comunidad: &lt;strong&gt;la comunidad Python&lt;/strong&gt;.&lt;figure id="attachment_3485" style="width: 253px" class="wp-caption aligncenter"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pybonacci.org/images/2015/10/cami_white-253x300.jpg"&gt;&lt;/p&gt;
&lt;p&gt;La intersección entre …&lt;/p&gt;</summary></entry><entry><title>Análisis Cluster (III): Clasificación no supervisada mediante K-medias</title><link href="http://pybonacci.github.io/2015/09/28/analisis-cluster-iii-clasificacion-no-supervisada-mediante-k-medias/" rel="alternate"></link><published>2015-09-28T19:20:35+00:00</published><updated>2015-09-28T19:20:35+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2015-09-28:2015/09/28/analisis-cluster-iii-clasificacion-no-supervisada-mediante-k-medias/</id><summary type="html">&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      (Este es el tercer capítulo de la mini-serie de artículos sobre análisis cluster que estamos haciendo en pybonacci, si todavía no has leído &lt;a href="http://pybonacci.org/tag/agrupamiento-clusters/"&gt;los anteriores artículos les puedes echar un ojo ahora&lt;/a&gt;. Escribir esta tercera parte solo ha tardado ¡¡¡tres años en salir!!!).&lt;br /&gt; El algoritmo de k-medias es uno de los algoritmos más sencillos de agrupamiento dentro del campo del aprendizaje automático (&lt;em&gt;machine learning&lt;/em&gt; para los &lt;em&gt;hipsters&lt;/em&gt;). Sirve para agrupar $N$-elementos en $K$-grupos distintos.&lt;/p&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;h2&lt;/span&gt; &lt;span class="s s-Atom"&gt;id=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Agrupamiento&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nv"&gt;Agrupamiento&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;a&lt;/span&gt; &lt;span class="s s-Atom"&gt;class=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;anchor-link&amp;quot;&lt;/span&gt; &lt;span class="s s-Atom"&gt;href=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#Agrupamiento&amp;quot;&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;gt;&amp;amp;#&lt;/span&gt;&lt;span class="mi"&gt;182&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;lt;/a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="s s-Atom"&gt;&amp;lt;/h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Breve&lt;/span&gt; &lt;span class="s s-Atom"&gt;resumen&lt;/span&gt; &lt;span class="s s-Atom"&gt;de&lt;/span&gt; &lt;span class="s s-Atom"&gt;lo&lt;/span&gt; &lt;span class="s s-Atom"&gt;visto&lt;/span&gt; &lt;span class="s s-Atom"&gt;en&lt;/span&gt; &lt;span class="s s-Atom"&gt;anteriores&lt;/span&gt; &lt;span class="s s-Atom"&gt;artículos&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;br&lt;/span&gt; &lt;span class="s s-Atom"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Las&lt;/span&gt; &lt;span class="s s-Atom"&gt;técnicas&lt;/span&gt; &lt;span class="s s-Atom"&gt;de&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;a&lt;/span&gt; &lt;span class="s s-Atom"&gt;href=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://en.wikipedia.org/wiki/Cluster_analysis&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;agrupamiento&lt;/span&gt; &lt;span class="s s-Atom"&gt;o&lt;/span&gt; &lt;span class="s s-Atom"&gt;análisis&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;em&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;Cluster&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;lt;/em&amp;gt;&amp;lt;/a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;son&lt;/span&gt; &lt;span class="s s-Atom"&gt;un&lt;/span&gt; &lt;span class="s s-Atom"&gt;tipo&lt;/span&gt; &lt;span class="s s-Atom"&gt;de&lt;/span&gt; &lt;span class="s s-Atom"&gt;aprendizaje&lt;/span&gt; &lt;span class="s s-Atom"&gt;no&lt;/span&gt; &lt;span class="s s-Atom"&gt;supervisado&lt;/span&gt; &lt;span class="s s-Atom"&gt;ya&lt;/span&gt; &lt;span class="s s-Atom"&gt;que&lt;/span&gt; &lt;span class="s s-Atom"&gt;no&lt;/span&gt; &lt;span class="s s-Atom"&gt;requieren&lt;/span&gt; &lt;span class="s s-Atom"&gt;un&lt;/span&gt; &lt;span class="s s-Atom"&gt;aprendizaje&lt;/span&gt; &lt;span class="s s-Atom"&gt;previo&lt;/span&gt; &lt;span class="s s-Atom"&gt;a&lt;/span&gt; &lt;span class="s s-Atom"&gt;partir&lt;/span&gt; &lt;span class="s s-Atom"&gt;de&lt;/span&gt; &lt;span class="s s-Atom"&gt;los&lt;/span&gt; &lt;span class="s s-Atom"&gt;datos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;br&lt;/span&gt; &lt;span class="s s-Atom"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Son&lt;/span&gt; &lt;span class="s s-Atom"&gt;métodos&lt;/span&gt; &lt;span class="s s-Atom"&gt;para&lt;/span&gt; &lt;span class="s s-Atom"&gt;agrupar …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><category term="agrupamiento clusters"></category><category term="ai"></category><category term="aprendizaje automático"></category><category term="aprendizaje no supervisado"></category><category term="clasificación clustering"></category><category term="ia"></category><category term="inteligencia artificial"></category><category term="machine learning"></category><category term="scipy"></category><category term="scipy.cluster"></category><category term="scipy.spatial"></category><category term="unsupervised learning"></category></entry><entry><title>¡Curso AeroPython en la UC3M!</title><link href="http://pybonacci.github.io/2015/09/17/curso-aeropython-en-la-uc3m/" rel="alternate"></link><published>2015-09-17T17:39:32+00:00</published><updated>2015-09-17T17:39:32+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2015-09-17:2015/09/17/curso-aeropython-en-la-uc3m/</id><summary type="html">&lt;p&gt;¡Tenemos el placer de anunciar un nuevo &lt;strong&gt;curso de Python aplicado a la ingeniería aeroespacial&lt;/strong&gt;, esta vez organizado por el Departamento de Ingeniería Aeroespacial de la Universidad Carlos III de Madrid!&lt;/p&gt;
&lt;p&gt;El curso durará 10 horas, &lt;ins datetime="2015-09-19T06:36:06+00:00"&gt;será gratuito para los alumnos&lt;/ins&gt; y el temario será el siguiente:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Introducción a la &lt;strong&gt;sintaxis de Python&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Uso del notebook de &lt;strong&gt;Jupyter&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Arrays de &lt;strong&gt;NumPy&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Representación gráfica con &lt;strong&gt;matplotlib&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Análisis numérico con &lt;strong&gt;SciPy&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Cálculo simbólico con &lt;strong&gt;SymPy&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;El horario será de 13:00 a 15:00 los días 5 a 9 de octubre y las clases tendrán lugar en el aula 7.0.J03&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pybonacci.org/images/2015/09/cartel_curso_Python_uc3m_oct-2015-207x300.png"&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;del datetime="2015-09-27T21:49:21+00:00"&gt;Desde este momento &lt;a href="http://bit.ly/aeropython-inscripcion"&gt;la inscripción está abierta en este formulario&lt;/a&gt; y cerrará el 25 de septiembre a las 13:00 GMT+2.&lt;/del&gt;&lt;ins datetime="2015-09-27T21:49:21+00:00"&gt;La inscripción está cerrada ¡y hay casi 100 personas! En unos días publicaremos la lista definitiva de admitidos …&lt;/ins&gt;&lt;/p&gt;</summary><category term="#aeropython"></category><category term="python"></category></entry><entry><title>Regresión lineal simple explicada</title><link href="http://pybonacci.github.io/2015/08/13/regresion-lineal-simple-explicada/" rel="alternate"></link><published>2015-08-13T17:38:13+00:00</published><updated>2015-08-13T17:38:13+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2015-08-13:2015/08/13/regresion-lineal-simple-explicada/</id><summary type="html">&lt;hr&gt;
&lt;div style="background-color: #ADD8E6;"&gt;
  Puedes ver este notebook en su propio formato y lo puedes descargar &lt;a href="http://nbviewer.ipython.org/github/Pybonacci/notebooks/blob/master/Regresi%C3%B3n%20Lineal.ipynb"&gt;aquí&lt;/a&gt;.
&lt;/div&gt;

&lt;hr&gt;
&lt;IFrame src="http://nbviewer.ipython.org/github/Pybonacci/notebooks/blob/master/Regresi%C3%B3n%20Lineal.ipynb" width=100% height=700px&gt;&lt;/Iframe&gt;</summary><category term="aprendizaje automático"></category><category term="correlación"></category><category term="Estadística"></category><category term="intervalos de confianza"></category><category term="machine learning"></category><category term="regresión lineal"></category><category term="statsmodels"></category><category term="test de hipótesis"></category></entry><entry><title>Trabajando con Python y R</title><link href="http://pybonacci.github.io/2015/06/18/trabajando-con-python-y-r/" rel="alternate"></link><published>2015-06-18T19:26:25+00:00</published><updated>2015-06-18T19:26:25+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2015-06-18:2015/06/18/trabajando-con-python-y-r/</id><summary type="html">&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      &lt;h1 id="Trabajando-de-forma-conjunta-con-Python-y-con-R."&gt;
        Trabajando de forma conjunta con Python y con R.&lt;a class="anchor-link" href="#Trabajando-de-forma-conjunta-con-Python-y-con-R."&gt;&amp;#182;&lt;/a&gt;
      &lt;/h1&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      Hoy vamos a ver como podemos juntar lo bueno de &lt;a href="http://cran.r-project.org/"&gt;R&lt;/a&gt;, algunas de sus librerías, con Python usando &lt;strong&gt;rpy2&lt;/strong&gt;.&lt;/p&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Pero, lo primero de todo, ¿&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://rpy.sourceforge.net/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;qué es rpy2&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;? rpy2 es una interfaz que permite que podamos comunicar información entre R y Python y que podamos acceder a funcionalidad de R desde Python. Por tanto, podemos estar usando Python para todo nuestro análisis y en el caso de que necesitemos alguna librería estadística especializada de R podremos acceder a la misma usando rpy2.
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      Para poder usar rpy2 necesitarás tener &lt;a href="http://rpy.sourceforge.net/rpy2/doc-2.5/html/overview.html#requirements"&gt;instalado tanto Python (CPython versión &amp;gt;= 2.7.x) como R (versión &amp;gt;=3)&lt;/a&gt;, además de las librerías R a las que quieras acceder. &lt;a href="http://continuum.io/conda-for-R"&gt;Conda permite realizar todo el proceso de instalación de los intérpretes de …&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;</summary><category term="cran"></category><category term="EVA"></category><category term="EVT"></category><category term="extremes"></category><category term="extremos"></category><category term="ipython"></category><category term="R"></category><category term="rpy2"></category></entry><entry><title>Introducción a Machine Learning con Python (Parte 2)</title><link href="http://pybonacci.github.io/2015/04/06/introduccion-a-machine-learning-con-python-parte-2/" rel="alternate"></link><published>2015-04-06T17:27:44+00:00</published><updated>2015-04-06T17:27:44+00:00</updated><author><name>Pablo Fernández</name></author><id>tag:pybonacci.github.io,2015-04-06:2015/04/06/introduccion-a-machine-learning-con-python-parte-2/</id><summary type="html">&lt;p&gt;En la entrada anterior, &lt;a href="http://pybonacci.org/2015/01/14/introduccion-a-machine-learning-con-python-parte-1/" title="Introducción a Machine Learning con Python (Parte 1)"&gt;Introducción a Machine Learning con Python (Parte 1)&lt;/a&gt;, di unas pequeñas pinceladas sobre lo que es el Aprendizaje Automático con algunos ejemplos prácticos. Ahora vamos a adentrarnos en materia de un modo más estructurado viendo paso a paso algunas de las técnicas que podemos emplear en Python.&lt;/p&gt;
&lt;p&gt;Podemos dividir los problemas de aprendizaje automático en dos grandes categorías (Pedregosa et al., 2011):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aprendizaje supervisado&lt;/strong&gt;, cuando el conjunto de datos viene con los atributos adicionales que queremos predecir. El problema puede clasificarse en dos categorías: &lt;ul&gt;
&lt;li&gt;Regresión: los valores de salida consisten en una o más variables continuas. Un ejemplo es la predicción del valor de una casa en función de su superficie útil, número de habitaciones, cuartos de baños, etc.&lt;/li&gt;
&lt;li&gt;Clasificación: las muestras pertenecen a dos o más clases y queremos aprender a partir de lo que …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><category term="machine learning"></category><category term="python"></category><category term="regresión lineal"></category><category term="regresión logística"></category><category term="scikit-learn"></category></entry><entry><title>SciPy Latin America 2015 en Argentina: ¡manda tu charla!</title><link href="http://pybonacci.github.io/2015/03/31/scipy-latin-america-2015-en-argentina-manda-tu-charla/" rel="alternate"></link><published>2015-03-31T10:37:15+00:00</published><updated>2015-03-31T10:37:15+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2015-03-31:2015/03/31/scipy-latin-america-2015-en-argentina-manda-tu-charla/</id><summary type="html">&lt;p&gt;Ya lo hemos comentado por Twitter algunas veces, pero para quienes aún no lo sepáis: &lt;strong&gt;del 20 al 22 de mayo se celebrará la &lt;a href="http://www.scipyla.org/conf/2015/"&gt;SciPy Latin America 2015&lt;/a&gt; en Posadas, Misiones (Argentina)&lt;/strong&gt;, y gracias a la generosa invitación de los organizadores &lt;strong&gt;tanto Kiko como el que os escribe iremos en calidad de &lt;em&gt;speakers&lt;/em&gt; invitados&lt;/strong&gt;. ¡Muchísimas gracias! 😀&lt;/p&gt;
&lt;p&gt;&lt;img src="http://pybonacci.org/images/2015/03/624x233-fondo-blanco.png" alt="SciPy Latin America 2015" width="499" height="186" class="size-full wp-image-3307" srcset="https://pybonacci.org/wp-content/uploads/2015/03/624x233-fondo-blanco.png 499w, https://pybonacci.org/wp-content/uploads/2015/03/624x233-fondo-blanco-300x111.png 300w" sizes="(max-width: 499px) 100vw, 499px" /&gt;&lt;/p&gt;
&lt;p&gt;Este evento surge después de dos años de celebrar conferencias sobre Python científico en Argentina, la primera en 2013 en Puerto Madryn, Chubut y la segunda en 2014 en Bahía Blanca, Buenos Aires. Este año los organizadores han sumado fuerzas con gente de Brasil para llevar adelante un evento mucho más ambicioso a nivel de todo Latinoamérica. Desde aquí no puedo más que quitarme el sombrero por semejante esfuerzo (que incluye personas entendiéndose en portugués y español 🙂 ) y estoy seguro de que la SciPyLA …&lt;/p&gt;</summary><category term="argentina"></category><category term="conferencias"></category><category term="python"></category><category term="scipy"></category><category term="scipyla"></category></entry><entry><title>C elemental, querido numba</title><link href="http://pybonacci.github.io/2015/03/28/c-elemental-querido-numba/" rel="alternate"></link><published>2015-03-28T22:10:45+00:00</published><updated>2015-03-28T22:10:45+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2015-03-28:2015/03/28/c-elemental-querido-numba/</id><summary type="html">&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      &lt;h2 id="Volvemos-al-torneo-del-rendimiento!!!"&gt;
        Volvemos al torneo del rendimiento!!!&lt;a class="anchor-link" href="#Volvemos-al-torneo-del-rendimiento!!!"&gt;&amp;#182;&lt;/a&gt;
      &lt;/h2&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      Recapitulando. Un artículo sobre Cython donde conseguíamos &lt;a href="http://pybonacci.org/2015/03/09/c-elemental-querido-cython/"&gt;mejoras de velocidad de código Python con numpy arrays de 40x usando Cython&lt;/a&gt; desembocó &lt;a href="http://pybonacci.org/2015/03/13/como-acelerar-tu-codigo-python-con-numba/"&gt;en mejoras de 70x usando numba&lt;/a&gt;. En esta tercera toma vamos a ver si con Cython conseguimos las velocidades de numba tomando algunas ideas de la implementación de JuanLu y definiendo una función un poco más inteligente que mi implementación con Cython (&lt;a href="http://pybonacci.org/2015/03/09/c-elemental-querido-cython/#Cythonizando,-que-es-gerundio-%28toma-9%29."&gt;busca_min_cython9&lt;/a&gt;).&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      Preparamos el &lt;em&gt;setup inicial&lt;/em&gt;.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;div&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;div class=" highlight hl-ipython3"&gt;
          &lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numba&lt;/span&gt;

&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      JuanLu hizo alguna trampa usando un numpy array en lugar de dos listas y devolviendo el resultado usando &lt;code&gt;numpy.nonzero&lt;/code&gt;. En realidad no es trampa, es pura envidia mía al ver que ha usado una forma más inteligente de conseguir lo mismo que hacía mi función original 😛&lt;br /&gt; Usando esa implementación considero que …&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;</summary><category term="blttlenec"></category><category term="cython"></category><category term="numba"></category><category term="numbagg"></category><category term="numpy"></category><category term="python"></category><category term="rendimiento"></category></entry><entry><title>tutormagic: Jupyter + pythontutor</title><link href="http://pybonacci.github.io/2015/03/23/jupytor-jupyter-pythontutor/" rel="alternate"></link><published>2015-03-23T19:40:47+00:00</published><updated>2015-03-23T19:40:47+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2015-03-23:2015/03/23/jupytor-jupyter-pythontutor/</id><summary type="html">&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      Esta será una microentrada para presentar una extensión para el notebook que estoy usando en un curso interno que estoy dando en mi empresa.&lt;br /&gt; Si a alguno más os puede valer para mostrar cosas básicas de Python (2 y 3, además de Java y Javascript) para muy principiantes me alegro.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      &lt;h1 id="Nombre-en-clave:-Jupytor"&gt;
        Nombre en clave: tutormagic&lt;a class="anchor-link" href="#Nombre-en-clave:-Jupytor"&gt;&amp;#182;&lt;/a&gt;
      &lt;/h1&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      Esta extensión lo único que hace es embeber dentro de un IFrame la página de &lt;a href="http://www.pythontutor.com"&gt;pythontutor&lt;/a&gt; usando el código que hayamos definido en una celda de código precedida de la &lt;em&gt;cell magic&lt;/em&gt; &lt;code&gt;%%tutor&lt;/code&gt;.&lt;br /&gt; Como he comentado anteriormente, se puede escribir código Python2, Python3, Java y Javascript, que son los lenguajes soportados por pythontutor.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      &lt;h1 id="Ejemplo"&gt;
        Ejemplo&lt;a class="anchor-link" href="#Ejemplo"&gt;&amp;#182;&lt;/a&gt;
      &lt;/h1&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      Primero deberemos instalar la extensión. Está disponible en pypi por lo que la podéis instalar usando &lt;code&gt;pip install tutormagic&lt;/code&gt;. Una vez instalada, dentro de un notebook de IPython la deberías cargar usando …&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;</summary><category term="enseñanza"></category><category term="ipython"></category><category term="jupyter"></category><category term="pythontutor"></category></entry><entry><title>Pandas como interfaz SQL</title><link href="http://pybonacci.github.io/2015/03/17/pandas-como-interfaz-sql/" rel="alternate"></link><published>2015-03-17T03:37:25+00:00</published><updated>2015-03-17T03:37:25+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2015-03-17:2015/03/17/pandas-como-interfaz-sql/</id><summary type="html">&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      &lt;h1 id="Mini-tutorial-de-SQL-para-cient&amp;#237;ficos"&gt;
        Mini tutorial de SQL para cient&amp;#237;ficos&lt;a class="anchor-link" href="#Mini-tutorial-de-SQL-para-cient&amp;#237;ficos"&gt;&amp;#182;&lt;/a&gt;
      &lt;/h1&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      Hoy en día no se puede seguir trabajando con ficheros de texto habiendo tantas alternativas y, sobretodo, a medida que el tamaño de la información crece y crece y se hace inmanejable tratar ficheros de varios cientos de Mb. Es por ello que hoy vamos a ver por encima cómo podemos hacer consultas, modificar y crear nueva información en una base de datos SQL.&lt;br /&gt; [Descargo de responsabilidad] Esto no pretende ser un tutorial ni algo serio y riguroso, solo un análisis superficial sobre lo que puede ofrecer el manejo de SQL para trabajar con datos y va dirigido, principalmente, a científicos (o no) que se manejan todo el día con ficheros &lt;em&gt;.dat, &lt;/em&gt;.txt o *.csv.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      &lt;h1 id="&amp;#191;Qu&amp;#233;-es-SQL?"&gt;
        &amp;#191;Qu&amp;#233; es SQL?&lt;a class="anchor-link" href="#&amp;#191;Qu&amp;#233;-es-SQL?"&gt;&amp;#182;&lt;/a&gt;
      &lt;/h1&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      SQL es un acrónimo para &lt;strong&gt;S&lt;/strong&gt;tructured &lt;strong&gt;Q&lt;/strong&gt;uery &lt;strong&gt;L&lt;/strong&gt;anguage. Es un lenguaje que nos …&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;</summary><category term="dataanalytics"></category><category term="datascience"></category><category term="pandas"></category><category term="pytables"></category><category term="sql"></category><category term="sqlite"></category></entry><entry><title>Cómo acelerar tu código Python con numba</title><link href="http://pybonacci.github.io/2015/03/13/como-acelerar-tu-codigo-python-con-numba/" rel="alternate"></link><published>2015-03-13T16:45:25+00:00</published><updated>2015-03-13T16:45:25+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2015-03-13:2015/03/13/como-acelerar-tu-codigo-python-con-numba/</id><summary type="html">&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      &lt;h2 id="Introducci&amp;#243;n"&gt;
        Introducci&amp;#243;n&lt;a class="anchor-link" href="#Introducci&amp;#243;n"&gt;&amp;#182;&lt;/a&gt;
      &lt;/h2&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    En este artículo vamos a hacer un repaso exhaustivo de &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;cómo acelerar sustancialmente tu código Python usando numba&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;. Ya hablamos sobre &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://pybonacci.org/2012/08/21/probando-numba-compilador-para-python-basado-en-llvm/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;la primera versión de numba&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; en el blog, allá por 2012, pero ha habido importantes cambios desde entonces y la herramienta ha cambiado muchísimo. Recientemente Continuum publicó numba 0.17 con una &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://numba.pydata.org/numba-doc/0.17.0/index.html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;nueva documentación&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; mucho más fácil de seguir, pero aun así no siempre queda claro cuál es el camino para hacer que funcione, como quedó patente con el &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://pybonacci.org/2015/03/09/c-elemental-querido-cython/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;artículo sobre Cython&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; de Kiko. Por ello, en este artículo voy a aclarar qué puede y qué no puede hacer numba, cómo sacarle …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><category term="conda"></category><category term="numba"></category><category term="python"></category><category term="python 3"></category><category term="rendimiento"></category></entry><entry><title>“Introducción a Python para científicos e ingenieros”, 2ª edición, ¡ya disponible!</title><link href="http://pybonacci.github.io/2015/03/09/introduccion-a-python-para-cientificos-e-ingenieros-2a-edicion-ya-disponible/" rel="alternate"></link><published>2015-03-09T20:48:01+00:00</published><updated>2015-03-09T20:48:01+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2015-03-09:2015/03/09/introduccion-a-python-para-cientificos-e-ingenieros-2a-edicion-ya-disponible/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Curso Python online y gratuito de &lt;a href="http://cacheme.org/curso-online-python-cientifico-ingenieros/"&gt;introducción al lenguaje de programación Python para científicos e ingenieros&lt;/a&gt;. Los vídeos de este curso online se dividen en dos ediciones: la primera recoge los fundamentos de Python científico y la segunda los últimos avances introducidos en el 2015 con IPython 3 (Jupyter).&lt;/p&gt;
&lt;p&gt;Ambas ediciones son impartidas por Juan Luis Cano (&lt;a href="http://pybonacci.org"&gt;http://pybonacci.org&lt;/a&gt;) y han sido posibles gracias a la financiación del Instituto Universitario de Ingeniería de Procesos Químicos y la Escuela Politécnica Superior (y su delegación de alumnos) dentro de la Universidad de Alicante. Los videotutoriales de este curso se han diseñado para que sea práctico, con ejemplos extraídos de asignaturas comunes en carreras científicas y de ingeniería.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Un año más, gracias a la impagabla colaboración de CAChemE y la Universidad de Alicante, tenemos una segunda tanda de vídeos disponibles, grabados durante …&lt;/p&gt;</summary><category term="cacheme"></category><category term="curso"></category><category term="python"></category></entry><entry><title>C elemental, querido Cython</title><link href="http://pybonacci.github.io/2015/03/09/c-elemental-querido-cython/" rel="alternate"></link><published>2015-03-09T00:47:23+00:00</published><updated>2015-03-09T00:47:23+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2015-03-09:2015/03/09/c-elemental-querido-cython/</id><summary type="html">&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      &lt;h1 id="Cython,-que-no-CPython"&gt;
        Cython, que no CPython&lt;a class="anchor-link" href="#Cython,-que-no-CPython"&gt;&amp;#182;&lt;/a&gt;
      &lt;/h1&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      No, no nos hemos equivocado en el título, hoy vamos a hablar de Cython.&lt;br /&gt; ¿Qué es Cython?&lt;br /&gt; Cython son dos cosas:&lt;/p&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      Por una parte, Cython es un lenguaje de programación (un superconjunto de Python) que une Python con el sistema de tipado estático de C y C++.
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      Por otra parte, &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;cython&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; es un compilador que traduce codigo fuente escrito en Cython en eficiente código C o C++. El código resultante se podría usar como una extensión Python o como un ejecutable.
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      ¡Guau! ¿Cómo os habéis quedado?&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      Lo que se pretende es, básicamente, aprovechar las fortalezas de Python y C, combinar una sintaxis sencilla con el poder y la velocidad.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div&gt;
      Salvando algunas &lt;a href="http://docs.cython.org/src/userguide/limitations.html#cython-limitations"&gt;excepciones&lt;/a&gt;, el código Python (tanto Python 2 como Python 3) es código Cython válido. Además, Cython …&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;</summary><category term="c"></category><category term="cython"></category><category term="numba"></category><category term="performance"></category><category term="pypy"></category><category term="rendimiento"></category></entry><entry><title>¿Realmente es feo matplotlib?</title><link href="http://pybonacci.github.io/2015/01/25/realmente-es-feo-matplotlib/" rel="alternate"></link><published>2015-01-25T20:40:27+00:00</published><updated>2015-01-25T20:40:27+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2015-01-25:2015/01/25/realmente-es-feo-matplotlib/</id><summary type="html">&lt;div class="cell border-box-sizing text_cell rendered"&gt;
  &lt;div class="inner_cell"&gt;
    &lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
      En los últimos tiempos he estado leyendo en múltiples sitios que mmatplotlib es feo, que se ve viejuno, que la librería &lt;em&gt;[ponga usted aquí la librería chachiguay que desee]&lt;/em&gt; es 'más mejor', que es una biblioteca muy pesada,..., pero nunca he leído una argumentación para refutar esas quejas.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
  &lt;div class="inner_cell"&gt;
    &lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
      Hoy me voy a centrar en la primera queja que he indicado más arriba.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
  &lt;div class="prompt input_prompt"&gt;
  &lt;/div&gt;

  &lt;div class="inner_cell"&gt;
    &lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
      &lt;h1 id="&amp;#191;Es-matplotlib-feo?"&gt;
        &amp;#191;Es matplotlib feo?&lt;a class="anchor-link" href="#&amp;#191;Es-matplotlib-feo?"&gt;&amp;#182;&lt;/a&gt;
      &lt;/h1&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
  &lt;div class="inner_cell"&gt;
    &lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
      Cuando se inició el desarrollo de matplotlib el entorno de trabajo era muy diferente al actual. Se hacían gráficas estáticas 2D para ser publicadas en revistas o en la web de hace 10 o más años (ha cambiado un poco el panorama desde entonces). Se inició para ser una alternativa libre a Matlab y es por ello que su API y apariencia es muy parecida a la que ofrece Matlab. De esta forma matplotlib hace …&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><category term="estilos"></category><category term="matplotlib.pyplot"></category><category term="styles"></category></entry><entry><title>FEniCS: Resolución de ecuaciones diferenciales en Python</title><link href="http://pybonacci.github.io/2015/01/20/fenics-resolucion-de-ecuaciones-diferenciales-en-python/" rel="alternate"></link><published>2015-01-20T22:48:28+00:00</published><updated>2015-01-20T22:48:28+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2015-01-20:2015/01/20/fenics-resolucion-de-ecuaciones-diferenciales-en-python/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este artículo os voy a presentar el &lt;strong&gt;&lt;a href="http://fenicsproject.org/"&gt;proyecto FEniCS&lt;/a&gt;&lt;/strong&gt;, una colección de &lt;em&gt;bibliotecas escritas con interfaz en Python&lt;/em&gt; para la &lt;em&gt;resolución de ecuaciones diferenciales por el &lt;a href="http://es.wikipedia.org/wiki/M%C3%A9todo_de_los_elementos_finitos"&gt;método de los elementos finitos&lt;/a&gt;&lt;/em&gt;. FEniCS proporciona un método muy inteligente para automatizar los procesos más laboriosos de la solución de este tipo de ecuaciones, de forma que podemos atacar cualquier problema que se nos ocurra. Las posibilidades son inmensas y la documentación es bastante exhaustiva, así que aquí veremos una introducción a &lt;strong&gt;cómo resolver ecuaciones en derivadas parciales con FEniCS&lt;/strong&gt;.&lt;figure id="attachment_3098" style="width: 300px" class="wp-caption aligncenter"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://pybonacci.org/images/2015/01/plate-300x237.png"&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;Sin duda alguna el mejor recurso para aprender en profundidad a manejar las diferentes bibliotecas que conforman el proyecto es &lt;a href="http://fenicsproject.org/book/"&gt;"The FEniCS book"&lt;/a&gt;, disponible gratuitamente en Internet y en papel en la web de Springer. Muchas partes de este artículo están inspiradas o directamente traducidas de él. Está siendo mi biblia …&lt;/p&gt;</summary><category term="conda"></category><category term="ecuaciones diferenciales"></category><category term="EDPs"></category><category term="fenics"></category><category term="python"></category></entry><entry><title>Introducción a Machine Learning con Python (Parte 1)</title><link href="http://pybonacci.github.io/2015/01/14/introduccion-a-machine-learning-con-python-parte-1/" rel="alternate"></link><published>2015-01-14T22:00:02+00:00</published><updated>2015-01-14T22:00:02+00:00</updated><author><name>Pablo Fernández</name></author><id>tag:pybonacci.github.io,2015-01-14:2015/01/14/introduccion-a-machine-learning-con-python-parte-1/</id><summary type="html">&lt;p&gt;Desde que escuché hablar de Kaggle por primera vez, precisamente &lt;a href="https://twitter.com/Pybonacci/status/414742882679934977" target="_blank"&gt;a través de Pybonacci&lt;/a&gt;, me entró curiosidad por eso del &lt;em&gt;data science&lt;/em&gt; y me propuse como un reto el participar en una de sus competiciones. Para aquel que no la conozca todavía, &lt;a title="Kaggle" href="http://www.kaggle.com/" target="_blank"&gt;Kaggle&lt;/a&gt; es una plataforma que aloja competiciones de análisis de datos y modelado predictivo donde compañías e investigadores aportan sus datos mientras que estadistas e ingenieros de datos de todo el mundo compiten por crear los mejores modelos de predicción o clasificación.&lt;/p&gt;
&lt;p&gt;Muchas y muy diferentes técnicas se pueden aplicar al procesado de datos para generar predicciones, estimaciones o clasificaciones. Desde técnicas de &lt;a href="http://es.wikipedia.org/wiki/Regresión_logística" target="_blank"&gt;regresión logística&lt;/a&gt; hasta &lt;a href="http://es.wikipedia.org/wiki/Red_neuronal_artificial" target="_blank"&gt;redes neuronales artificiales&lt;/a&gt; pasando por &lt;a href="http://es.wikipedia.org/wiki/Red_bayesiana" target="_blank"&gt;redes bayesianas&lt;/a&gt;, &lt;a href="http://es.wikipedia.org/wiki/Máquinas_de_vectores_de_soporte" target="_blank"&gt;máquinas de vectores de soporte&lt;/a&gt; o &lt;a href="http://es.wikipedia.org/wiki/Árbol_de_decisión" target="_blank"&gt;árboles de decisión&lt;/a&gt;, en Kaggle no descartan ningún método, e incluso se fomenta la cooperación entre personas con experiencia …&lt;/p&gt;</summary><category term="dataset"></category><category term="iris"></category><category term="kaggle"></category><category term="machine learning"></category><category term="python"></category><category term="scikit-learn"></category></entry><entry><title>Comprobando presencia de subconjuntos dentro de conjunto de forma eficiente</title><link href="http://pybonacci.github.io/2015/01/07/comprobando-presencia-de-subconjuntos-dentro-de-conjunto-de-forma-eficiente/" rel="alternate"></link><published>2015-01-07T21:39:45+00:00</published><updated>2015-01-07T21:39:45+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2015-01-07:2015/01/07/comprobando-presencia-de-subconjuntos-dentro-de-conjunto-de-forma-eficiente/</id><summary type="html">&lt;p&gt;Hoy estaba trabajando con fechas y tenía que encontrar subconjuntos de fechas que estaban presentes o no en otros conjuntos. Numpy nos ofrece varias funciones de ayuda para comprobar este tipo de cosas. Ahora mismo se me vienen a la cabeza &lt;a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.in1d.html"&gt;&lt;code&gt;numpy.in1d&lt;/code&gt;&lt;/a&gt; y &lt;a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.setdiff1d.html"&gt;&lt;code&gt;numpy.setdiff1d&lt;/code&gt;&lt;/a&gt;. El tema es que necesitaba hacer muchas operaciones de este tipo y he estado buscando la forma de poder optimizar el código un poco y resulta que, dependiendo de la operación, numpy puede resultar hasta 10 veces más lento (según mis pruebas de hoy) que usar puro CPython3. Veamos un ejemplo sencillo:&lt;/p&gt;
&lt;p&gt;1) Imaginemos que mis datos son arrays de numpy y quiero conocer los datos de un array &lt;code&gt;a&lt;/code&gt; que no están presentes en &lt;code&gt;b&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="language-python"&gt;&lt;code class="language-python"&gt;import numpy as np
a = np.arange(1000000)
b = np.arange(10, 1000010)
%timeit np.setdiff1d(a, b …&lt;/code&gt;&lt;/pre&gt;</summary><category term="conjuntos"></category><category term="diferencia"></category><category term="intersección"></category><category term="numpy"></category><category term="optimización"></category><category term="set"></category><category term="sets"></category><category term="unión"></category></entry><entry><title>Ecuaciones de Lotka-Volterra: modelo presa depredador</title><link href="http://pybonacci.github.io/2015/01/05/ecuaciones-de-lotka-volterra-modelo-presa-depredador/" rel="alternate"></link><published>2015-01-05T11:19:00+00:00</published><updated>2015-01-05T11:19:00+00:00</updated><author><name>Álex Sáez</name></author><id>tag:pybonacci.github.io,2015-01-05:2015/01/05/ecuaciones-de-lotka-volterra-modelo-presa-depredador/</id><summary type="html">&lt;style type="text/css"&gt;/*!
*
* IPython notebook
*
*/
/* CSS font colors for translated ANSI colors. */
.ansibold {
  font-weight: bold;
}
/* use dark versions for foreground, to improve visibility */
.ansiblack {
  color: black;
}
.ansired {
  color: darkred;
}
.ansigreen {
  color: darkgreen;
}
.ansiyellow {
  color: #c4a000;
}
.ansiblue {
  color: darkblue;
}
.ansipurple {
  color: darkviolet;
}
.ansicyan {
  color: steelblue;
}
.ansigray {
  color: gray;
}
/* and light for background, for the same reason */
.ansibgblack {
  background-color: black;
}
.ansibgred {
  background-color: red;
}
.ansibggreen {
  background-color: green;
}
.ansibgyellow {
  background-color: yellow;
}
.ansibgblue {
  background-color: blue;
}
.ansibgpurple {
  background-color: magenta;
}
.ansibgcyan {
  background-color: cyan;
}
.ansibggray {
  background-color: gray;
}
div.cell {
  /* Old browsers */
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-box-align: stretch;
  display: -moz-box;
  -moz-box-orient: vertical;
  -moz-box-align: stretch;
  display: box;
  box-orient: vertical;
  box-align: stretch;
  /* Modern browsers */
  display: flex;
  flex-direction: column;
  align-items: stretch;
  border-radius: 2px;
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  border-width: 1px;
  border-style: solid;
  border-color: transparent;
  width: 100%;
  padding: 5px;
  /* This acts as a spacer between cells, that is outside the border */
  margin: 0px;
  outline: none …&lt;/style&gt;</summary><category term="ecuaciones diferenciales"></category><category term="EDOs"></category><category term="matplotlib.pyplot"></category><category term="python 3"></category></entry><entry><title>¿Quieres empezar con Python?</title><link href="http://pybonacci.github.io/2014/11/11/quieres-empezar-con-python/" rel="alternate"></link><published>2014-11-11T15:01:11+00:00</published><updated>2014-11-11T15:01:11+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-11-11:2014/11/11/quieres-empezar-con-python/</id><summary type="html">&lt;p&gt;Voy a intentar hacer una  pequeña guía para iniciarse en Python que, más allá de ser una compilación de enlaces a muchos sitios, pretende ser útil dentro de la abrumadora cantidad de información disponible ahí fuera.&lt;/p&gt;
&lt;p&gt;¿No sabes lo que es un sistema de control de versiones, ni el desarrollo por pruebas, ni la programación orientada a objetos? No te preocupes ahora ni te vuelvas loco a ponerte a buscarlo por internet, muchas de las cosas y conceptos que pongo en esta mini guía se adquieren con el tiempo y la experiencia.&lt;/p&gt;
&lt;h1&gt;Paso 0. Python 2 o Python 3.&lt;/h1&gt;
&lt;p&gt;Esta es una duda importante que tienen muchos recien llegados al lenguaje. En Python existen dos versiones oficiales en mantenimiento, la versión 2 se seguirá manteniendo durante unos cuantos años y se usa bastante debido a que hay mucho código que …&lt;/p&gt;</summary><category term="cursos"></category><category term="formación"></category><category term="libros"></category><category term="principiante"></category><category term="recursos"></category><category term="tutoriales"></category></entry><entry><title>Taller: Python para ciencia e ingeniería en la PyConES 2014</title><link href="http://pybonacci.github.io/2014/11/05/taller-python-para-ciencia-e-ingenieria-en-la-pycones-2014/" rel="alternate"></link><published>2014-11-05T19:29:58+00:00</published><updated>2014-11-05T19:29:58+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-11-05:2014/11/05/taller-python-para-ciencia-e-ingenieria-en-la-pycones-2014/</id><summary type="html">&lt;p&gt;El próximo domingo 9 de noviembre introduciremos junto a &lt;a href="http://cacheme.org/"&gt;Cacheme&lt;/a&gt; el lenguaje de programación Python enfocado principalmente para científicos, ingenieros o cualquier persona interesada en análisis y visualización de datos. En este taller de introducción a Python científico, enseñaremos a utilizar las herramientas básicas que forman su ecosistema.&lt;/p&gt;
&lt;p&gt;Si ya tienes tu entrada para la &lt;a href="http://2014.es.pycon.org/"&gt;PyConES 2014&lt;/a&gt; y te gustaría asistir, completa &lt;a href="https://docs.google.com/forms/d/1UOGzTEgP_iBVHjgOBHkiLO8zrOgxEAJKz8Jy0Gz8V48/viewform"&gt;este formulario&lt;/a&gt; para que podamos prepararnos mejor.&lt;/p&gt;
&lt;h2&gt;Temario&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;01 | Introducción a Python científico: NumPy, matplotlib e IPython Notebook (30-45 min)&lt;/li&gt;
&lt;li&gt;02 | SymPy (15 min)&lt;/li&gt;
&lt;li&gt;03 | Introducción a SciPy (30 min)&lt;/li&gt;
&lt;li&gt;04 | Pandas (15 min)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En particular, nosotros nos centraremos en lo que no se centre la gente de Cacheme, es decir, numpy, IPython, matplotlib y Pandas.&lt;figure id="attachment_3590" style="width: 300px" class="wp-caption aligncenter"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class="wp-image-3590 size-medium" title="Taller: Python para ciencia e ingeniería" src="http://www.cacheme.org/wp-content/uploads/2014/11/numpy-300x211.png" alt="numpy 300x211 Taller: Python para ciencia e ingeniería" width="300" height="211" /&gt;&lt;figcaption class="wp-caption-text"&gt;&lt;a href="https://speakerdeck.com/teoliphant/europython-keynote-july-25-2014"&gt;Python in Big Data analytics: Pasado, presente y futuro&lt;/a&gt; por Travis E. Oliphant.&lt;/figcaption&gt;&lt;/figure&gt; &lt;/p&gt;
&lt;h2&gt;¿Por qué?&lt;/h2&gt;
&lt;p&gt;Durante este último año, CAChemE y Pybonacci …&lt;/p&gt;</summary><category term="cacheme"></category><category term="ciencia"></category><category term="pycones"></category><category term="taller"></category></entry><entry><title>Cursos #AeroPython: algunas conclusiones</title><link href="http://pybonacci.github.io/2014/11/04/cursos-aeropython-algunas-conclusiones/" rel="alternate"></link><published>2014-11-04T20:03:35+00:00</published><updated>2014-11-04T20:03:35+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2014-11-04:2014/11/04/cursos-aeropython-algunas-conclusiones/</id><summary type="html">&lt;p&gt;La semana pasada clausuramos nuestro &lt;a href="http://pybonacci.org/2014/10/03/curso-de-python-en-la-etsiae-2a-edicion/" title="Curso de Python en la ETSIAE: 2ª edición"&gt;segundo curso de Python para aeronáuticos&lt;/a&gt; con unas más que exitosas PyCañas (¡lamentablemente sin testimonio gráfico!) y fue incluso más emocionante que la &lt;a href="http://pybonacci.org/2014/01/23/curso-de-python-en-la-etsi-aeronautica-y-del-espacio-de-madrid/" title="Curso de Python en la ETSI Aeronáutica y del Espacio de Madrid"&gt;primera edición&lt;/a&gt;. Hemos pulido el material, hemos progresado como profesores y como programadores y nuestros alumnos han acabado muy contentos. Me gustaría compartir un par de reflexiones por vosotros.&lt;/p&gt;
&lt;p style="text-align: center"&gt;
  &lt;a href="http://new.pybonacci.org/images/2014/10/aeropython.jpg"&gt;&lt;img src="http://new.pybonacci.org/images/2014/10/aeropython-300x198.jpg" alt="AeroPython" width="300" height="198" class="aligncenter size-medium wp-image-2754" srcset="https://pybonacci.org/wp-content/uploads/2014/10/aeropython-300x198.jpg 300w, https://pybonacci.org/wp-content/uploads/2014/10/aeropython.jpg 800w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Por un lado, ciñéndonos solamente a los resultados de la encuesta de satisfacción, hemos mejorado en todos los aspectos:&lt;/p&gt;
&lt;!--more--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Más gente ha respondido la encuesta&lt;/strong&gt;. Lo conseguimos &lt;em&gt;pidiéndoles que lo hicieran antes de salir del aula&lt;/em&gt;. ¡Bien!&lt;/li&gt;
&lt;li&gt;Los alumnos &lt;strong&gt;puntuaron mejor el lenguaje Python&lt;/strong&gt; (4.60/5 frente a 4.48/5), &lt;strong&gt;todo el mundo lo recomendaría&lt;/strong&gt; (100 % frente a 96 %) y más gente lo usará a partir de ahora (¡y ya no queda nadie que prefiera MATLAB!). ¡Éxito!&lt;/li&gt;
&lt;li&gt;Hemos dedicado &lt;strong&gt;el doble …&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;</summary><category term="#aeropython"></category><category term="etsiae"></category><category term="python"></category></entry><entry><title>BryPlot y el triángulo de Sierpinski</title><link href="http://pybonacci.github.io/2014/11/03/bryplot-y-el-triangulo-de-sierpinski/" rel="alternate"></link><published>2014-11-03T18:23:56+00:00</published><updated>2014-11-03T18:23:56+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-11-03:2014/11/03/bryplot-y-el-triangulo-de-sierpinski/</id><summary type="html">&lt;p&gt;Esta vez vamos a ver como usar una pequeña librería que he creado para poder dibujar en el canvas de HTML5 usando python (vía Brython).&lt;/p&gt;
&lt;p&gt;La librería la podéis encontrar en este &lt;a href="https://bitbucket.org/kikocorreoso/brython-bryplot"&gt;repo alojado en bitbucket&lt;/a&gt;. Solo voy a usar el módulo base y para no complicar el tema lo voy a pegar como código directamente aquí y así no habrá que importarlo.&lt;/p&gt;
&lt;p&gt;Pero primero algunos apuntes:&lt;/p&gt;
&lt;h1&gt;¿Para qué otra librería para dibujar?&lt;/h1&gt;
&lt;p&gt;Por varios motivos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Porque encontré algo de tiempo.&lt;/li&gt;
&lt;li&gt;Porque me da la gana 😛&lt;/li&gt;
&lt;li&gt;Para aprender a usar canvas.&lt;/li&gt;
&lt;li&gt;Para aprender sobre el DOM, eventos,...&lt;/li&gt;
&lt;li&gt;Para aprender.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Preparativos antes de empezar.&lt;/h1&gt;
&lt;p&gt;Para poder usar este engendro dentro del notebook de IPython vamos a usar una extensión creada para ello. La extensión se llama &lt;a href="https://github.com/kikocorreoso/brythonmagic"&gt;brythonmagic&lt;/a&gt; (¡qué derroche de creatividad!) y permite usar brython internamente en el notebook de IPython …&lt;/p&gt;</summary><category term="bryplot"></category><category term="brython"></category><category term="canvas"></category><category term="html5"></category><category term="recursión"></category><category term="sierpinski"></category></entry><entry><title>Palabras usadas en Python (palabras clave y builtins)</title><link href="http://pybonacci.github.io/2014/10/15/palabras-usadas-en-python-palabras-clave-y-builtins/" rel="alternate"></link><published>2014-10-15T20:15:39+00:00</published><updated>2014-10-15T20:15:39+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-10-15:2014/10/15/palabras-usadas-en-python-palabras-clave-y-builtins/</id><summary type="html">&lt;p&gt;Hace poco estuve incluyendo autocompletado de código Python3 en un editor online (&lt;a href="http://pyschool.net/"&gt;pyschool.net&lt;/a&gt;) destinado a la educación que se está desarrollando dentro del &lt;a href="https://github.com/brython-dev/"&gt;proyecto Brython&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El editor online que se usa es &lt;a href="http://ace.c9.io/#nav=about"&gt;Ace&lt;/a&gt; (el notebook de IPython usa &lt;a href="http://codemirror.com/"&gt;codemirror&lt;/a&gt;). El modo Python de Ace incluye palabras de Python2 y Brython implementa Python3 por lo que el &lt;a href="https://github.com/ajaxorg/ace/blob/master/lib/ace/mode/python_highlight_rules.js#L42"&gt;resaltado de código y autocompletado oficial&lt;/a&gt; incluido con Ace no se ajusta a lo que se quería usar en &lt;a href="http://pyschool.net/"&gt;pyschool.net&lt;/a&gt;. Para solventar esto creé el modo Python3 que se usa en el editor online (y que &lt;a href="https://github.com/brython-dev/brython/commit/538ca811490ae6370559aaf20da45db1b357115c"&gt;próximamente también podréis ver y usar&lt;/a&gt; en el editor oficial en &lt;a href="http://brython.info/tests/editor.html"&gt;Brython.info&lt;/a&gt;). Pero había que saber qué palabras incluir en el resaltado y autocompletado de Ace (ya estoy llegando a lo que quería mostrar). Y como Python es tan increible y tiene módulos para todo …&lt;/p&gt;</summary><category term="Ace"></category><category term="autocompletado"></category><category term="brython"></category><category term="pyschool"></category><category term="python"></category><category term="resaltado de sintaxis"></category></entry><entry><title>SyntaxError: more than 255 arguments</title><link href="http://pybonacci.github.io/2014/10/12/syntaxerror-more-than-255-arguments/" rel="alternate"></link><published>2014-10-12T16:01:03+00:00</published><updated>2014-10-12T16:01:03+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-10-12:2014/10/12/syntaxerror-more-than-255-arguments/</id><summary type="html">&lt;p&gt;Para el que no lo sepa, las funciones en CPython tienen una limitación de 255 argumentos ([*] leed más abajo para más información). Mirad la siguiente pieza de código C en &lt;a href="https://hg.python.org/cpython/file/433048fd4206/Python/ast.c#l2457"&gt;ast.c&lt;/a&gt; en el repositorio oficial de CPython:&lt;/p&gt;
&lt;pre class="language-c"&gt;&lt;code class="language-c" data-language="c"&gt;    if (nargs + nkeywords + ngens &gt; 255) {
        ast_error(c, n, "more than 255 arguments");
        return NULL;
    }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y probad, por ejemplo, lo siguiente en vuestra consola/editor de Python favorito:&lt;/p&gt;
&lt;pre class="language-python"&gt;&lt;code class="language-python" data-language="python"&gt;def fn(*args):
    pass

fn(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
   21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,
   39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,
   57,58,59,60,61,62,63,64,65,66,67,68,69,70 …&lt;/code&gt;&lt;/pre&gt;</summary><category term="CPython"></category><category term="especificación de Python"></category><category term="implementación"></category></entry><entry><title>Basemap y Google Geocode para representar puntos sobre un mapa</title><link href="http://pybonacci.github.io/2014/10/07/basemap-y-google-geocode-para-representar-puntos-sobre-un-mapa/" rel="alternate"></link><published>2014-10-07T12:27:15+00:00</published><updated>2014-10-07T12:27:15+00:00</updated><author><name>Pablo Fernández</name></author><id>tag:pybonacci.github.io,2014-10-07:2014/10/07/basemap-y-google-geocode-para-representar-puntos-sobre-un-mapa/</id><summary type="html">&lt;p&gt;Como siempre, en GitHub podréis encontrar el &lt;a href="http://nbviewer.ipython.org/github/pybonacci/notebooks/blob/master/basemap/Basemap.ipynb" target="_blank"&gt;notebook&lt;/a&gt; y los &lt;a href="https://github.com/pybonacci/notebooks/tree/master/basemap" target="_blank"&gt;ficheros adicionales&lt;/a&gt; que forman parte de éste artículo.&lt;/p&gt;
&lt;p&gt;Las gráficas pueden proporcionar mucha información de un sólo vistazo, pero no siempre son el mejor método de representación. A veces es necesario dar un paso más; y ese es precisamente el caso que vamos a tratar en éste artículo.&lt;/p&gt;
&lt;p&gt;Representar valores sobre un mapa geográfico nos permite ubicar la información sobre el terreno. Lo datos a representar pueden ser desde contornos de temperatura hasta vectores de velocidad del viento pasando por la identificación de puntos geográficos. Para facilitarnos todo ese trabajo —en Python— disponemos de una serie de librerías. &lt;a href="http://www.pyngl.ucar.edu/"&gt;PyNGL&lt;/a&gt;, &lt;a href="http://www-pcmdi.llnl.gov/software/cdat/support/vcs/vcs.html"&gt;CDAT&lt;/a&gt; o &lt;a href="http://matplotlib.org/basemap/index.html"&gt;Basemap&lt;/a&gt; —del que Kiko ya ha hablado en &lt;a href="http://pybonacci.org/2012/04/14/ejemplo-de-uso-de-basemap-y-netcdf4/" title="Ejemplo de uso de Basemap y NetCDF4 | Pybonacci" target="_blank"&gt;ésta entrada&lt;/a&gt;— son librerías que nacieron para satisfacer las necesidades de ciertos colectivos de científicos, como meteorólogos u oceanógrafos.&lt;/p&gt;
&lt;p&gt;En éste …&lt;/p&gt;</summary><category term="basemap"></category><category term="circuitos"></category><category term="formula 1"></category><category term="google geocode"></category></entry><entry><title>Curso de Python en la ETSIAE: 2ª edición</title><link href="http://pybonacci.github.io/2014/10/03/curso-de-python-en-la-etsiae-2a-edicion/" rel="alternate"></link><published>2014-10-03T16:20:24+00:00</published><updated>2014-10-03T16:20:24+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2014-10-03:2014/10/03/curso-de-python-en-la-etsiae-2a-edicion/</id><summary type="html">&lt;p&gt;&lt;ins datetime="2015-10-15T10:36:08+00:00"&gt;&lt;strong&gt;Nota&lt;/strong&gt;: Esta entrada se refiere a una edición pasada del curso. Puedes leer los detalles sobre la &lt;a href="http://pybonacci.org/2015/10/15/curso-de-python-en-la-etsiae-4a-edicion/" title="Curso de Python en la ETSIAE: 4ª edición"&gt;cuarta edición del curso de Python&lt;/a&gt; en el blog.&lt;/ins&gt;&lt;/p&gt;
&lt;p&gt;¡Tenemos el placer de anunciar la &lt;strong&gt;segunda edición de nuestro curso de Python para aeronáuticos&lt;/strong&gt;! Como la primera, durará 18 horas y este es el temario:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Introducción a la sintaxis de &lt;strong&gt;Python&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Uso del Notebook de &lt;strong&gt;IPython&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Arrays de &lt;strong&gt;NumPy&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Representación gráfica con &lt;strong&gt;matplotlib&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Análisis numérico con &lt;strong&gt;SciPy&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Cálculo simbólico con &lt;strong&gt;SymPy&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;El curso se desarrollará en las aulas de informática de la ETSI Aeronáutica y del Espacio a lo largo de tres semanas, con el siguiente horario:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lunes 13 de octubre: aula B-106, 16:00-19:00&lt;/li&gt;
&lt;li&gt;Jueves 16 de octubre: aula B-204, 16:00-19:00&lt;/li&gt;
&lt;li&gt;Lunes 20 de octubre: aula B-106, 16:00-19:00&lt;/li&gt;
&lt;li&gt;Jueves 23 de octubre: &lt;del datetime="2014-10-24T09:33:37+00:00"&gt;aula B-106&lt;/del&gt;&lt;ins datetime="2014-10-24T09:33:37+00:00"&gt;aula B-204&lt;/ins&gt;, 16 …&lt;/li&gt;&lt;/ul&gt;</summary><category term="#aeropython"></category><category term="curso"></category><category term="etsia"></category><category term="etsiae"></category><category term="python"></category></entry><entry><title>Microentrada: Rendimiento de scatterplots en matplotlib</title><link href="http://pybonacci.github.io/2014/09/09/microentrada-rendimiento-de-scatterplots-en-matplotlib/" rel="alternate"></link><published>2014-09-09T18:22:39+00:00</published><updated>2014-09-09T18:22:39+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-09-09:2014/09/09/microentrada-rendimiento-de-scatterplots-en-matplotlib/</id><summary type="html">&lt;p&gt;Normalmente, si vas a dibujar pocos puntos en un scatter plot lo normal es usar &lt;code&gt;scatter&lt;/code&gt; en matplotlib. Sin embargo, si tienes que dibujar una cantidad considerable de puntos, el rendimiento puede ser un factor importante. Como alternativa se puede usar &lt;code&gt;plot&lt;/code&gt; en lugar de &lt;code&gt;scatter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo muy sencillo de esto y el rendimiento obtenido. vamos a dibujar 100.000 puntos aleatorios y ver los tiempos que obtenemos usando &lt;code&gt;scatter&lt;/code&gt; y &lt;code&gt;plot&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Primero importamos las librerías a usar:&lt;/p&gt;
&lt;pre class="language-python"&gt;&lt;code class="language-python"&gt;import numpy as np
import matplotlib.pyplot as plt
%%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creamos 100.000 puntos aleatorios:&lt;/p&gt;
&lt;pre class="language-python"&gt;&lt;code class="language-python"&gt;x = np.random.rand(100000)
y = np.random.rand(100000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Veamos lo que tarda un scatter plot&lt;/p&gt;
&lt;pre class="language-python"&gt;&lt;code class="language-python"&gt;plt.scatter(x,y)
&lt;/code&gt;&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1 loops, best of 3: 598 ms per loop
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://new.pybonacci.org/images/2014/09/wpid-Microentrada_Rendimiento_de_scatterplots_en_matplotlib1.png"&gt;&lt;/p&gt;
&lt;p&gt;Y ahora lo mismo pero con un plot normal&lt;/p&gt;
&lt;pre class="language-python"&gt;&lt;code class="language-python"&gt;plt.plot(x,y, 'bo' …&lt;/code&gt;&lt;/pre&gt;</summary><category term="matplotlib"></category><category term="MicroEntradas"></category><category term="rendimiento"></category><category term="scatter"></category><category term="scatterplots"></category></entry><entry><title>Gráficas de tiempo real con Plotly</title><link href="http://pybonacci.github.io/2014/08/30/graficas-de-tiempo-real-con-plotly/" rel="alternate"></link><published>2014-08-30T13:15:15+00:00</published><updated>2014-08-30T13:15:15+00:00</updated><author><name>Pablo Fernández</name></author><id>tag:pybonacci.github.io,2014-08-30:2014/08/30/graficas-de-tiempo-real-con-plotly/</id><summary type="html">&lt;p&gt;Y aquí llega otra nueva entrada dedicada a Plotly, ésta vez sin notebook, para hacer una aplicación de «tiempo-real» que monitorice nuestra tarjeta gráfica. Por ahora, el código, que tenéis &lt;a href="https://github.com/pfsq/gpu-monitor" title="gpu-monitor" target="_blank"&gt;disponible en GitHub&lt;/a&gt;, hace uso de los datos que proporciona la &lt;a href="https://developer.nvidia.com/nvidia-system-management-interface" title="NVIDIA System Management Interface" target="_blank"&gt;NVIDIA System Management Interface&lt;/a&gt;. Pero éste método tiene un pega, y es que el SMI está pensado para la familia de gráficas Tesla&amp;#153; y Quadro&amp;#153;, con el soporte a la gama GeForce&amp;#153; está limitado a un par de parámetros. En éste caso aprovecharemos sólo temperatura y velocidad del ventilador.&lt;/p&gt;
&lt;p&gt;Si abrimos una ventana de comandos y ejecutamos &lt;code&gt;nvidia-smi&lt;/code&gt; nos debería aparecer una tabla como ésta ---es posible que tengamos que &lt;a href="http://furniman.blogspot.com.es/2012/02/anadir-un-directorio-al-path-del.html" title="Añadir un directorio al PATH del sistema" target="_blank"&gt;añadir la ruta al ejecutable a nuestro PATH&lt;/a&gt;, en mi caso 'C:\Program Files\NVIDIA Corporation\NVSMI'.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+------------------------------------------------------+
| NVIDIA-SMI 340.62     Driver Version: 340.62         |
|-------------------------------+----------------------+----------------------+
| GPU  Name            TCC/WDDM | Bus-Id …&lt;/pre&gt;&lt;/div&gt;</summary><category term="geforce"></category><category term="gpu"></category><category term="monitor"></category><category term="nvidia"></category><category term="plotly"></category><category term="streaming api"></category></entry><entry><title>Gráficas interactivas con Plotly</title><link href="http://pybonacci.github.io/2014/08/22/graficas-interactivas-con-plotly/" rel="alternate"></link><published>2014-08-22T17:50:16+00:00</published><updated>2014-08-22T17:50:16+00:00</updated><author><name>Pablo Fernández</name></author><id>tag:pybonacci.github.io,2014-08-22:2014/08/22/graficas-interactivas-con-plotly/</id><summary type="html">&lt;p&gt;Podéis conseguir el &lt;a href="http://nbviewer.ipython.org/github/pybonacci/notebooks/blob/master/plotly/Heathrow.ipynb"&gt;notebook&lt;/a&gt; y los archivos asociados en &lt;a href="https://github.com/Pybonacci/notebooks/tree/master/plotly"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En un &lt;a href="http://pybonacci.org/2014/08/05/de-matplotlib-a-la-web-con-plotly/"&gt;artículo anterior&lt;/a&gt; ya vimos como pasar las gráficas creadas con &lt;code&gt;matplotlib&lt;/code&gt; a &lt;code&gt;plotly&lt;/code&gt; para obtener cierto nivel de interacción con los datos en la web. Ahora, lo que vamos a ver es cómo crear gráficas directamente con &lt;code&gt;plotly&lt;/code&gt;. Para ello vamos a utilizar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pandas 0.14.1&lt;/code&gt;, para trabajar con tablas de datos.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plotly 1.2.6&lt;/code&gt;, para crear las gráficas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Importamos los paquetes de la manera habitual en cada caso.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;plotly.plotly&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;plotly.graph_objs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En el caso de Plotly hemos importado además unos objetos &lt;code&gt;graph_objs&lt;/code&gt; que nos serán de ayuda a la hora de crear las gráficas. Trabajar con la API de Plotly en Python se resume en trabajar con &lt;em&gt;listas y diccionarios&lt;/em&gt; de Python. Los &lt;code&gt;graph_objs&lt;/code&gt; de …&lt;/p&gt;</summary><category term="gráficas"></category><category term="plotly"></category><category term="python"></category><category term="tutorial"></category></entry><entry><title>Liberado poliastro 0.2: Mecánica Orbital y Astrodinámica en Python</title><link href="http://pybonacci.github.io/2014/08/16/liberado-poliastro-0-2-mecanica-orbital-y-astrodinamica-en-python/" rel="alternate"></link><published>2014-08-16T18:32:13+00:00</published><updated>2014-08-16T18:32:13+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2014-08-16:2014/08/16/liberado-poliastro-0-2-mecanica-orbital-y-astrodinamica-en-python/</id><summary type="html">&lt;p&gt;Después de meses de trabajo he liberado &lt;strong&gt;poliastro 0.2.0&lt;/strong&gt;, una biblioteca Python y Fortran destinada a estudiar problemas de Mecánica Orbital y Astrodinámica en Python:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pybonacci.github.io/poliastro"&gt;https://pybonacci.github.io/poliastro&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;La versión 0.1.0 nació en 2013 mientras estudiaba &lt;em&gt;Orbital Mechanics&lt;/em&gt; en el Politecnico di Milano: tomé unas subrutinas escritas en Fortran por el profesor David A. Vallado para su libro "Fundamentals of Astrodynamics and Applications" y escribí una interfaz en Python para poder optimizar una transferencia entre la Tierra y Venus.&lt;/p&gt;
&lt;p&gt;Sin embargo la biblioteca era muy engorrosa de utilizar y tuve muchos problemas a la hora de manejar cantidades con unidades. Inspirado por el paquete abandonado Plyades, decidí refactorizar drásticamente todo el código y el resultado es poliastro 0.2.&lt;/p&gt;
&lt;p&gt;Gracias al módulo &lt;code&gt;astropy.units&lt;/code&gt; es sencillo utilizar &lt;strong&gt;cantidades con unidades&lt;/strong&gt; que se integran de …&lt;/p&gt;</summary><category term="astropy"></category><category term="poliastro"></category><category term="python"></category><category term="python 3"></category></entry><entry><title>Anunciado coLaboratory: IPython/Jupyter + Google</title><link href="http://pybonacci.github.io/2014/08/09/anunciado-colaboratory-ipythonjupyter-google/" rel="alternate"></link><published>2014-08-09T11:35:00+00:00</published><updated>2014-08-09T11:35:00+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2014-08-09:2014/08/09/anunciado-colaboratory-ipythonjupyter-google/</id><summary type="html">&lt;p&gt;Google &lt;a href="http://googleresearch.blogspot.com.es/2014/08/doing-data-science-with-colaboratory.html"&gt;anunció ayer oficialmente el proyecto coLaboratory&lt;/a&gt;, una nueva herramienta para «hacer análisis de datos» que no es ni más ni menos que &lt;strong&gt;la integración del notebook de IPython/Jupyter y los productos de Google&lt;/strong&gt;, especialmente Google Drive.&lt;/p&gt;
&lt;p&gt;El ecosistema Python científico sigue avanzando a un ritmo frenético y el proyecto IPython (&lt;a href="http://jupyter.org/"&gt;que ahora se llama Jupyter&lt;/a&gt;) va a la cabeza. Después de que Fernando Pérez anunciase en la última y épica SciPy celebrada en Austin, TX que &lt;a href="https://speakerdeck.com/fperez/project-jupyter"&gt;iban a separar la parte del notebook que no depende del lenguaje para crear el proyecto Jupyter&lt;/a&gt;, ahora se ven los frutos de las nuevas alianzas que ha creado el equipo de desarrollo y que seguramente supondrán una revolución en el corto plazo.&lt;/p&gt;
&lt;p&gt;Como explican desde Google, coLaboratory corre en Google Chrome gracias a su &lt;a href="http://www.chromium.org/nativeclient/pnacl"&gt;tecnología PNaCl&lt;/a&gt; y la aplicación para el …&lt;/p&gt;</summary><category term="ipython"></category><category term="jupyter"></category><category term="python"></category></entry><entry><title>De matplotlib a la web con plotly</title><link href="http://pybonacci.github.io/2014/08/05/de-matplotlib-a-la-web-con-plotly/" rel="alternate"></link><published>2014-08-05T09:07:03+00:00</published><updated>2014-08-05T09:07:03+00:00</updated><author><name>Pablo Fernández</name></author><id>tag:pybonacci.github.io,2014-08-05:2014/08/05/de-matplotlib-a-la-web-con-plotly/</id><summary type="html">&lt;p&gt;(También podéis seguir las explicaciones de este post con &lt;a href="http://nbviewer.ipython.org/github/Pybonacci/notebooks/blob/master/plotly/Brandshatch.ipynb" target="_blank"&gt;este Notebook&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;En esta entrada trataremos de dar a conocer &lt;code&gt;plotly&lt;/code&gt;, un servicio web gratuito para generar gráficos interactivos y que permite la creación de proyectos colaborativos.&lt;/p&gt;
&lt;p&gt;Los paquetes que vamos a emplear son,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pandas.pydata.org/" target="_blank"&gt;&lt;code&gt;pandas&lt;/code&gt;&lt;/a&gt; 0.14.0, para importar y analizar estructuras de datos en Python.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://matplotlib.org/" target="_blank"&gt;&lt;code&gt;matplotlib&lt;/code&gt;&lt;/a&gt; 1.3.1, para generar diversisos tipos de gráficos con calidad de imprenta.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plot.ly/" target="_blank"&gt;&lt;code&gt;plotly&lt;/code&gt;&lt;/a&gt; 1.1.2, para generar gráficos interactivos para la web.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Empezaremos por importar los datos con &lt;code&gt;pandas&lt;/code&gt;. Podeis encontrar una introducción a &lt;code&gt;pandas&lt;/code&gt; en &lt;a href="http://pybonacci.org/2014/05/30/pandas-i/" target="_blank"&gt;éste&lt;/a&gt; post de Pybonacci.&lt;/p&gt;
&lt;h3&gt;Datos&lt;/h3&gt;
&lt;p&gt;La estructura de datos con la que vamos a trajar es un &lt;code&gt;CSV&lt;/code&gt; con datos de telemetría correspondientes a un BMW Z4 GT3 compitiendo en el circuito &lt;a href="http://www.brandshatch.co.uk/circuit-information.aspx" target="_blank"&gt;Brands Hatch Indy&lt;/a&gt;. El paquete de datos nos lo ha proporcionado Steve Barker …&lt;/p&gt;</summary><category term="embed"></category><category term="matplotlib"></category><category term="plotly"></category></entry><entry><title>Tutorial de Highcharts usando IPython, brython y brythonmagic</title><link href="http://pybonacci.github.io/2014/07/31/tutorial-de-highcharts-usando-ipython-brython-y-brythonmagic/" rel="alternate"></link><published>2014-07-31T23:54:35+00:00</published><updated>2014-07-31T23:54:35+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-07-31:2014/07/31/tutorial-de-highcharts-usando-ipython-brython-y-brythonmagic/</id><summary type="html">&lt;p&gt;Hoy volvemos a hablar de una librería Javascript (&lt;a href="http://pybonacci.org/2014/06/11/tutorial-de-openlayers-usando-ipython-brython-y-brythonmagic/"&gt;ver tutorial de Openlayers&lt;/a&gt;) pero lo vamos a hacer desde un punto de vista un poco más pythónico (aunque por debajo no dejará de ser Javascript).&lt;/p&gt;
&lt;p&gt;En el siguiente frame tenéis un tutorial de Highcharts (librería para hacer gráficos interactivos en el navegador):&lt;/p&gt;
&lt;p&gt;Si lo queréis ver a &lt;a href="http://nbviewer.ipython.org/github/kikocorreoso/brythonmagic/blob/master/notebooks/Highcharts%20%28python%29%20tutorial.ipynb"&gt;pantalla completa podéis pulsar aquí&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si alguien tiene alguna duda que pregunte en los comentarios.&lt;/p&gt;
&lt;p&gt;Saludos a todos.&lt;/p&gt;</summary><category term="brython"></category><category term="brython brythonmagic highcharts javascript ipython IPython"></category><category term="brythonmagic"></category><category term="gráficas"></category><category term="highcharts"></category><category term="ipython"></category><category term="javascript"></category></entry><entry><title>Dibujando una rosa de frecuencias (reloaded)</title><link href="http://pybonacci.github.io/2014/07/31/dibujando-una-rosa-de-frecuencias-reloaded-3/" rel="alternate"></link><published>2014-07-31T02:28:30+00:00</published><updated>2014-07-31T02:28:30+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-07-31:2014/07/31/dibujando-una-rosa-de-frecuencias-reloaded-3/</id><summary type="html">&lt;div class="cell border-box-sizing text_cell rendered"&gt;
  &lt;div class="prompt input_prompt"&gt;
  &lt;/div&gt;

  &lt;div class="inner_cell"&gt;
    &lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
      &lt;strong&gt;Esta entrada es una actualización a la entrada &lt;a href="http://pybonacci.org/2012/03/24/dibujando-una-rosa-de-frecuencias/"&gt;Dibujando una rosa de frecuencias&lt;/a&gt; dónde se rehace el código para usar nuevas funcionalidades de matplotlib que simplifica el script.&lt;/strong&gt;&lt;br /&gt; Imaginaos que estáis de vacaciones en Agosto en la playa y la única preocupación que tenéis es observar las nubes. Como sois un poco frikis y no podéis desconectar de vuestra curiosidad científica decidís apuntar las ocurrencias de la procedencia de las nubes y al final de las vacaciones decidís representar esos datos. La forma más normal de hacerlo sería usando una rosa de frecuencias.&lt;br /&gt; Primero de todo vamos a importar los módulos que nos harán falta:
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="cell border-box-sizing code_cell rendered"&gt;
  &lt;div class="input"&gt;
    &lt;div class="prompt input_prompt"&gt;
      In&amp;nbsp;[2]:
    &lt;/div&gt;

    &lt;div class="inner_cell"&gt;
      &lt;div class="input_area"&gt;
        &lt;div class="highlight"&gt;
          &lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#039;Versión de Python usada: &amp;#039;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#039;Versión de Numpy usada: &amp;#039;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#039;Versión …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><category term="gráficos"></category><category term="math"></category><category term="matplotlib"></category><category term="numpy"></category><category term="python"></category><category term="python 3"></category></entry><entry><title>Pybonacci 2.0</title><link href="http://pybonacci.github.io/2014/07/29/pybonacci-2-0/" rel="alternate"></link><published>2014-07-29T01:18:12+00:00</published><updated>2014-07-29T01:18:12+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-07-29:2014/07/29/pybonacci-2-0/</id><summary type="html">&lt;div class="cell border-box-sizing text_cell rendered"&gt;
  &lt;div class="inner_cell"&gt;
    &lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
      &lt;p&gt;
        Hola a todos.
      &lt;/p&gt;

      &lt;p&gt;
        Hemos estado unos días trabajando en la nueva versión de Pybonacci, que llamaremos v2.0 por eso de parecer modernos. Durante unas semanas, Juanlu y un servidor hemos estado hablando sobre la importancia de determinadas cosas y fruto de esas conversaciones ha salido lo que tenéis delante. Espero que os guste.
      &lt;/p&gt;

      &lt;p&gt;
        Mi idea fundamental era poder disponer de un poco más de libertad de la que nos ofrecía la plataforma de &lt;a href="https://es.wordpress.com/"&gt;wordpress.com&lt;/a&gt; que, con el tiempo, se nos ha ido quedando un poco limitada. He de decir que tengo otros blogs en la misma plataforma y funcionan perfectamente cuando las necesidades no son muy avanzadas.
      &lt;/p&gt;

      &lt;p&gt;
        En esta versión 2.0 de Pybonacci nos hemos centrado más en el mensaje. Por ello:
      &lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;
          Queremos que los artículos sean legibles (en el escritorio, en tabletas, en móviles,...), por ello …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><category term="ipy2wp2"></category></entry><entry><title>¡Bienvenidos al nuevo Pybonacci!</title><link href="http://pybonacci.github.io/2014/07/27/bienvenidos-al-nuevo-pybonacci/" rel="alternate"></link><published>2014-07-27T20:26:40+00:00</published><updated>2014-07-27T20:26:40+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2014-07-27:2014/07/27/bienvenidos-al-nuevo-pybonacci/</id><summary type="html">&lt;p&gt;¡Hola a todos!&lt;/p&gt;
&lt;p&gt;Para los que venís desde nuestro antiguo sitio, muchísimas gracias por vuestra fidelidad 🙂&lt;/p&gt;
&lt;p&gt;Y para todos en general: &lt;strong&gt;esto es Pybonacci, vuestro blog de Python científico en español&lt;/strong&gt;, que ha encontrado una nueva casa. Nos ha costado un poco dar el salto y habríamos deseado poder usar una solución en Python, pero por diversas razones nos hemos tenido que mantener en WordPress.&lt;/p&gt;
&lt;p&gt;Hemos procurado modernizar un poco el diseño y fundamentalmente eliminar distracciones para centrarnos en el contenido. Posiblemente haya alguna cosa que se nos haya quedado descolgada, así que si veis errores en el sitio os agradeceríamos que nos los dijeseis 🙂&lt;/p&gt;
&lt;p&gt;Para los lectores, el nuevo blog va a significar que podremos incluir notebooks de IPython y visualizaciones interactivas con mayor facilidad, y que las ecuaciones matemáticas $M = E - e \sin{E}$ se mostrarán mejor. Además …&lt;/p&gt;</summary></entry><entry><title>Reseña del libro “Learning NumPy Array” de Ivan Idris</title><link href="http://pybonacci.github.io/2014/07/26/resena-del-libro-learning-numpy-array-de-ivan-idris/" rel="alternate"></link><published>2014-07-26T11:11:34+00:00</published><updated>2014-07-26T11:11:34+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2014-07-26:2014/07/26/resena-del-libro-learning-numpy-array-de-ivan-idris/</id><summary type="html">&lt;p&gt;El otro día me contactaron desde la editorial Packt Publishing y me propusieron &lt;strong&gt;hacer una reseña del libro "Learning NumPy Array", de Ivan Idris&lt;/strong&gt;, y no solo me regalaron la versión electrónica sino que encima me enviaron una copia física y &lt;strong&gt;me propusieron hacer un concurso para los lectores&lt;/strong&gt;. ¡Genial! 🙂&lt;/p&gt;
&lt;p&gt;Desde aquí agradezco su cordialidad y simpatía a la gente de Packt, y os dejo sin más dilación con la reseña del libro. Del concurso hablamos más abajo 😉&lt;/p&gt;
&lt;blockquote class="twitter-tweet" width="550"&gt;
  &lt;p&gt;
    Ya nos ha llegado el libro "Learning NumPy Array", gracias &lt;a href="https://twitter.com/PacktPub"&gt;@PacktPub&lt;/a&gt;! &lt;a href="http://t.co/CHljyGIfzS"&gt;pic.twitter.com/CHljyGIfzS&lt;/a&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &amp;mdash; Pybonacci (@Pybonacci) &lt;a href="https://twitter.com/Pybonacci/statuses/489836965358227456"&gt;July 17, 2014&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;"Learning NumPy Array" es un libro escueto que va directo al grano, utilizando las versiones más modernas de todas las bibliotecas y muy instructivo. Sin embargo, puede sorprenderte por el nivel de matemáticas requerido y porque usa una multitud de paquetes más …&lt;/p&gt;&lt;/blockquote&gt;</summary></entry><entry><title>Curso de Python en la UPM: una oportunidad para el software libre</title><link href="http://pybonacci.github.io/2014/07/14/curso-de-python-en-la-upm-una-oportunidad-para-el-software-libre/" rel="alternate"></link><published>2014-07-14T19:21:35+00:00</published><updated>2014-07-14T19:21:35+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2014-07-14:2014/07/14/curso-de-python-en-la-upm-una-oportunidad-para-el-software-libre/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Durante tres semanas del mes de marzo de 2014 dos alumnos de la ETSI Aeronáuticos nos lanzamos a impartir un &lt;strong&gt;curso de Python para alumnos de Ingeniería Aeronáutica&lt;/strong&gt; de los tres planes que aún conviven (dos en extinción y el nuevo Grado), es decir, para nuestros propios compañeros.&lt;/p&gt;
&lt;p&gt;A lo largo de las 18 horas que duró el curso nuestros alumnos no solo aprendieron la sintaxis básica del lenguaje, sino que también utilizaron varias bibliotecas ubicuas en el ámbito científico (NumPy, matplotlib, SciPy) y las aplicaron para resolver problemas típicos de la carrera: &lt;a href="http://nbviewer.ipython.org/github/AeroPython/Curso_AeroPython/blob/master/Notebooks/Clase3b_Perfil_Yukovski.ipynb"&gt;visualización del perfil de Yukovski&lt;/a&gt;, &lt;a href="http://nbviewer.ipython.org/github/AeroPython/Curso_AeroPython/blob/master/Notebooks/Clase4b_Ecuaciones-no-lineales-EDOs.ipynb"&gt;resolución de la ecuación de Kepler&lt;/a&gt;... por mencionar algunos.&lt;/p&gt;
&lt;p&gt;Como más tarde explicaremos el curso fue un éxito y los alumnos no solo terminaron muy contentos: han seguido usando el lenguaje e incluso explorando sus posibilidades en campos totalmente distintos como el …&lt;/p&gt;&lt;/blockquote&gt;</summary></entry><entry><title>MicroEntradas: scipy.constants</title><link href="http://pybonacci.github.io/2014/07/13/microentradas-scipy-constants/" rel="alternate"></link><published>2014-07-13T11:23:26+00:00</published><updated>2014-07-13T11:23:26+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-07-13:2014/07/13/microentradas-scipy-constants/</id><summary type="html">&lt;p&gt;¿No te acuerdas de la constante de gravitación universal?, ¿no sabes cuanta área es un acre?, ¿por qué me pasan esos resultados en pulgadas?, ¿a qué altura estamos volando cuando me dicen que estamos a 10.000 pies?,... &lt;a href="http://docs.scipy.org/doc/scipy/reference/constants.html"&gt;Puedes responder a todo eso usando el, creo que infrautilizado, módulo &lt;em&gt;constants&lt;/em&gt; dentro del paquete &lt;em&gt;scipy&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Primero de todo, vamos a importat el módulo en cuestión:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;constants&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;constantes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este módulo disponemos de varias constantes físicas y matemáticas de uso muy habitual en determinados campos. El número pi, la constante de gravitación universal, la constante de Plank o la masa del electrón &lt;a href="http://docs.scipy.org/doc/scipy/reference/constants.html#mathematical-constants"&gt;están en la punta de tus dedos&lt;/a&gt;.&lt;/pre&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;constantes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;constantes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gravitational_constant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;constantes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Plank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;constantes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;m_e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nos dará el siguiente resultado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mf"&gt;3.141592653589793&lt;/span&gt; &lt;span class="mf"&gt;6.67384e-11&lt;/span&gt; &lt;span class="mf"&gt;6.62606957e-34&lt;/span&gt; &lt;span class="mf"&gt;9.10938291e-31&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos acceder a otras constantes (&lt;a href="http://physics.nist.gov/cuu/pdf/RevModPhysCODATA2010.pdf"&gt;no tan …&lt;/a&gt;&lt;/p&gt;</summary><category term="constantes"></category><category term="constantes físicas"></category><category term="MicroEntradas"></category><category term="scipy"></category></entry><entry><title>Tutorial de OpenLayers usando IPython, Brython y brythonmagic</title><link href="http://pybonacci.github.io/2014/06/11/tutorial-de-openlayers-usando-ipython-brython-y-brythonmagic/" rel="alternate"></link><published>2014-06-11T17:31:34+00:00</published><updated>2014-06-11T17:31:34+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-06-11:2014/06/11/tutorial-de-openlayers-usando-ipython-brython-y-brythonmagic/</id><summary type="html">&lt;p&gt;No, no habéis leído mal, hoy vamos a hablar de OpenLayers, una librería javascript para hacer 'mapping' en el cliente (navegador).&lt;/p&gt;
&lt;p&gt;Como sabéis, hablamos principalmente de Python porque nos gusta y porque nos divierte y este tutorial de una librería javascript lo vamos a realizar usando una sintaxis pythónica y, mientras aprendemos el uso básico de OpenLayers, también veremos algo de sintaxis javascript.&lt;/p&gt;
&lt;p&gt;Para poder seguir este tutorial necesitaréis tener una versión moderna de IPython notebook instalada e instalar brythonmagic del que ya &lt;a href="http://pybonacci.org/2014/03/03/presentando-brythonmagic/"&gt;hablamos por aquí hace poco&lt;/a&gt;. El tutorial lo podéis descargar &lt;a href="http://nbviewer.ipython.org/github/kikocorreoso/brythonmagic/blob/master/notebooks/OpenLayers%20%28python%29%20tutorial.ipynb"&gt;desde aquí&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finalmente, quería agradecer a &lt;a href="https://twitter.com/rveciana"&gt;Roger Veciana&lt;/a&gt; por ofrecerse a revisar el tutorial y aportar mejoras importantes al mismo. Gracias monstruo.&lt;/p&gt;
&lt;p&gt;Saludos.&lt;/p&gt;
&lt;p&gt;P.D.: El tutorial está en inglés, si alguien no es capaz de seguirlo que avise por aquí y si el tiempo lo permite …&lt;/p&gt;</summary><category term="brython"></category><category term="brythonmagic"></category><category term="mapa"></category><category term="mapas"></category><category term="mapeo"></category><category term="mapping"></category></entry><entry><title>Pandas (VI)</title><link href="http://pybonacci.github.io/2014/06/10/pandas-vi/" rel="alternate"></link><published>2014-06-10T06:00:48+00:00</published><updated>2014-06-10T06:00:48+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-06-10:2014/06/10/pandas-vi/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Y mucho más&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Esto solo ha sido un pequeño vistazo con cosas que considero importantes 
pero que no tienen que ser las más importantes. Podéis echarle un ojo a:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sort, max, min, head, tail, unique, groupby, apply, transform, stack, unstack, mean, std, isnull, value_counts, notnull, rank, dropna, fillna, describe, cov, corr, duplicated, drop, pivot, pivot_table, drop_duplicates, quantile,...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;para seguir viendo cosas útiles.&lt;/p&gt;
&lt;p&gt;Finalmente, después de haceros sufrir con el formateo del código dentro 
del wordpress os he dejado un notebook en el &lt;a href="https://github.com/Pybonacci/notebooks/tree/master/pandas_pymad_201405"&gt;github de Pybonacci&lt;/a&gt; 
donde tenéis todo lo que hemos visto en esta &lt;a href="http://pybonacci.org/tag/tutorial-de-pandas/"&gt;serie&lt;/a&gt; 
además de un pequeño caso práctico de aplicación.&lt;/p&gt;</summary><category term="big data"></category><category term="bigdata"></category><category term="datos"></category><category term="excel"></category><category term="hdf5"></category><category term="pandas"></category><category term="python 3"></category><category term="sql"></category><category term="Tutorial de pandas"></category></entry><entry><title>Pandas (V)</title><link href="http://pybonacci.github.io/2014/06/08/pandas-v/" rel="alternate"></link><published>2014-06-08T06:00:39+00:00</published><updated>2014-06-08T06:00:39+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-06-08:2014/06/08/pandas-v/</id><summary type="html">&lt;p&gt;Antes de nada, el contexto, para esta serie de entradas se va a usar lo 
siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Apr&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Pandas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="mf"&gt;0.13&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Numpy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Matplotlib&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mf"&gt;1.3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y sin más preámbulos seguimos con esta quinta parte de 
&lt;a href="http://pybonacci.org/tag/tutorial-de-pandas/"&gt;la serie&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unir (merge/join)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pandas dispone de la función &lt;code&gt;merge&lt;/code&gt; 
(&lt;a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.tools.merge.merge.html#pandas.tools.merge.merge"&gt;documentación oficial&lt;/a&gt;) 
que permite 'unir' datos al estilo de como se hace con bases de datos 
relacionales (usando SQL). También se puede acceder al método &lt;code&gt;merge&lt;/code&gt; 
disponible en las instancias a un Dataframe.&lt;/p&gt;
&lt;p&gt;Por su parte, &lt;code&gt;join&lt;/code&gt; es un método disponible en un DataFrame y sirve 
para hacer uniones de índices sobre índices o de índices sobre columnas. 
Las uniones que hace &lt;code&gt;join&lt;/code&gt; las hace sobre los índices …&lt;/p&gt;</summary><category term="big data"></category><category term="bigdata"></category><category term="datos"></category><category term="excel"></category><category term="hdf5"></category><category term="pandas"></category><category term="python 3"></category><category term="sql"></category><category term="Tutorial de pandas"></category></entry><entry><title>Pandas (IV)</title><link href="http://pybonacci.github.io/2014/06/06/pandas-iv/" rel="alternate"></link><published>2014-06-06T06:00:33+00:00</published><updated>2014-06-06T06:00:33+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-06-06:2014/06/06/pandas-iv/</id><summary type="html">&lt;p&gt;Antes de nada, el contexto, para esta serie de entradas se va a usar lo siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Apr&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Pandas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="mf"&gt;0.13&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Numpy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Matplotlib&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mf"&gt;1.3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y sin más preámbulos seguimos con esta cuarta parte de 
&lt;a href="http://pybonacci.org/tag/tutorial-de-pandas/"&gt;la serie&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Concatenando datos&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Para concatenar ficheros se usa la función &lt;code&gt;pd.concat&lt;/code&gt; 
(&lt;a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.tools.merge.concat.html#pandas.tools.merge.concat"&gt;documentación oficial&lt;/a&gt;]. 
Un ejemplo rápido sería el siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;datos1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;datos2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;piezas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;datos1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datos2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;datos_concatenados_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;piezas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;datos1n {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datos1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;datos2n {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datos2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;datos_concatenadosn {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datos_concatenados_a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cuyo resultado sería:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;datos1&lt;/span&gt;
          &lt;span class="mi"&gt;0&lt;/span&gt;         &lt;span class="mi"&gt;1&lt;/span&gt;         &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.691985&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.181241&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.714437&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mf"&gt;0.955094&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.238498&lt;/span&gt;  &lt;span class="mf"&gt;1.137918&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><category term="big data"></category><category term="bigdata"></category><category term="datos"></category><category term="excel"></category><category term="hdf5"></category><category term="pandas"></category><category term="python 3"></category><category term="sql"></category><category term="Tutorial de pandas"></category></entry><entry><title>Pandas (III)</title><link href="http://pybonacci.github.io/2014/06/04/pandas-iii/" rel="alternate"></link><published>2014-06-04T06:00:49+00:00</published><updated>2014-06-04T06:00:49+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-06-04:2014/06/04/pandas-iii/</id><summary type="html">&lt;p&gt;Antes de nada, el contexto, para esta serie de entradas se va a usar lo siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Apr&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Pandas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="mf"&gt;0.13&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Numpy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Matplotlib&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mf"&gt;1.3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y sin más preámbulos seguimos con esta tercera parte de 
&lt;a href="http://pybonacci.org/tag/tutorial-de-pandas/"&gt;la serie&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Trabajando con datos, indexación, selección,...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;¿Cómo podemos seleccionar, añadir, eliminar, mover,..., columnas, filas,...?&lt;/p&gt;
&lt;p&gt;Para seleccionar una columna solo hemos de usar el nombre de la columna 
y pasarlo como si fuera un diccionario (o un atributo).&lt;/p&gt;
&lt;p&gt;Para añadir una columna simplemente hemos de usar un nombre de columna 
no existente y pasarle los valores para esa columna.&lt;/p&gt;
&lt;p&gt;Para eliminar una columna podemos usar &lt;code&gt;del&lt;/code&gt; o el método &lt;code&gt;pop&lt;/code&gt; del 
DataFrame.&lt;/p&gt;
&lt;p&gt;Para mover una columna podemos usar una …&lt;/p&gt;</summary><category term="big data"></category><category term="bigdata"></category><category term="datos"></category><category term="excel"></category><category term="hdf5"></category><category term="pandas"></category><category term="python 3"></category><category term="sql"></category><category term="Tutorial de pandas"></category></entry><entry><title>Pandas (II)</title><link href="http://pybonacci.github.io/2014/06/02/pandas-ii-2/" rel="alternate"></link><published>2014-06-02T06:00:05+00:00</published><updated>2014-06-02T06:00:05+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-06-02:2014/06/02/pandas-ii-2/</id><summary type="html">&lt;p&gt;Antes de nada, el contexto, para esta serie de entradas se va a usar lo siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Apr&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Pandas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="mf"&gt;0.13&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Numpy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Matplotlib&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mf"&gt;1.3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y sin más preámbulos seguimos con esta segunda parte de 
&lt;a href="http://pybonacci.org/tag/tutorial-de-pandas/"&gt;la serie&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Leyendo y escribiendo datos (IO)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Una de las cosas que más me gusta de Pandas es la potencia que aporta a 
lo hora de leer y/o escribir ficheros de datos. Pandas es capaz de leer 
datos de ficheros csv, excel, HDF5, sql, json, html,...&lt;/p&gt;
&lt;p&gt;Si trabajáis con datos de terceros, que pueden provenir de muy diversas 
fuentes, una de las partes más tediosas del trabajo será tener los 
datos listos para empezar a trabajar. Limpiar huecos …&lt;/p&gt;</summary><category term="big data"></category><category term="bigdata"></category><category term="datos"></category><category term="excel"></category><category term="hdf5"></category><category term="pandas"></category><category term="python 3"></category><category term="sql"></category><category term="Tutorial de pandas"></category></entry><entry><title>Pandas (I)</title><link href="http://pybonacci.github.io/2014/05/30/pandas-i/" rel="alternate"></link><published>2014-05-30T18:41:35+00:00</published><updated>2014-05-30T18:41:35+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-05-30:2014/05/30/pandas-i/</id><summary type="html">&lt;p&gt;Antes de nada, el contexto, para esta serie de entradas se va a usar lo siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Apr&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Pandas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="mf"&gt;0.13&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Numpy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Versión&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Matplotlib&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mf"&gt;1.3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y sin más preámbulos...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;¿Qué es Pandas?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pandas es una librería que proporciona estructuras de datos flexibles y 
permite trabajar con la información de forma eficiente (gran parte de 
Pandas está implementado usando C/Cython para obtener un buen rendimiento).&lt;/p&gt;
&lt;p&gt;Funciona muy bien cuando nos toca trabajar con:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Datos heterogéneos que pueden distribuirse de forma tabular.&lt;/li&gt;
&lt;li&gt;Series temporales&lt;/li&gt;
&lt;li&gt;Matrices&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La página oficial se encuentra en el siguiente &lt;a href="http://pandas.pydata.org"&gt;enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Estructuras de datos&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pandas ofrece varias estructuras de datos que nos resultarán de mucha 
utilidad y que vamos a ir viendo …&lt;/p&gt;</summary><category term="big data"></category><category term="bigdata"></category><category term="datos"></category><category term="excel"></category><category term="hdf5"></category><category term="pandas"></category><category term="python 3"></category><category term="sql"></category><category term="Tutorial de pandas"></category></entry><entry><title>¡Disponible Curso de Introducción a Python para científicos e ingenieros!</title><link href="http://pybonacci.github.io/2014/03/18/disponible-curso-de-introduccion-a-python-para-cientificos-e-ingenieros/" rel="alternate"></link><published>2014-03-18T16:00:09+00:00</published><updated>2014-03-18T16:00:09+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2014-03-18:2014/03/18/disponible-curso-de-introduccion-a-python-para-cientificos-e-ingenieros/</id><summary type="html">&lt;p&gt;¡Ya está disponible &lt;strong&gt;en vídeo&lt;/strong&gt; el &lt;strong&gt;Curso de Introducción a Python para científicos e ingenieros&lt;/strong&gt; que grabé en la Escuela Politécnica Superior de Alicante!&lt;/p&gt;
&lt;p&gt;Los videotutoriales de este curso se han diseñado para que sea práctico, con ejemplos extraídos de asignaturas comunes en carreras científicas y de ingeniería.&lt;/p&gt;
&lt;p&gt;Tienes la información completa sobre el &lt;strong&gt;curso de Python científico&lt;/strong&gt; en la web de CAChemE http://cacheme.org/curso-online-python-cientifico-ingenieros/ (enlace corto http://bit.ly/curso-python).&lt;/p&gt;
&lt;p&gt;Desde aquí muchísimas gracias tanto a la Universidad como a ellos por haber hecho posible que exista por fin un curso de estas características en español. No podemos hacer nada con las limitaciones del profesor pero aun así esperamos que lo disfrutéis 🙂&lt;/p&gt;
&lt;p&gt;Además de tener todos los vídeos en YouTube, tienes los notebooks y todo el material del curso en nuestro GitHub y los vídeos en iTunes …&lt;/p&gt;</summary></entry><entry><title>Haz una librería de la que me pueda fiar… o no la hagas</title><link href="http://pybonacci.github.io/2014/03/18/haz-una-libreria-de-la-que-me-pueda-fiar-o-no-la-hagas/" rel="alternate"></link><published>2014-03-18T09:14:47+00:00</published><updated>2014-03-18T09:14:47+00:00</updated><author><name>javierjus</name></author><id>tag:pybonacci.github.io,2014-03-18:2014/03/18/haz-una-libreria-de-la-que-me-pueda-fiar-o-no-la-hagas/</id><summary type="html">&lt;p&gt;Cuando creas código, debes poder confiar en algunas cosas, como el sistema operativo o el intérprete de Python. Si no, sería casi imposible encontrar un error. Por suerte casi todo lo que usamos es lo suficientemente maduro para tener la certeza de que si algo no funciona la causa está en nuestro código.&lt;/p&gt;
&lt;p&gt;¿Qué pasa con las librerías de terceros? También tenemos que confiar en ellas y para ello hay que comprobar los parámetros de entrada. Esta entrada te propone que hagamos juntos una reflexión sobre este tema.&lt;/p&gt;
&lt;h2&gt;Verificando parámetros&lt;/h2&gt;
&lt;p&gt;Una librería es un fragmento de código muy delicado. No está pensada para ser utilizada por un usuario final a través de una interfaz que limite y controle lo que el usuario pueda hacer. Una librería está pensada para ser parte de otro código y para permitir que sean programadores …&lt;/p&gt;</summary><category term="librería"></category><category term="python"></category></entry><entry><title>Presentando brythonmagic</title><link href="http://pybonacci.github.io/2014/03/03/presentando-brythonmagic/" rel="alternate"></link><published>2014-03-03T06:00:50+00:00</published><updated>2014-03-03T06:00:50+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-03-03:2014/03/03/presentando-brythonmagic/</id><summary type="html">&lt;p&gt;En esta entrada os voy a enseñar una extensión que he creado que 
funciona sobre el IPython notebook, es decir, está pensada para 
funcionar en un navegador. Si no sabéis muy bien que son las 
'cell magics' (no sé muy bien como traducir esto, podría ser algo así 
como magia que aplica sobre celdas) le podéis echar un ojo a 
&lt;a href="http://pybonacci.org/2014/01/24/157-cosas-de-ipython-que-no-sabias-y-nunca-preguntaste-i/"&gt;esta entrada&lt;/a&gt; 
donde ya creamos alguna función mágica ('line magics') de ayuda. De 
todas formas, entre mis planes está el hacer una parte de la serie 
'157 cosas de IPython...' que hable sobre las 'cell magics'. No han 
salido nuevos capítulos ya que estoy viendo como evoluciona IPython 
2.0.0 y adaptar las entradas a la nueva versión de IPython para que no 
se queden desfasadas ya de salida...&lt;/p&gt;
&lt;p&gt;Bueno, a lo que vamos,... ¿Qué es eso de &lt;code&gt;brythonmagic …&lt;/code&gt;&lt;/p&gt;</summary><category term="brython"></category><category term="cliente"></category><category term="d3"></category><category term="frontend"></category><category term="ipython"></category><category term="javascript"></category><category term="openlayers"></category></entry><entry><title>¿Cómo separar parte real e imaginaria en SymPy?</title><link href="http://pybonacci.github.io/2014/02/04/como-separar-parte-real-e-imaginaria-en-sympy/" rel="alternate"></link><published>2014-02-04T10:26:29+00:00</published><updated>2014-02-04T10:26:29+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2014-02-04:2014/02/04/como-separar-parte-real-e-imaginaria-en-sympy/</id><summary type="html">&lt;p&gt;Andaba yo preguntándome esta mañana, a falta (¡sorprendentemente!) de dudas de los lectores:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Si tengo un &lt;strong&gt;número complejo en SymPy&lt;/strong&gt;, ¿cómo puedo separar la parte real y la parte imaginaria? Y ya puestos, ¿puedo separar también el módulo y el argumento?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Si utilizamos el tipo &lt;code&gt;complex&lt;/code&gt; de Python el resultado es correcto pero puede no ser demasiado vistoso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;isympy&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.10344827586206896&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;0.24137931034482757j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Queremos usar las capacidades simbólicas de SymPy. En SymPy, &lt;a href="https://github.com/sympy/sympy/wiki/Tutorial"&gt;como se indica en el tutorial&lt;/a&gt;, los complejos se declaran de esta manera:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
 &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;ⅈ&lt;/span&gt;
&lt;span class="err"&gt;───────&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;⋅ⅈ&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya tenemos un objeto de SymPy con toda su potencia (que además se imprime bonito). Para extraer la parte real e imaginaria podemos usar las funciones &lt;a href="http://docs.sympy.org/latest/modules/functions/elementary.html#re"&gt;&lt;code&gt;re&lt;/code&gt;&lt;/a&gt; e &lt;a href="http://docs.sympy.org/latest/modules/functions/elementary.html#im"&gt;&lt;code&gt;im&lt;/code&gt;&lt;/a&gt; o el …&lt;/p&gt;</summary><category term="números complejos"></category><category term="python"></category><category term="sympy"></category></entry><entry><title>MicroEntradas: numpy.vectorize</title><link href="http://pybonacci.github.io/2014/01/31/microentradas-numpy-vectorize/" rel="alternate"></link><published>2014-01-31T06:30:47+00:00</published><updated>2014-01-31T06:30:47+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-01-31:2014/01/31/microentradas-numpy-vectorize/</id><summary type="html">&lt;p&gt;Hoy vamos a ver &lt;a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.vectorize.html"&gt;&lt;code&gt;numpy.vectorize&lt;/code&gt;&lt;/a&gt; 
que, como la documentación oficial indica, sirve para 'vectorizar' 
funciones que solo aceptan escalares como entrada. La entrada que 
podemos meter es una lista de objetos o un 'numpyarray' y nos devolverá 
como resultado un 'numpyarray'.&lt;/p&gt;
&lt;p&gt;No os engañéis, normalmente, cuando hablamos de vectorizar pensamos en 
varios órdenes de magnitud de mejora en el rendimiento pero eso no es 
lo que hace esta función :-). Podéis pensar en esta función como algo 
parecido a usar &lt;a href="http://docs.python.org/3.3/library/functions.html#map"&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Por ejemplo, la función &lt;a href="http://docs.python.org/3.3/library/functions.html#abs"&gt;&lt;code&gt;abs&lt;/code&gt;&lt;/a&gt; 
solo acepta un entero o un &lt;em&gt;float&lt;/em&gt;. Por ejemplo, lo siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nos devolvería el valor &lt;code&gt;3&lt;/code&gt;. Hasta ahí bien. Pero si queremos hacer lo siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nos devolverá un &lt;code&gt;TypeError: bad operand type for abs(): 'list'.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Podríamos usar &lt;code&gt;map&lt;/code&gt; para ello pero no obtendríamos un 'numpyarray' como 
salida …&lt;/p&gt;</summary><category term="MicroEntradas"></category><category term="np.vectorize"></category><category term="numpy"></category><category term="numpy.vectorize"></category><category term="vectorización"></category></entry><entry><title>157 cosas de IPython que no sabías y nunca preguntaste (II)</title><link href="http://pybonacci.github.io/2014/01/29/157-cosas-de-ipython-que-no-sabias-y-nunca-preguntaste-ii/" rel="alternate"></link><published>2014-01-29T06:30:53+00:00</published><updated>2014-01-29T06:30:53+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-01-29:2014/01/29/157-cosas-de-ipython-que-no-sabias-y-nunca-preguntaste-ii/</id><summary type="html">&lt;p&gt;En la &lt;a href="http://pybonacci.org/2014/01/24/157-cosas-de-ipython-que-no-sabias-y-nunca-preguntaste-i/"&gt;primera entrega&lt;/a&gt; vimos como usar la ayuda de IPython y como personalizar nuestras propias funciones mágicas de ayuda.&lt;/p&gt;
&lt;p&gt;En esta segunda entrega vamos a hablar del uso de la historia dentro de IPython.&lt;/p&gt;
&lt;p&gt;[Inciso: Os recomiendo que veáis lo que viene a continuación en el &lt;a href="https://github.com/Pybonacci/notebooks"&gt;notebook&lt;/a&gt; o en 
&lt;a href="http://nbviewer.ipython.org/"&gt;nbviewer&lt;/a&gt;.]&lt;/p&gt;
&lt;p&gt;IPython guarda la historia de los comandos que se usan en cada línea/celda 
de cada sesión bajo un determinado perfil. Esta información se guarda en 
una base de datos sqlite. Por defecto, se guardan el inicio y fin de 
sesión, los comandos usados en cada sesión y algunos metadatos más. 
IPython también se puede configurar para que almacene los outputs.&lt;/p&gt;
&lt;h1&gt;Historia&lt;/h1&gt;
&lt;p&gt;La base de datos con la historia se guarda en la carpeta que obtenéis haciendo lo siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locate_profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/kiko/.config …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><category term="ipynb"></category><category term="ipython"></category><category term="notebook"></category></entry><entry><title>157 cosas de IPython que no sabías y nunca preguntaste (I)</title><link href="http://pybonacci.github.io/2014/01/24/157-cosas-de-ipython-que-no-sabias-y-nunca-preguntaste-i/" rel="alternate"></link><published>2014-01-24T06:30:55+00:00</published><updated>2014-01-24T06:30:55+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2014-01-24:2014/01/24/157-cosas-de-ipython-que-no-sabias-y-nunca-preguntaste-i/</id><summary type="html">&lt;p&gt;Voy a inaugurar una nueva serie de entradas dedicadas a IPython hablando 
de cosas que no son tan evidentes o que la gente no suele usar pero que 
están ahí y son tremendamente útiles una vez que las conoces y las 
incluyes en tu flujo de trabajo.&lt;/p&gt;
&lt;p&gt;Inicialmente se iba a llamar &lt;em&gt;'305928 cosas sobre IPython que no sabías 
(o sí) y que nunca tuviste tiempo de preguntar o de leer en la 
documentación o de leer en el código o nunca te hicieron falta o te 
estabas tomando unas cañas o estabas haciendo otras cosas más seductoras 
e inconfesables o {0}'&lt;/em&gt; pero me pareció un título un poco largo. 
Finalmente, lo he reducido a 157 y pico, más o menos, para vuestra salud 
mental y la mia. El nombre está inspirado de forma muy libre en el 
nombre de …&lt;/p&gt;</summary><category term="ipynb"></category><category term="ipython"></category><category term="notebook"></category></entry><entry><title>Curso de Python en la ETSI Aeronáutica y del Espacio de Madrid</title><link href="http://pybonacci.github.io/2014/01/23/curso-de-python-en-la-etsi-aeronautica-y-del-espacio-de-madrid/" rel="alternate"></link><published>2014-01-23T18:24:24+00:00</published><updated>2014-01-23T18:24:24+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2014-01-23:2014/01/23/curso-de-python-en-la-etsi-aeronautica-y-del-espacio-de-madrid/</id><summary type="html">&lt;p&gt;&lt;ins datetime="2014-10-03T14:28:17+00:00"&gt;&lt;strong&gt;Nota&lt;/strong&gt;: Esta entrada se refiere a una edición pasada del curso. Puedes leer los detalles sobre la &lt;a href="http://pybonacci.org/2014/10/03/curso-de-python-en-la-etsiae-2a-edicion/" title="Curso de Python en la ETSIAE: 2ª edición"&gt;segunda edición del curso de Python&lt;/a&gt; en el blog.&lt;/ins&gt;&lt;/p&gt;
&lt;p&gt;Ya tenemos lista la información sobre el &lt;strong&gt;curso de Python&lt;/strong&gt; que celebraremos para los &lt;strong&gt;estudiantes de Ingeniería Aeronáutica&lt;/strong&gt; de la Universidad Politécnica de Madrid. Durará &lt;strong&gt;18 horas&lt;/strong&gt;, &lt;ins datetime="2014-01-27T21:57:15+00:00"&gt;será gratuito&lt;/ins&gt; y el temario será:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Introducción a la sintaxis de &lt;strong&gt;Python&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Uso del Notebook de &lt;strong&gt;IPython&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Arrays de &lt;strong&gt;NumPy&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Representación gráfica con &lt;strong&gt;matplotlib&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Análisis numérico con &lt;strong&gt;SciPy&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Cálculo simbólico con &lt;strong&gt;SymPy&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Depuración con &lt;strong&gt;pdb&lt;/strong&gt;, testing y buenas prácticas&lt;/li&gt;
&lt;/ol&gt;
&lt;p style="font-size:1.5em;font-weight:bold"&gt;
  Día 2: jueves 6 de marzo, 16:30, aula B107
&lt;/p&gt;

&lt;p&gt;Los materiales del curso se pueden encontrar en &lt;a href="https://github.com/AeroPython/Curso_AeroPython"&gt;https://github.com/AeroPython/Curso_AeroPython&lt;/a&gt; (o &lt;a href="http://bit.ly/notebooksaeropython"&gt;http://bit.ly/notebooksaeropython&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Lo impartiremos Juan Luis Cano (@Pybonacci) y mi compañero Álex Sáez (@Alex__S12). Estará pensado para que sea un curso eminentemente …&lt;/p&gt;</summary><category term="#aeropython"></category><category term="curso"></category><category term="etsia"></category><category term="etsiae"></category><category term="python"></category></entry><entry><title>¿Cómo trabajar con arrays de binarios en Python?</title><link href="http://pybonacci.github.io/2014/01/21/como-trabajar-con-arrays-de-binarios-en-python/" rel="alternate"></link><published>2014-01-21T19:00:31+00:00</published><updated>2014-01-21T19:00:31+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2014-01-21:2014/01/21/como-trabajar-con-arrays-de-binarios-en-python/</id><summary type="html">&lt;p&gt;Esta semana vamos con una pregunta de Gonzalo, que nos dice por email:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Saludos. Últimamente he estado trabajado en python y me gusta mucho. En estos momentos estoy haciendo un algoritmo genético con codificación en numeros binarios utilizando bitset de C++. ¿Tendran información acerca de como trabajar con cadenas de binarios en python? Gracias y Felicidades por el blog.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He investigado un poco &lt;a href="http://www.cplusplus.com/reference/bitset/bitset/"&gt;acerca de bitset en la referencia de C++&lt;/a&gt;, y leo que se trata básicamente de un &lt;strong&gt;array de valores booleanos&lt;/strong&gt;, optimizados para su almacenamiento en memoria.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;Esto es exactamente lo que puedes conseguir con los arrays de NumPy: son contenedores de datos homogéneos, que se almacenan eficientemente en memoria e implementados en C para que su manejo sea mucho más rápido. En nuestro blog tienes muchos artículos sobre NumPy, como por ejemplo este tutorial sobre los distintos …&lt;/p&gt;</summary><category term="arrays"></category><category term="bitset"></category><category term="numpy"></category><category term="python"></category></entry><entry><title>Leer datos de Arduino desde Python</title><link href="http://pybonacci.github.io/2014/01/19/leer-datos-de-arduino-desde-python/" rel="alternate"></link><published>2014-01-19T21:50:05+00:00</published><updated>2014-01-19T21:50:05+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2014-01-19:2014/01/19/leer-datos-de-arduino-desde-python/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este artículo vamos a ver &lt;strong&gt;cómo leer datos procedentes de una plataforma Arduino con Python.&lt;/strong&gt; Para quienes no lo conozcáis, &lt;a href="http://www.arduino.cc/"&gt;Arduino&lt;/a&gt; es una plataforma de &lt;em&gt;hardware libre&lt;/em&gt; concebida para crear prototipos de manera rápida y fácil usando componentes electrónicos. Gracias a Arduino vamos a alejarnos un poco de lo que solemos ver en este blog, que es solo software, y vamos a poder interactuar con el mundo real de una manera más directa.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://pybonacci.org/images/2014/01/arduino_uno_-_r3.jpg" alt="Arduino Uno" width="560" height="400" class="aligncenter size-full wp-image-2165" srcset="https://pybonacci.org/wp-content/uploads/2014/01/arduino_uno_-_r3.jpg 560w, https://pybonacci.org/wp-content/uploads/2014/01/arduino_uno_-_r3-300x214.jpg 300w" sizes="(max-width: 560px) 100vw, 560px" /&gt;&lt;/p&gt;
&lt;p&gt;Este artículo nace gracias a mi reciente incorporación a &lt;a href="http://aerobot.org.es/"&gt;Aerobot&lt;/a&gt;, el club de robótica de mi escuela, donde iré explorando las posibilidades de Arduino y Python 🙂&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;En esta entrada se han usado python 3.3.3, numpy 1.8.0, pyserial 2.7 y matplotlib 1.3.1.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Prefacio: ¿cómo funciona?&lt;/h3&gt;
&lt;p&gt;En este artículo no vamos a ver en detalle qué es Arduino o el …&lt;/p&gt;</summary><category term="arduino"></category><category term="datos"></category><category term="numpy"></category><category term="python"></category></entry><entry><title>¿Cómo borrar por encima de una línea en matplotlib?</title><link href="http://pybonacci.github.io/2014/01/14/como-borrar-por-encima-de-una-linea-en-matplotlib/" rel="alternate"></link><published>2014-01-14T13:18:01+00:00</published><updated>2014-01-14T13:18:01+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2014-01-14:2014/01/14/como-borrar-por-encima-de-una-linea-en-matplotlib/</id><summary type="html">&lt;p&gt;Inauguramos sección nueva en el 2014 con &lt;strong&gt;las preguntas que nos llegan de nuestros lectores&lt;/strong&gt; por las redes sociales o el correo electrónico 🙂 Nos llegan unas cuantas, ¡así que tenemos material para al menos una pregunta semanal! Estas serán entradas breves que publicaremos cada martes y que tratarán de responder vuestras dudas sin rodeos. ¡Si queréis mandar las vuestras no dudéis en &lt;a href="http://pybonacci.org/contacto/" title="Contacto"&gt;contactar con nosotros&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Empezamos con Alberto, que me comenta:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;¿Cómo puedo «borrar» lo que tengo por encima de una línea en matplotlib? He intentado con &lt;code&gt;fill_between&lt;/code&gt; entre la línea de estabilidad funcional (línea roja) pero solo rellena con color, no sobreescribe que es lo que pretendo. ¿Se te ocurre alguna forma?&lt;/p&gt;
&lt;p&gt;&lt;p style="text-align:center;"&gt;
  &lt;img class="aligncenter  wp-image-2107" alt="Mapa compresor - Primera versión" src="http://new.pybonacci.org/images/2014/01/compmap_nozorder.png" width="420" height="316" srcset="https://pybonacci.org/wp-content/uploads/2014/01/compmap_nozorder.png 812w, https://pybonacci.org/wp-content/uploads/2014/01/compmap_nozorder-300x226.png 300w" sizes="(max-width: 420px) 100vw, 420px" /&gt;
&lt;/p&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alberto está escribiendo un programa para dibujar &lt;a href="http://en.wikipedia.org/wiki/Compressor_map"&gt;mapas de actuaciones de turbomáquinas&lt;/a&gt; en Python, similares a los que producen programas privativos como GSP (&lt;a href="http://www.gspteam.com/GSPsupport/OnlineHelp/index.html?compressor_map.htm"&gt;ejemplos&lt;/a&gt;) o GasTurb (&lt;a href="http://www.gasturb.de/check-the-map.html"&gt;ejemplos …&lt;/a&gt;&lt;/p&gt;</summary><category term="clip"></category><category term="matplotlib"></category><category term="python"></category></entry><entry><title>Meme Python de Año Nuevo 2014</title><link href="http://pybonacci.github.io/2014/01/04/meme-python-de-ano-nuevo-2014/" rel="alternate"></link><published>2014-01-04T11:55:01+00:00</published><updated>2014-01-04T11:55:01+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2014-01-04:2014/01/04/meme-python-de-ano-nuevo-2014/</id><summary type="html">&lt;p&gt;¡Feliz año a todo el mundo! Hoy queremos celebrar que ha empezado el 2014 ¡&lt;strong&gt;con nuestro artículo número 100&lt;/strong&gt;! 😀 Para ello y como es costumbre desde el año pasado vamos con el Meme Python de Año Nuevo de Tarek Ziadé.&lt;/p&gt;
&lt;h2&gt;1. ¿Cuál es la aplicación, framework o biblioteca Python más interesante que has descubierto en el 2013?&lt;/h2&gt;
&lt;p&gt;He seguido utilizando mucho el notebook de IPython, y Anaconda me ha facilitado mucho la vida cuando me las he tenido que ver en Windows. La biblioteca que más me ha gustado usar ha sido &lt;a href="http://pytest.org"&gt;pytest&lt;/a&gt;, porque hace escribir tests y medir cobertura de código extremadamente sencillo.&lt;/p&gt;
&lt;h2&gt;2. ¿Qué nueva técnica de programación aprendiste en el 2013?&lt;/h2&gt;
&lt;p&gt;Progresé bastante con el desarrollo dirigido por tests (puedes leer cómo fue &lt;a href="http://pybonacci.org/2013/12/09/mi-primera-auditoria-de-codigo-revisando-scikit-aero/" title="Mi primera auditoría de código: revisando scikit-aero"&gt;mi primera auditoría de código&lt;/a&gt;) y utilicé por primera vez un servidor de integración …&lt;/p&gt;</summary></entry><entry><title>Optimización en Python: CVXOpt</title><link href="http://pybonacci.github.io/2013/12/13/optimizacion-en-python-cvxopt/" rel="alternate"></link><published>2013-12-13T18:00:13+00:00</published><updated>2013-12-13T18:00:13+00:00</updated><author><name>Jorge Bernabé Ruiz</name></author><id>tag:pybonacci.github.io,2013-12-13:2013/12/13/optimizacion-en-python-cvxopt/</id><summary type="html">&lt;h2&gt;¿Qué es CVXOpt?&lt;/h2&gt;
&lt;p&gt;CVXOpt es un paquete gratuito que se emplea para la optimización convexa y que está basado en el lenguaje de programación de Python. Su principal propósito es conseguir el desarrollo de software para aplicaciones de optimización convexa mediante la construcción de una librería estándar extensa de Python y empleando las fortalezas de Python como lenguaje de programación de alto nivel.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cvxopt.org/"&gt;CVXOpt&lt;/a&gt; fue desarrollado inicialmente por Martin Andersen, Joachim Dahl y Lieven Vandenberghe para emplearlo en su propio trabajo, haciéndolo disponible para otras personas.&lt;/p&gt;
&lt;h2&gt;¿Qué es la optimización convexa?&lt;/h2&gt;
&lt;p&gt;La optimización convexa es un tipo de programación matemática (programación convexa) en la que se estudia el caso en el que la función objetivo es convexa - minimización - y en la que el conjunto de restricciones del problema es convexa. Este tipo de optimización incluye la programación lineal (el conjunto …&lt;/p&gt;</summary></entry><entry><title>Mi primera auditoría de código: revisando scikit-aero</title><link href="http://pybonacci.github.io/2013/12/09/mi-primera-auditoria-de-codigo-revisando-scikit-aero/" rel="alternate"></link><published>2013-12-09T16:59:34+00:00</published><updated>2013-12-09T16:59:34+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2013-12-09:2013/12/09/mi-primera-auditoria-de-codigo-revisando-scikit-aero/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Como ya sabéis Javier Gutiérrez, profesor de la Universidad de Sevilla, está escribiendo una serie de entradas en Pybonacci sobre &lt;a href="http://pybonacci.org/author/javierjus/"&gt;desarrollo dirigido por pruebas en Python&lt;/a&gt;, que os animo a leer si no lo habéis hecho todavía. Pues bien, después de conocernos en la PyConES rescatamos la idea de aplicar estos conceptos a problemas no tan genéricos y más cercanos al software científico que escribimos nosotros. Fruto de esta idea Javier se ha tomado la molestia de revisar nuestra biblioteca scikit-aero, y ha escrito &lt;a href="http://iwt2-javierj.tumblr.com/post/69258809610/analizando-scikit-aero-en-python-2-x"&gt;una entrada en su blog sobre el proceso&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Como comenté en la entrada &lt;a href="http://iwt2-javierj.tumblr.com/post/64940568924/auditorias-de-codigo-o-aprendamos-juntos-a-ser-mejores" title="Auditorias de código o aprendamos juntos a ser mejores"&gt;Auditorias de código o aprendamos juntos a ser mejores&lt;/a&gt;, una de las cosas que más me gusta hacer es analizar código de otras personas para aprender y también para aplicar la &lt;a href="http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule" title="regla del buen boy scout"&gt;regla del buen boy scout&lt;/a&gt; e intentar contribuir a que ese …&lt;/p&gt;&lt;/blockquote&gt;</summary><category term="python"></category><category term="TDD"></category><category term="testing"></category></entry><entry><title>Desarrollo Dirigido por Pruebas en Python (III). Independencia del Sistema</title><link href="http://pybonacci.github.io/2013/12/03/desarrollo-dirigido-por-pruebas-en-python-iii-independencia-del-sistema/" rel="alternate"></link><published>2013-12-03T20:43:49+00:00</published><updated>2013-12-03T20:43:49+00:00</updated><author><name>javierjus</name></author><id>tag:pybonacci.github.io,2013-12-03:2013/12/03/desarrollo-dirigido-por-pruebas-en-python-iii-independencia-del-sistema/</id><summary type="html">&lt;p&gt;En esta entrega continuamos aplicando desarrollo dirigido por pruebas (o Test-Driven Development en inglés) para implementar una aplicación que busque tweets con un hashtag concreto y los guarde en un archivo. En concreto nos centraremos en el código que construye el nombre del fichero con la fecha actual y el hashtag buscado.&lt;/p&gt;
&lt;p&gt;Nos enfrentaremos con el problema de depender de la fecha del sistema por lo que el resultado esperado de la pruebas cambiará cada día. Para solucionarlo, veremos cómo podemos independizar nuestro código de detalles del sistema y hacerlo más fácil de probar. Esto nos dará pie a presentar los dobles de prueba.&lt;/p&gt;
&lt;p&gt;Las entregas anteriores de esta serie son:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pybonacci.org/2013/01/07/desarrollo-dirigido-por-pruebas-en-python-i-una-historia-que-pasa-todos-los-dias/#more-1352" title="Desarrollo dirigido por pruebas en Python (I): Una historia que pasa todos los días"&gt;Desarrollo dirigido por pruebas en Python (I): Una historia que pasa todos los días&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pybonacci.org/2013/06/19/desarrollo-dirigido-por-pruebas-en-python-ii-un-caso-practico-i/" title="Desarrollo Dirigido por Pruebas en Python (II). Un Caso Práctico (I)"&gt;Desarrollo Dirigido por Pruebas en Python (II). Un Caso Práctico (I)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Aunque la aplicación es …&lt;/p&gt;</summary></entry><entry><title>Operador dos puntos (:) de MATLAB ¿en Python?</title><link href="http://pybonacci.github.io/2013/11/15/operador-dos-puntos-de-matlab-en-python/" rel="alternate"></link><published>2013-11-15T13:00:25+00:00</published><updated>2013-11-15T13:00:25+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2013-11-15:2013/11/15/operador-dos-puntos-de-matlab-en-python/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Hoy que es viernes os traemos un artículo un poco más relajado (y atípico): vamos a hablar sobre el operador dos puntos (:) de MATLAB, o más bien &lt;strong&gt;de su ausencia en Python&lt;/strong&gt;. Tal vez algunos de quienes estáis ya considerando Python como una opción seria frente a MATLAB os estaréis preguntando: ¿qué hay de esta magnífica sintaxis para crear secuencias?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ octave -q
octave:1&amp;gt; &lt;span class="m"&gt;0&lt;/span&gt;:0.1:1
&lt;span class="nv"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt;.000 &lt;span class="m"&gt;0&lt;/span&gt;.100 &lt;span class="m"&gt;0&lt;/span&gt;.200 &lt;span class="m"&gt;0&lt;/span&gt;.300 &lt;span class="m"&gt;0&lt;/span&gt;.400 &lt;span class="m"&gt;0&lt;/span&gt;.500 &lt;span class="m"&gt;0&lt;/span&gt;.600 &lt;span class="m"&gt;0&lt;/span&gt;.700 &lt;span class="m"&gt;0&lt;/span&gt;.800 &lt;span class="m"&gt;0&lt;/span&gt;.900 &lt;span class="m"&gt;1&lt;/span&gt;.000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pues, como indican en el &lt;a href="http://mathesaurus.sourceforge.net/matlab-numpy.html"&gt;mathesaurus&lt;/a&gt; y en otros sitios, tendré que usar la función &lt;code&gt;np.arange&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kp"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><category term="arange"></category><category term="linspace"></category><category term="matlab"></category><category term="octave"></category><category term="python"></category></entry><entry><title>Teoría de control en Python con SciPy (II): Control PID</title><link href="http://pybonacci.github.io/2013/11/06/teoria-de-control-en-python-con-scipy-ii-control-pid/" rel="alternate"></link><published>2013-11-06T20:37:07+00:00</published><updated>2013-11-06T20:37:07+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2013-11-06:2013/11/06/teoria-de-control-en-python-con-scipy-ii-control-pid/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En esta serie de artículos vamos a estudiar &lt;strong&gt;cómo podemos aplicar Python al estudio de la teoría de control&lt;/strong&gt;, en este caso utilizando SciPy. La teoría de control se centra en los &lt;strong&gt;sistemas dinámicos&lt;/strong&gt; con entradas: sistemas físicos cuyo estado evoluciona con el tiempo en función de la información que reciben del exterior. Como puedes ver, esta definición es enormemente amplia: el control toca aspectos de la ingeniería y de las matemáticas, y tiene aplicaciones también en las ciencias sociales: psicología, sociología, finanzas...&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2013/10/10/teoria-de-control-en-python-con-scipy-i/" title="Teoría de control en Python con SciPy (I): Conceptos básicos"&gt;Conceptos básicos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control PID&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En esta segunda parte, una vez vistos algunos conceptos básicos en la primera, vamos a retomar el problema del control de crucero del coche exactamente donde lo dejamos:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;La conclusión que podemos extraer de este gráfico es que &lt;strong&gt;para pasar de 0 a 100 km/h, nuestro coche necesita casi un minuto …&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;</summary><category term="control"></category><category term="python"></category><category term="python 3"></category><category term="scipy"></category><category term="scipy.signal"></category></entry><entry><title>Teoría de control en Python con SciPy (I): Conceptos básicos</title><link href="http://pybonacci.github.io/2013/10/10/teoria-de-control-en-python-con-scipy-i/" rel="alternate"></link><published>2013-10-10T19:45:23+00:00</published><updated>2013-10-10T19:45:23+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2013-10-10:2013/10/10/teoria-de-control-en-python-con-scipy-i/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En esta serie de artículos vamos a estudiar &lt;strong&gt;cómo podemos aplicar Python al estudio de la teoría de control&lt;/strong&gt;, en este caso utilizando SciPy. La teoría de control se centra en los &lt;strong&gt;sistemas dinámicos&lt;/strong&gt; con entradas: sistemas físicos cuyo estado evoluciona con el tiempo en función de la información que reciben del exterior. Como puedes ver, esta definición es enormemente amplia: el control toca aspectos de la ingeniería y de las matemáticas, y tiene aplicaciones también en las ciencias sociales: psicología, sociología, finanzas...&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Conceptos básicos&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2013/11/06/teoria-de-control-en-python-con-scipy-ii-control-pid/" title="Teoría de control en Python con SciPy (II): Control PID"&gt;Control PID&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En esta primera parte vamos a hacer una breve introducción matemática para centrar el tema y vamos a ver el manejo básico de sistemas LTI.&lt;/p&gt;
&lt;p&gt;Cuando uno piensa en estudiar sistemas dinámicos con un ordenador, automáticamente se le viene a la cabeza &lt;strong&gt;MATLAB&lt;/strong&gt;, y no sin motivo. Este programa tiene unas capacidades …&lt;/p&gt;</summary><category term="control"></category><category term="python"></category><category term="python 3"></category><category term="scipy"></category><category term="scipy.signal"></category></entry><entry><title>Hoja de ruta para SciPy 1.0</title><link href="http://pybonacci.github.io/2013/09/22/hoja-de-ruta-para-scipy-1-0/" rel="alternate"></link><published>2013-09-22T14:52:43+00:00</published><updated>2013-09-22T14:52:43+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2013-09-22:2013/09/22/hoja-de-ruta-para-scipy-1-0/</id><summary type="html">&lt;p&gt;Los desarrolladores de SciPy han anunciado, a través de la lista de correo, que se ha preparado un borrador con &lt;strong&gt;la hoja de ruta hacia la consolidación de SciPy 1.0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Hoja de ruta:&lt;/p&gt;
&lt;p&gt;https://github.com/rgommers/scipy/blob/roadmap/doc/ROADMAP.rst.txt&lt;/p&gt;
&lt;p&gt;Anuncio en la lista de correo:&lt;/p&gt;
&lt;p&gt;http://mail.scipy.org/pipermail/scipy-dev/2013-September/019237.html&lt;/p&gt;
&lt;p&gt;Ralf Gommers, Pauli Virtanen y David Cournapeau se reunieron en la &lt;a href="http://pybonacci.org/tag/euroscipy/"&gt;EuroSciPy&lt;/a&gt; que se celebró en Bruselas en agosto y han redactado un documento donde se recogen los pasos necesarios en términos de nueva funcionalidad, solución de fallos, etc. para llegar a SciPy 1.0. Cuando esto se consiga, significará que SciPy contiene lo esencial y que tiene una API y un código de buena calidad.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" width="550"&gt;
  &lt;p&gt;
    &lt;a href="https://twitter.com/hashtag/scipy?src=hash"&gt;#scipy&lt;/a&gt; 1.0 roadmap on github: here's your chance to influence the future direction …&lt;/p&gt;&lt;/blockquote&gt;</summary><category term="euroscipy"></category><category term="python"></category><category term="scipy"></category></entry><entry><title>PFS: Multiplicación de Karatsuba</title><link href="http://pybonacci.github.io/2013/09/04/pfs-multiplicacion-de-karatsuba/" rel="alternate"></link><published>2013-09-04T23:46:40+00:00</published><updated>2013-09-04T23:46:40+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2013-09-04:2013/09/04/pfs-multiplicacion-de-karatsuba/</id><summary type="html">&lt;p&gt;Vamos a seguir con nuestra serie sobre &lt;a href="http://pybonacci.org/tag/python-fuente-de-sabiduria/"&gt;'&lt;strong&gt;p&lt;/strong&gt;ython, &lt;strong&gt;f&lt;/strong&gt;uente de &lt;strong&gt;s&lt;/strong&gt;abiduria'&lt;/a&gt; hablando sobre la multiplicación.&lt;/p&gt;
&lt;p&gt;¿Te has preguntado alguna vez cómo se multiplican dos números en un ordenador o calculadora? Normalmente, los &lt;a href="http://en.wikipedia.org/wiki/Arithmetic_logic_unit" target="_blank"&gt;circuitos&lt;/a&gt; de los procesadores incluyen operaciones básicas como la &lt;a href="http://en.wikipedia.org/wiki/Multiplication_algorithm#Shift_and_add" target="_blank"&gt;multiplicación de enteros de tamaño pequeño&lt;/a&gt;. Sobre estas operaciones básicas se construye todo lo demás.&lt;/p&gt;
&lt;p&gt;El caso que nos ocupa hoy, multiplicar números enteros muy grandes, se consigue mediante el uso de algoritmos vía software. Una forma sencilla de calcular enteros es usando la misma metodología que usábamos en la escuela, con la tabla de multiplicar del uno al diez y con sumas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    23958233
        5830 ×
------------
    00000000 ( =      23,958,233 ×     0)
   71874699  ( =      23,958,233 ×    30)
 191665864   ( =      23,958,233 ×   800)
119791165    ( =      23,958,233 × 5,000)
------------
139676498390 ( = 139,676,498,390        )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(ejemplo extraído de &lt;a href="http://en.wikipedia.org/wiki/Multiplication_algorithm#Example" target="_blank"&gt;wikipedia&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;El …&lt;/p&gt;</summary><category term="exponenciación binaria"></category><category term="optimización"></category><category term="PFS"></category><category term="potencias"></category><category term="python"></category><category term="Python fuente de sabiduria"></category></entry><entry><title>PFS: Exponenciación binaria</title><link href="http://pybonacci.github.io/2013/08/28/pfs-exponenciacion-binaria/" rel="alternate"></link><published>2013-08-28T16:42:13+00:00</published><updated>2013-08-28T16:42:13+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2013-08-28:2013/08/28/pfs-exponenciacion-binaria/</id><summary type="html">&lt;p&gt;Hoy voy a iniciar una serie nueva de entradas que se llamará '&lt;strong&gt;p&lt;/strong&gt;ython, &lt;strong&gt;f&lt;/strong&gt;uente de &lt;strong&gt;s&lt;/strong&gt;abiduría' (PFS para abreviar). ¿Qué pretende esta serie? La idea básica es mostrar la influencia y realimentación entre las matemáticas y la programación. La idea e inspiración para estas entradas salió después de leer esta &lt;a href="http://ch3m4.org/blog/2013/08/14/estudio-funcion-factorial-numpy/" target="_blank"&gt;entrada&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Inauguraremos esta entrada con una forma de calcular la potencia entera de un número entero. Si tuviera que crear una función que calculase esto, la primera idea que se me ocurre es usar la fuerza bruta (soy así de primario)...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pow_fuerzabruta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con la anterior función, la cual no he pensado mucho, lo que estamos haciendo son &lt;code&gt;n-1&lt;/code&gt; multiplicaciones. A medida que aumente el exponente aumentará el tiempo de cálculo. Veámoslo …&lt;/p&gt;</summary><category term="exponenciación binaria"></category><category term="optimización"></category><category term="PFS"></category><category term="potencias"></category><category term="python"></category><category term="Python fuente de sabiduria"></category></entry><entry><title>Informando de bugs en NumPy y SciPy en castellano a través de Pybonacci</title><link href="http://pybonacci.github.io/2013/08/23/informando-de-bugs-en-numpy-y-scipy-en-castellano-a-traves-de-pybonacci/" rel="alternate"></link><published>2013-08-23T08:45:04+00:00</published><updated>2013-08-23T08:45:04+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2013-08-23:2013/08/23/informando-de-bugs-en-numpy-y-scipy-en-castellano-a-traves-de-pybonacci/</id><summary type="html">&lt;p&gt;No sé si se llegará a usar esto mucho, pero he pensado que tal vez haya gente encontrando comportamientos extraños en NumPy o SciPy que pueden ser bugs pero que no puedan enviar un informe de errores en inglés a los repositorios oficiales. Por eso &lt;strong&gt;he hecho un fork de ambos proyectos, y si pensáis que habéis encontrado un bug en NumPy o SciPy podéis decírnoslo en castellano aquí y nosotros nos encargamos de traducirlos&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Pybonacci/numpy/issues"&gt;https://github.com/Pybonacci/numpy/issues&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Pybonacci/scipy/issues"&gt;https://github.com/Pybonacci/scipy/issues&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTA IMPORTANTE&lt;/strong&gt;&lt;/em&gt;: Estos repositorios &lt;strong&gt;no&lt;/strong&gt; son para consultas sobre código o dudas personales. Como para informar de cualquier otro bug se exigirá seriedad y compromiso por parte de la persona que informa. En particular, aplican estas tres sencillas reglas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;El informe debe contener &lt;strong&gt;en qué sistema operativo se trabaja y qué versiones de …&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><category term="github"></category><category term="numpy"></category><category term="python"></category><category term="scipy"></category></entry><entry><title>Ajuste e interpolación unidimensionales básicos en Python con SciPy</title><link href="http://pybonacci.github.io/2013/08/15/ajuste-e-interpolacion-unidimensionales-basicos-en-python-con-scipy/" rel="alternate"></link><published>2013-08-15T13:14:15+00:00</published><updated>2013-08-15T13:14:15+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2013-08-15:2013/08/15/ajuste-e-interpolacion-unidimensionales-basicos-en-python-con-scipy/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este artículo vamos a ver una introducción a &lt;strong&gt;cómo hacer ajustes e interpolaciones en Python&lt;/strong&gt; utilizando NumPy y los módulos &lt;code&gt;interpolate&lt;/code&gt; y &lt;code&gt;optimize&lt;/code&gt; de SciPy.&lt;/p&gt;
&lt;p&gt;Ajustes de curvas e interpolaciones son &lt;strong&gt;dos tareas básicas que realizaremos con mucha frecuencia&lt;/strong&gt;. Por ejemplo, cuando recojamos los datos de un experimento: sabemos que se tienen que comportar como una parábola, pero obviamente por errores de medición u otro tipo no obtenemos una parábola exactamente. En este caso necesitaremos realizar un &lt;strong&gt;ajuste de los datos&lt;/strong&gt;, conocido el modelo (una curva de segundo grado en este caso).&lt;/p&gt;
&lt;p&gt;En otras ocasiones dispondremos de una serie de puntos y &lt;strong&gt;querremos construir una curva que pase por todos ellos&lt;/strong&gt;. En este caso lo que queremos es realizar una &lt;strong&gt;interpolación&lt;/strong&gt;: si tenemos pocos puntos podremos usar un polinomio, y en caso contrario habrá que usar trazadores (&lt;em&gt;splines …&lt;/em&gt;&lt;/p&gt;</summary><category term="interpolación"></category><category term="numpy"></category><category term="python"></category><category term="python 3"></category><category term="scipy"></category><category term="scipy.interpolate"></category></entry><entry><title>MicroEntradas: numpy.unravel_index</title><link href="http://pybonacci.github.io/2013/07/27/microentradas-numpy-unravel_index/" rel="alternate"></link><published>2013-07-27T11:09:02+00:00</published><updated>2013-07-27T11:09:02+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2013-07-27:2013/07/27/microentradas-numpy-unravel_index/</id><summary type="html">&lt;p&gt;¿Cuántas veces te has encontrado que tienes que conocer un valor concreto de una matriz n-dimensional y conocer la posición en la que se encuentra ese valor en esa matriz? Yo me he visto en esa situación muchas veces y siempre he acabado creando mi función que me dijera la posición,..., hasta que he descubierto &lt;a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.unravel_index.html"&gt;numpy.unravel_index&lt;/a&gt;!!!&lt;/p&gt;
&lt;p&gt;[Para la siguiente entrada se ha usado python 2.7.3 y numpy 1.6.1 aunque debería ser compatible con python 3.x y versiones de numpy superiores a la 1.6.0, antes de la versión 1.6.0 de numpy la versión de &lt;code&gt;unravel_index&lt;/code&gt; solo permitía que le pasáramos un único índice]&lt;/p&gt;
&lt;p&gt;Por ejemplo, imagina que quieres encontrar el valor máximo en una matriz 2D como la siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="c1"&gt;# Matriz bidimensional de números aleatorios distribuidos&lt;/span&gt;
&lt;span class="c1"&gt;# siguiendo una …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><category term="MicroEntradas"></category><category term="numpy"></category><category term="unravel_index"></category></entry><entry><title>Aprende (funcionalidad básica de) PyTables paso a paso (III)</title><link href="http://pybonacci.github.io/2013/07/08/aprende-funcionalidad-basica-de-pytables-paso-a-paso-iii/" rel="alternate"></link><published>2013-07-08T21:33:09+00:00</published><updated>2013-07-08T21:33:09+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2013-07-08:2013/07/08/aprende-funcionalidad-basica-de-pytables-paso-a-paso-iii/</id><summary type="html">&lt;p&gt;En los &lt;a href="http://pybonacci.org/tag/tutorial-pytables-basico-3-0/"&gt;anteriores capítulos&lt;/a&gt; vimos como crear una estructura básica para nuestro fichero &lt;code&gt;h5&lt;/code&gt; y como rellenar una tabla de datos. Ahora vamos a ver como volver a la tabla que ya rellenamos para añadir nuevos registros sin eliminar los anteriores.&lt;/p&gt;
&lt;h3&gt;Modificar tablas existentes&lt;/h3&gt;
&lt;p&gt;Podemos añadir datos a tablas existentes de la siguiente forma. Para hacerlo primero abrimos el fichero que ya creamos anteriormente en modo "append", obtenemos el nodo que nos lleva a la tabla en cuestión que queremos rellenar (&lt;code&gt;tab&lt;/code&gt; será una instancia de la clase &lt;code&gt;Table&lt;/code&gt;) y establecemos un 'puntero' donde guardar los nuevos datos (con ayuda de &lt;code&gt;tab.row&lt;/code&gt; donde &lt;code&gt;mis_datos&lt;/code&gt; serán una instancia de la clase &lt;code&gt;Row&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Si no habéis importado las librerías necesarias&lt;/span&gt;
&lt;span class="c1"&gt;# descomentad las siguientes tres líneas:&lt;/span&gt;
&lt;span class="c1"&gt;# import numpy as np&lt;/span&gt;
&lt;span class="c1"&gt;# import datetime as dt&lt;/span&gt;
&lt;span class="c1"&gt;# import tables as tb&lt;/span&gt;
&lt;span class="n"&gt;h5file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;openFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tabla_test …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><category term="bases de datos"></category><category term="bbdd"></category><category term="hdf5"></category><category term="pytables"></category><category term="tutorial pytables básico 3.0"></category></entry><entry><title>Aprende (funcionalidad básica de) PyTables paso a paso (II)</title><link href="http://pybonacci.github.io/2013/07/06/aprende-funcionalidad-basica-de-pytables-paso-a-paso-ii/" rel="alternate"></link><published>2013-07-06T22:02:09+00:00</published><updated>2013-07-06T22:02:09+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2013-07-06:2013/07/06/aprende-funcionalidad-basica-de-pytables-paso-a-paso-ii/</id><summary type="html">&lt;p&gt;En el &lt;a href="http://pybonacci.org/2013/07/04/aprende-funcionalidad-basica-de-pytables-paso-a-paso-i/"&gt;anterior capítulo&lt;/a&gt; vimos como crear una estructura básica para nuestro fichero &lt;code&gt;h5&lt;/code&gt;. Ahora vamos a ver como rellenar tablas de ese mismo fichero.&lt;/p&gt;
&lt;h3&gt;Rellenar tablas&lt;/h3&gt;
&lt;p&gt;Ahora es tiempo de rellenar la tabla con datos sin sentido (datos aleatorios) y fechas. &lt;code&gt;numpy&lt;/code&gt; y &lt;code&gt;datetime&lt;/code&gt; nos facilitarán la tarea por lo que vamos a importarlos antes).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;dt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Abrimos de nuevo el fichero h5 que creamos en el anterior capítulo, pero en lugar de abrirlo en modo "write" lo abriremos en modo "append".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;h5file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;openFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tabla_test.h5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Recuperamos la tabla que queremos llenar (indicando la ruta en la estructura del fichero hdf5) y usando la función &lt;code&gt;getNode&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h5file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/carpeta1/datos_carpeta1_tabla1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para rellenar la tabla creamos un puntero (o constructor de líneas propio a la tabla) &lt;code&gt;row&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mis_datos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;row …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><category term="bases de datos"></category><category term="bbdd"></category><category term="hdf5"></category><category term="pytables"></category><category term="tutorial pytables básico 3.0"></category></entry><entry><title>Aprende (funcionalidad básica de) PyTables paso a paso (I)</title><link href="http://pybonacci.github.io/2013/07/04/aprende-funcionalidad-basica-de-pytables-paso-a-paso-i/" rel="alternate"></link><published>2013-07-04T21:17:34+00:00</published><updated>2013-07-04T21:17:34+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2013-07-04:2013/07/04/aprende-funcionalidad-basica-de-pytables-paso-a-paso-i/</id><summary type="html">&lt;h2&gt;HDF5&lt;/h2&gt;
&lt;p&gt;El HDF5 (hierarchical dataset format, &lt;a href="http://www.hdfgroup.org/HDF5/" target="_blank"&gt;http://www.hdfgroup.org/HDF5/&lt;/a&gt;) es un formato que permite almacenar eficientemente grandes volúmenes de datos. Los datos se pueden almacenar de forma jerarquizada conjuntamente con metadatos. Es un formato portable que, prácticamente, no tiene límite en el tamaño de los datos.&lt;/p&gt;
&lt;h2&gt;PyTables&lt;/h2&gt;
&lt;p&gt;Pytables está programado sobre el formato hdf5 con ayuda de Python y Numpy. La creación, modificación y búsquedas sobre grandes conjuntos de datos es relativamente sencilla. La utilización de memoria RAM y compresión de datos están optimizados en segundo plano por la biblioteca. El espacio de disco utilizado es mucho más pequeño y el acceso a los datos suele ser más rápido comparado con bases de datos relacionales.&lt;/p&gt;
&lt;p&gt;La versión actual es la 3.0 y es compatible con python 2.7 y 3.1 y superiores.&lt;/p&gt;
&lt;p&gt;Para instalarlo en un …&lt;/p&gt;</summary><category term="bases de datos"></category><category term="bbdd"></category><category term="hdf5"></category><category term="pytables"></category><category term="tutorial pytables básico 3.0"></category></entry><entry><title>MicroEntradas: numpy.digitize</title><link href="http://pybonacci.github.io/2013/06/30/microentradas-numpy-digitize/" rel="alternate"></link><published>2013-06-30T15:29:42+00:00</published><updated>2013-06-30T15:29:42+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2013-06-30:2013/06/30/microentradas-numpy-digitize/</id><summary type="html">&lt;p&gt;Con esta entrada voy a inaugurar una serie de entradas que serán cortas. La idea detrás de ellas sirve a dos propósitos, fundamentalmente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ver pequeñas y, quizás, desconocidas funcionalidades prácticas que están dentro de bibliotecas de uso típicas (numpy, scipy, matplotlib,...),&lt;/li&gt;
&lt;li&gt;intentar aportar algo a Pybonacci dentro de mi apretada agenda (y que se apretará más en unos pocos meses, mi tiempo se ha reducido drásticamente en los últimos tiempos).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Y basta ya de preámbulos, que esto pretende ser corto y práctico.&lt;/p&gt;
&lt;p&gt;Hoy vamos a ver &lt;a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.digitize.html"&gt;&lt;code&gt;numpy.digitize&lt;/code&gt;&lt;/a&gt; que, como la documentación oficial indica, sirve para devolver los índices de los intervalos de datos a los que pertenece cada valor de un array de datos. Las entradas de la función son solo tres, el array en cuestión a evaluar (array), los valores que establecen los intervalos (bins) y una una …&lt;/p&gt;</summary><category term="bincount"></category><category term="digitize"></category><category term="frecuencias"></category><category term="histogram"></category><category term="histograma"></category><category term="MicroEntradas"></category><category term="numpy"></category><category term="numpy.bincount"></category><category term="numpy.digitize"></category><category term="numpy.histogram"></category></entry><entry><title>Desarrollo Dirigido por Pruebas en Python (II). Un Caso Práctico (I)</title><link href="http://pybonacci.github.io/2013/06/19/desarrollo-dirigido-por-pruebas-en-python-ii-un-caso-practico-i/" rel="alternate"></link><published>2013-06-19T23:05:49+00:00</published><updated>2013-06-19T23:05:49+00:00</updated><author><name>javierjus</name></author><id>tag:pybonacci.github.io,2013-06-19:2013/06/19/desarrollo-dirigido-por-pruebas-en-python-ii-un-caso-practico-i/</id><summary type="html">&lt;p&gt;A principios de año escribimos una entrada que puedes leer &lt;a href="http://pybonacci.org/2013/01/07/desarrollo-dirigido-por-pruebas-en-python-i-una-historia-que-pasa-todos-los-dias/" title="Desarrollo dirigido por pruebas en Python (I): Una historia que pasa todos los días"&gt;aquí&lt;/a&gt;. Después de un parón más largo de lo previsto, volvemos a la carga con el desarrollo dirigido por pruebas en Python.&lt;/p&gt;
&lt;p&gt;Vamos a utilizar TDD y el módulo unittest para crear una aplicación que se conecte a twitter, recupere los mensajes de un hashtag y almacene parte de los mensajes en un fichero. El nombre del fichero será la fecha actual y el hashtag. El fichero contendrá la información de cada tweet separada por comas.&lt;/p&gt;
&lt;p&gt;Dividiremos este ejemplo en varias entradas. En cada entrada, desarrollaremos una parte de la aplicación a medida que aprendemos distintas técnicas y buenas prácticas para aplicar TDD. En la primera entrada empezaremos con la aplicación y veremos algunos aspectos clave de la aplicación de TDD.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;El diario de diseño&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Vamos  comenzar creando el diario …&lt;/p&gt;</summary><category term="python"></category><category term="TDD"></category><category term="test"></category><category term="testing"></category></entry><entry><title>Cómo depurar un programa Python con pdb</title><link href="http://pybonacci.github.io/2013/06/14/como-depurar-un-programa-python-con-pdb/" rel="alternate"></link><published>2013-06-14T14:51:42+00:00</published><updated>2013-06-14T14:51:42+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2013-06-14:2013/06/14/como-depurar-un-programa-python-con-pdb/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este artículo vamos a explicar cómo &lt;strong&gt;depurar un programa Python&lt;/strong&gt; usando el módulo &lt;strong&gt;pdb&lt;/strong&gt; de la biblioteca estándar. Si no sabes qué es exactamente depurar un programa o para qué te puede servir, sigue leyendo.&lt;/p&gt;
&lt;p&gt;Depurar consiste en seguir el flujo de un programa a medida que se ejecuta, de forma que podemos monitorizar qué es lo que está sucediendo en cada momento. Es un método muy efectivo para encontrar fallos, porque:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Permite detener momentáneamente la ejecución del programa usando &lt;strong&gt;puntos de ruptura&lt;/strong&gt; (&lt;em&gt;breakpoints&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Permite examinar en cada momento las variables que se están utilizando (no necesitas llenar tu código de &lt;code&gt;print&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Permite cambiar el valor de una variable mientras está detenida la ejecución.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si es la primera vez que oyes hablar de esto, en seguida descubrirás el mundo de posibilidades que ofrece la depuración.&lt;/p&gt;
&lt;p&gt;Puedes leer online …&lt;/p&gt;</summary><category term="bugs"></category><category term="depuración"></category><category term="pdb"></category><category term="python"></category></entry><entry><title>Entrevista a Fernando Pérez, creador de IPython</title><link href="http://pybonacci.github.io/2013/05/16/entrevista-a-fernando-perez-creador-de-ipython/" rel="alternate"></link><published>2013-05-16T22:06:51+00:00</published><updated>2013-05-16T22:06:51+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2013-05-16:2013/05/16/entrevista-a-fernando-perez-creador-de-ipython/</id><summary type="html">&lt;p&gt;Hoy os traemos una novedad desde Pybonacci: inauguramos la sección de entrevistas con &lt;a href="http://fperez.org/"&gt;Fernando Pérez&lt;/a&gt;, que ha accedido a charlar un rato con nosotros sobre el pasado, presente y futuro de IPython, la ciencia abierta y alguna que otra cosa más.&lt;/p&gt;
&lt;h2&gt;Enlaces&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Web de IPython http://ipython.org/&lt;/li&gt;
&lt;li&gt;Beca de la Fundación Sloan http://ipython.org/sloan-grant.html&lt;/li&gt;
&lt;li&gt;Etiqueta ipython en Stack Overflow http://stackoverflow.com/tags/ipython&lt;/li&gt;
&lt;li&gt;Lista de correo ipython-dev http://mail.scipy.org/mailman/listinfo/ipython-dev&lt;/li&gt;
&lt;li&gt;Información para desarrolladores https://github.com/ipython/ipython/wiki/Dev:-Index&lt;/li&gt;
&lt;li&gt;Chat de desarrolladores http://www.hipchat.com/ghtNzvmfC&lt;/li&gt;
&lt;/ul&gt;</summary><category term="entrevistas"></category><category term="ipython"></category><category term="notebook"></category><category term="open science"></category><category term="python"></category></entry><entry><title>Repaso a PyData 2013</title><link href="http://pybonacci.github.io/2013/04/05/repaso-a-pydata-2013/" rel="alternate"></link><published>2013-04-05T20:10:09+00:00</published><updated>2013-04-05T20:10:09+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2013-04-05:2013/04/05/repaso-a-pydata-2013/</id><summary type="html">&lt;p&gt;Unos días después de la PyConUS 2013 se celebró la primera PyData del año (creo que serán semestrales de forma regular aunque el tiempo dirá). Entre las charlas había algunas introductorias, otras más avanzadas y otras enseñando aplicaciones prácticas.&lt;/p&gt;
&lt;p&gt;Entre las charlas introductorias destacaremos:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://vimeo.com/63253083"&gt;Introducción a Numpy&lt;/a&gt; por &lt;em&gt;Bryan Van De Ven&lt;/em&gt;: si no conoces absolutamente nada de Numpy esta es tu charla. Da un repaso por las cosas más frecuentes del uso de Numpy sin meterse en cosas muy esotéricas. Puedes sacar la libreta e ir apuntando las cosas que creas que te puedan resultar útiles para tus análisis.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://vimeo.com/63255854"&gt;Pandas&lt;/a&gt; por &lt;em&gt;Wes McKinney&lt;/em&gt;: Es una charla introductoria. El problema que veo es que Pandas no es algo tan centrado como Numpy con su ndarray, las posibilidades de uso son múltiples y, quizá, hacer algo introductorio en vídeo sobre Pandas …&lt;/p&gt;</summary><category term="blaze"></category><category term="ipython"></category><category term="matplotlib"></category><category term="nodebox"></category><category term="numpy"></category><category term="pandas"></category><category term="pydata"></category><category term="scikit-learn"></category><category term="video"></category><category term="vídeos"></category></entry><entry><title>Repaso a la PyConUS 2013</title><link href="http://pybonacci.github.io/2013/03/27/repaso-a-la-pyconus-2013/" rel="alternate"></link><published>2013-03-27T19:21:00+00:00</published><updated>2013-03-27T19:21:00+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2013-03-27:2013/03/27/repaso-a-la-pyconus-2013/</id><summary type="html">&lt;p&gt;En nuestro repaso habitual a la parte científica de conferencias pythonistas importantes hoy le toca el turno a la última PyConUS celebrada en California la semana pasada:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.pyvideo.org/video/1745/server-log-analysis-with-pandas-0"&gt;Server log analysis with pandas&lt;/a&gt; (Taavi Burns): Ejemplos de uso de Pandas y las bondades de esta librería (a la que en breve le daremos un repaso importante). Si no conocéis Pandas es una buena forma de ver un poco tiempo muchas de sus ventajas. También se usa IPython y Matplotlib de forma general en la charla.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.pyvideo.org/video/1751/building-full-stack-scientific-applications-in-py"&gt;Building full-stack applications in Python (Luke Lee)&lt;/a&gt;: En esta charla se echa un vistazo a todas las librerías 'científicas' masivas (Numpy and friends) que tenemos en Python. No aporta mucho si ya conoces un poco el ecosistema Numpy-científico. Como punto exótico, el uso de PyQwt en lugar de Matplotlib. Una librería gráfica más ligera que Matplotlib …&lt;/p&gt;</summary><category term="pycon"></category><category term="pyconus"></category><category term="vídeos"></category></entry><entry><title>Revisión del tutorial de matplotlib.pyplot</title><link href="http://pybonacci.github.io/2013/03/21/revision-del-tutorial-de-matplotlib-pyplot/" rel="alternate"></link><published>2013-03-21T18:55:19+00:00</published><updated>2013-03-21T18:55:19+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2013-03-21:2013/03/21/revision-del-tutorial-de-matplotlib-pyplot/</id><summary type="html">&lt;p&gt;El &lt;a href="http://pybonacci.org/tag/tutorial-matplotlib-pyplot/"&gt;tutorial de matplotlib.pyplot&lt;/a&gt; publicado en este blog durante el 2012 ha sido revisado, corregido 🙁 y publicado con formato notebook de ipython.&lt;/p&gt;
&lt;p&gt;Se ha subido el material al repositorio de &lt;a href="https://github.com/Pybonacci/Tutorial-de-matplotlib.pyplot-en-pybonacci"&gt;pybonacci en github&lt;/a&gt; por lo que lo podéis descargar, usar, modificar, mejorar,...&lt;/p&gt;
&lt;p&gt;Si lo queréis ver online podéis usar el &lt;a href="http://nbviewer.ipython.org/urls/raw.github.com/Pybonacci/Tutorial-de-matplotlib.pyplot-en-pybonacci/master/tutorial_de_matplotlib.pyplot.ipynb"&gt;nbviewer de la web de ipython&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;P.D.: Nos estamos poniendo al día con lo último en boga de la comunidad científica. Y estad atentos puesto que el &lt;a href="https://github.com/ipython/ipython/wiki/Roadmap:-IPython"&gt;notebook de IPython&lt;/a&gt; va a seguir pegando fuerte.&lt;/p&gt;</summary><category term="ipython"></category><category term="matplotlib"></category><category term="matplotlib.pyplot"></category><category term="pyplot"></category><category term="tutorial matplotlib.pyplot"></category></entry><entry><title>Formateando números</title><link href="http://pybonacci.github.io/2013/03/03/formateando-numeros/" rel="alternate"></link><published>2013-03-03T09:38:36+00:00</published><updated>2013-03-03T09:38:36+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2013-03-03:2013/03/03/formateando-numeros/</id><summary type="html">&lt;p&gt;Muy a menudo tengo que andar leyendo datos de sensores de medida conectados a 'loggers' con formatos muy variopintos y transformarlos a algo legible por un ser humano (echadle un ojo a &lt;a href="http://pybonacci.org/2013/02/21/regex-mediante-ejemplos/"&gt;regex mediante ejemplos&lt;/a&gt; para conocer el maravilloso mundo de las expresiones regulares y no ser tan bruto como yo a la hora de tratar esos variopintos formatos).&lt;/p&gt;
&lt;p&gt;Hoy vamos a estar muy centrados en una sola cosa, vamos a ver como usar el método &lt;a href="http://docs.python.org/3.3/library/stdtypes.html#str.format"&gt;&lt;code&gt;format&lt;/code&gt;&lt;/a&gt; de la clase &lt;a href="http://docs.python.org/3.3/library/stdtypes.html#text-sequence-type-str"&gt;&lt;code&gt;string&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vamos a empezar por muy algo sencillo, vamos a mostrar números en pantalla (o los podéis grabar en un fichero) de forma secuencial:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;datos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dato&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;datos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dato&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La salida del anterior código mostrará:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;21&lt;/span&gt;
&lt;span class="mi"&gt;41&lt;/span&gt;
&lt;span class="mi"&gt;61&lt;/span&gt;
&lt;span class="mi"&gt;81&lt;/span&gt;
&lt;span class="mi"&gt;101&lt;/span&gt;
&lt;span class="mi"&gt;121&lt;/span&gt;
&lt;span class="mi"&gt;141&lt;/span&gt;
&lt;span class="mi"&gt;161&lt;/span&gt;
&lt;span class="mi"&gt;181&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo anterior está bien, pero no tenemos mucha libertad …&lt;/p&gt;</summary><category term="format"></category><category term="formateando texto"></category><category term="formato"></category><category term="python"></category></entry><entry><title>Integrar Fortran con Python usando F2PY</title><link href="http://pybonacci.github.io/2013/02/22/integrar-fortran-con-python-usando-f2py/" rel="alternate"></link><published>2013-02-22T17:29:37+00:00</published><updated>2013-02-22T17:29:37+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2013-02-22:2013/02/22/integrar-fortran-con-python-usando-f2py/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este artículo vamos a explicar cómo podemos utilizar bibliotecas escritas en Fortran (o FORTRAN) desde Python utilizando &lt;strong&gt;F2PY&lt;/strong&gt;, cómo preparar el código Fortran para que este proceso sea lo más sencillo posible y cómo solventar los problemas que nos pueden surgir por el camino.&lt;/p&gt;
&lt;p&gt;Hay dos casos en los que nos puede venir bien usar F2PY:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Queremos escribir una &lt;strong&gt;parte de cálculo intensivo en Fortran&lt;/strong&gt; para que sea eficiente, pero queremos &lt;strong&gt;controlar la lógica del programa desde Python&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Tenemos &lt;strong&gt;código legado&lt;/strong&gt; y el esfuerzo de portarlo a otro lenguaje es demasiado grande (código ilegible, ausencia de comentarios, fragilidad). Aún podemos aprovecharlo: con F2PY podemos llamarlo desde Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;He utilizado numerosas referencias para escribir este artículo, y una fundamental es [ČERTÍK]. En esta web Ondrej Čertík, también un colaborador clave en proyectos como SymPy y NumPy, recoge una serie …&lt;/p&gt;</summary><category term="f2py"></category><category term="fortran"></category><category term="numpy"></category><category term="python"></category></entry><entry><title>Regex mediante ejemplos</title><link href="http://pybonacci.github.io/2013/02/21/regex-mediante-ejemplos/" rel="alternate"></link><published>2013-02-21T19:55:56+00:00</published><updated>2013-02-21T19:55:56+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2013-02-21:2013/02/21/regex-mediante-ejemplos/</id><summary type="html">&lt;p&gt;Las expresiones regulares, regex o regexp siempre me han parecido algo especialmente críptico. La realidad es que nunca les dediqué un mínimo de tiempo ya que en el trabajo todo es para ayer y siempre acabo acudiendo a soluciones 'stackoverfloweras' donde los super expertos siempre están ahí (&lt;a href="http://python.majibu.org/preguntas/2122/reemplazar-patron-usando-expresiones-regulares"&gt;gracias chicos&lt;/a&gt;). Pero se acabó, aprovechando que estoy en un avión y tengo unas horas y que me he planificado y descargado varios recursos previamente para poder trabajar 'offline' voy a aprovechar para intentar que lo aprendamos o, al menos, nos introduzcamos en ello mediante ejemplos y, así, nos acerquemos más a ser unos expertos mineros de datos y podamos extraer la correcta información a analizar.&lt;/p&gt;
&lt;p&gt;Aunque en python se puedan buscar patrones de otras formas diferentes vamos a usar el módulo &lt;a href="http://docs.python.org/3.3/library/re.html"&gt;&lt;em&gt;re&lt;/em&gt;&lt;/a&gt; de la librería estándar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos al lío. Imaginad …&lt;/p&gt;</summary><category term="expresiones regulares"></category><category term="python"></category><category term="re"></category><category term="regex"></category><category term="regexp"></category></entry><entry><title>Gráficas interactivas en el navegador</title><link href="http://pybonacci.github.io/2013/02/17/graficas-interactivas-en-el-navegador/" rel="alternate"></link><published>2013-02-17T17:51:16+00:00</published><updated>2013-02-17T17:51:16+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2013-02-17:2013/02/17/graficas-interactivas-en-el-navegador/</id><summary type="html">&lt;p&gt;Últimamente sigo con mucha atención varios desarrollos relacionados con la posibilidad de usar 'python' en el navegador, siempre persiguiendo quimeras 😛 Entre ellos se encuentra &lt;a href="http://www.brython.info/index_en.html"&gt;brython&lt;/a&gt;, cuyo nombre proviene de '&lt;strong&gt;br&lt;/strong&gt;owser p&lt;strong&gt;ython&lt;/strong&gt;'.&lt;/p&gt;
&lt;p&gt;He estado estudiando un poco de brython y un poco sobre el uso del elemento &lt;a href="http://en.wikipedia.org/wiki/Canvas_element"&gt;'canvas'&lt;/a&gt; en HTML5, el cual permite dibujar en el navegador y, a pesar de lo cutre del código rápido y sucio que he hecho y a pesar de no tener mucha idea de HTML5, del DOM, de brython, de javascript, he obtenido un resultado que me ha parecido ilusionante. Mi propósito era poder hacer un gráfico como lo que se obtiene con pyplot.plot de matplotlib pero en el navegador y con un poco de interactividad.&lt;/p&gt;
&lt;p&gt;El resultado lo podéis visualizar &lt;a href="http://brython.info/gallery/canvas_plot.html"&gt;en este enlace&lt;/a&gt;. El código lo podéis ver viendo el código …&lt;/p&gt;</summary><category term="browser"></category><category term="brython"></category><category term="gráfica"></category><category term="javascript"></category><category term="js"></category><category term="navegador"></category></entry><entry><title>Usando google earth con ayuda de python y pykml (II)</title><link href="http://pybonacci.github.io/2013/02/04/usando-google-earth-con-ayuda-de-python-y-pykml-ii/" rel="alternate"></link><published>2013-02-04T20:02:13+00:00</published><updated>2013-02-04T20:02:13+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2013-02-04:2013/02/04/usando-google-earth-con-ayuda-de-python-y-pykml-ii/</id><summary type="html">&lt;p&gt;Esta es la segunda parte de la entrada 'Usando google earth con ayuda de python y pykml (I)'. En el ejemplo de hoy vamos a ver algo más relacionado con la ciencia que lo visto anteriormente, que no era más que un aburrido ejemplo para introduciros en google earth, kml/kmz y pykml.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Para esta entrada se ha usado numpy 1.6.1, matplotlib 1.1.1rc, netCDF4 1.0.2, pykml 0.1.0, lxml 2.3.2 (es un prerrequisito de pykml) en el notebook de IPython 0.13 corriendo todo sobre python 2.7.3]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Primero importamos una serie de cosas que usaremos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;zipfile&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ZipFile&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;dt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;netCDF4&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;nc&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso vamos a representar …&lt;/p&gt;</summary><category term="gis"></category><category term="google earth"></category><category term="googleearth"></category><category term="kml"></category><category term="kmz"></category><category term="pykml"></category><category term="python"></category><category term="sig"></category></entry><entry><title>Usando google earth con ayuda de python y pykml (I)</title><link href="http://pybonacci.github.io/2013/02/03/usando-google-earth-con-ayuda-de-python-y-pykml-i/" rel="alternate"></link><published>2013-02-03T21:47:19+00:00</published><updated>2013-02-03T21:47:19+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2013-02-03:2013/02/03/usando-google-earth-con-ayuda-de-python-y-pykml-i/</id><summary type="html">&lt;p&gt;El tema de la visualización de datos es extremadamente importante puesto que te ayuda a comprender mejor al información que estás procesando. Si, además, esos datos se pueden ver de forma 'natural' en el medio donde suceden, donde se registran o donde se simulan pues mucho mejor. Por ejemplo, no tiene nada que ver el hecho de mirar por la tele un tornado o el verlo en vivo, de ver a una leona cazando en un documental o verlo en el cráter del Ngorongoro.&lt;/p&gt;
&lt;p&gt;Los sistemas de información geográfica (SIG o GIS por sus sigles en inglés) permiten mostrar información georeferenciada. &lt;a href="http://www.google.com/earth/index.html" target="_blank"&gt;Google Earth&lt;/a&gt; permite ver información georeferenciada permitiendo verlo, además, de forma tridimensional por lo que, para determinados fenómenos, podemos ser conscientes de como se relacionan con su entorno. No es igual a verlo en vivo pero puede ser algo …&lt;/p&gt;</summary><category term="gis"></category><category term="google earth"></category><category term="googleearth"></category><category term="kml"></category><category term="kmz"></category><category term="pykml"></category><category term="sig"></category></entry><entry><title>Presentando «La guía del punto flotante»</title><link href="http://pybonacci.github.io/2013/01/22/presentando-la-guia-del-punto-flotante/" rel="alternate"></link><published>2013-01-22T14:19:13+00:00</published><updated>2013-01-22T14:19:13+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2013-01-22:2013/01/22/presentando-la-guia-del-punto-flotante/</id><summary type="html">&lt;p&gt;Hoy interrumpimos un poco el flujo de artículos sobre Python para presentar &lt;a href="http://puntoflotante.org/" title="La guía del punto flotante"&gt;La guía del punto flotante&lt;/a&gt;, una web con información en formato amistoso y legible sobre la aritmética de punto flotante. Esta es una traducción de &lt;a href="http://floating-point-gui.de/"&gt;&lt;em&gt;The floating point guide&lt;/em&gt;&lt;/a&gt; por Michael Borgwardt y que hemos publicado, igual que la original, junto al código fuente.&lt;/p&gt;
&lt;p style="text-align:center;"&gt;
  &lt;a href="http://puntoflotante.org/"&gt;&lt;img class="aligncenter  wp-image-1528" alt="La guía del punto flotante" src="http://new.pybonacci.org/images/2013/01/2013-01-22-131209_1366x768_scrot.png?w=700" width="560" height="306" srcset="https://pybonacci.org/wp-content/uploads/2013/01/2013-01-22-131209_1366x768_scrot.png 1346w, https://pybonacci.org/wp-content/uploads/2013/01/2013-01-22-131209_1366x768_scrot-300x164.png 300w, https://pybonacci.org/wp-content/uploads/2013/01/2013-01-22-131209_1366x768_scrot-1024x560.png 1024w, https://pybonacci.org/wp-content/uploads/2013/01/2013-01-22-131209_1366x768_scrot-1200x657.png 1200w" sizes="(max-width: 560px) 100vw, 560px" /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;La guía (llamada también «Lo que todo programador debería saber sobre aritmética de punto flotante») ofrece un punto de entrada para aquellas personas que están haciendo operaciones matemáticas con el ordenador y de repente se encuentran con un resultado que no cuadra. En Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;
&lt;span class="mf"&gt;0.30000000000000004&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y se preguntan &lt;a href="https://twitter.com/pOverlord/status/281374749110710272"&gt;«¿qué está haciendo mal Python?»&lt;/a&gt;, cuando resulta que es un «problema» generalizado.&lt;/p&gt;
&lt;p&gt;Después de algunas explicaciones básicas sobre el &lt;a href="http://puntoflotante.org/formats/fp/"&gt;formato de punto flotante&lt;/a&gt; (también llamado de coma flotante …&lt;/p&gt;</summary><category term="coma flotante"></category><category term="punto flotante"></category><category term="python"></category></entry><entry><title>Números aleatorios en Python con NumPy y SciPy</title><link href="http://pybonacci.github.io/2013/01/11/numeros-aleatorios-en-python-con-numpy-y-scipy/" rel="alternate"></link><published>2013-01-11T18:00:31+00:00</published><updated>2013-01-11T18:00:31+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2013-01-11:2013/01/11/numeros-aleatorios-en-python-con-numpy-y-scipy/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este artículo vamos a hacer un repaso de algunos métodos que tenemos para &lt;strong&gt;generar números aleatorios en Python&lt;/strong&gt;. Los números aleatorios son importantísimos en computación: aquí en Pybonacci ya los hemos aplicado en nuestra &lt;a href="http://pybonacci.org/2012/10/18/calculando-cosas-mientras-jugamos-a-la-ruleta/" title="Calculando cosas mientras jugamos a la ruleta"&gt;simulación de Monte Carlo para calcular áreas de polígonos&lt;/a&gt; y en nuestro artículo sobre &lt;a href="http://pybonacci.org/2012/10/31/nuestro-primer-algoritmo-heuristico/" title="Nuestro primer algoritmo heurístico"&gt;algoritmos heurísticos en Python&lt;/a&gt;. Como veremos, NumPy ofrece funciones para generar datos aleatorios simples y algunas distribuciones estadísticas, que luego amplía SciPy.&lt;/p&gt;
&lt;p&gt;Vamos a mencionar sin explicar las distribuciones uniforme y normal, así que si quieres una explicación más detallada te recomiendo que leas nuestro artículo sobre &lt;a href="http://pybonacci.org/2012/04/21/estadistica-en-python-con-scipy/" title="Estadística en Python con SciPy (I)"&gt;estadística en Python con SciPy&lt;/a&gt;. Haremos referencia a él más adelante.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;En esta entrada se han usado python 3.3.0, numpy 1.7.0rc1 y scipy 0.11.0.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;¿Aleatorios?&lt;/h2&gt;
&lt;p&gt;Antes que nada, hay algo importante que tenemos que aclarar. En realidad …&lt;/p&gt;</summary><category term="aleatorio"></category><category term="números aleatorios"></category><category term="python"></category><category term="random"></category></entry><entry><title>Desarrollo dirigido por pruebas en Python (I): Una historia que pasa todos los días</title><link href="http://pybonacci.github.io/2013/01/07/desarrollo-dirigido-por-pruebas-en-python-i-una-historia-que-pasa-todos-los-dias/" rel="alternate"></link><published>2013-01-07T21:00:51+00:00</published><updated>2013-01-07T21:00:51+00:00</updated><author><name>javierjus</name></author><id>tag:pybonacci.github.io,2013-01-07:2013/01/07/desarrollo-dirigido-por-pruebas-en-python-i-una-historia-que-pasa-todos-los-dias/</id><summary type="html">&lt;p&gt;Vamos a iniciar una serie de artículos sobre &lt;a href="http://es.wikipedia.org/wiki/Desarrollo_guiado_por_pruebas"&gt;desarrollo dirigido por pruebas&lt;/a&gt; en Python (&lt;a href="http://en.wikipedia.org/wiki/Test-driven_development"&gt;TDD&lt;/a&gt; en inglés) con el objetivo de acercarlo a científicos e ingenieros. En el primero presentaremos la idea principal del desarrollo dirigido por pruebas, y para ello empezamos una pequeña historia:&lt;/p&gt;
&lt;p&gt;Una empresa de desarrollo de productor de jardinería a medida, GardenTech, tiene un nuevo cliente, el señor Sellers. La reunión de requisitos podría ser algo así:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Ingeniero GardenTech:&lt;/em&gt; Buenos días señor Seller, díganos qué es lo que necesita.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sellers&lt;/em&gt;: Necesito una manera de poder regar mis plantas.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;GT:&lt;/em&gt; Podemos ayudarle, tenemos mucha experiencia en ese campo. ¿En qué ha pensado?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;S:&lt;/em&gt; Tengo 5 macetas, así que me gustaría llevar el agua para allá y echársela.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;GT:&lt;/em&gt; Perfecto, le pondremos a su aparato un agujero grande para que pueda llenarlo de agua y muchos pequeñitos para …&lt;/p&gt;&lt;/blockquote&gt;</summary><category term="BDD"></category><category term="python"></category><category term="TDD"></category><category term="test"></category><category term="testing"></category></entry><entry><title>Meme Python de Año Nuevo 2013</title><link href="http://pybonacci.github.io/2013/01/05/meme-python-de-ano-nuevo-2013/" rel="alternate"></link><published>2013-01-05T11:10:16+00:00</published><updated>2013-01-05T11:10:16+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2013-01-05:2013/01/05/meme-python-de-ano-nuevo-2013/</id><summary type="html">&lt;p&gt;En la primera entrada del año de Pybonacci vamos a «importar» el Meme Python de Año Nuevo. Fue creado en 2009 por Tarek Ziadé, desarrollador Python fundador de la Association Francophone Python y autor de varios libros sobre el lenguaje. Se trata de que copiéis las preguntas y escribáis en vuestros blogs vuestras respuestas. ¡Vamos allá! 🙂&lt;/p&gt;
&lt;h2&gt;1. ¿Cuál es la aplicación, framework o biblioteca Python más interesante que has descubierto en el 2012?&lt;/h2&gt;
&lt;p&gt;Sin duda, el más interesante y el que más ha determinado la forma en la que programo con Python ha sido el notebook de IPython, &lt;a href="http://pybonacci.org/2012/11/02/el-notebook-de-ipython/" title="El notebook de IPython"&gt;del que ya hablamos en el blog&lt;/a&gt;. Además tiene un potencial enorme, hay gente haciendo cosas increíbles con él y está yendo más allá del ecosistema científico. El 2013 va a ser un buen año para IPython 🙂&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;2. ¿Qué nueva técnica de …&lt;/h2&gt;</summary><category term="año nuevo"></category><category term="meme"></category><category term="python"></category></entry><entry><title>Un 2012 de Python científico</title><link href="http://pybonacci.github.io/2012/12/20/un-2012-de-python-cientifico/" rel="alternate"></link><published>2012-12-20T15:05:31+00:00</published><updated>2012-12-20T15:05:31+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-12-20:2012/12/20/un-2012-de-python-cientifico/</id><summary type="html">&lt;p&gt;Primero de todo, lo más importante, ¡¡¡ha nacido Pybonacci!!!! Un blog dedicado a hablar del uso de Python en el ámbito científico y en español. Si no lo conocéis aún, podéis visitarlo en &lt;a href="http://pybonacci.org"&gt;http://pybonacci.org&lt;/a&gt; 🙂&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blog (+Twitter, +Fb, +G+) nacido en marzo de 2012&lt;/li&gt;
&lt;li&gt;Más de 60 artículos publicados&lt;/li&gt;
&lt;li&gt;Más de 30.000 visitas recibidas&lt;/li&gt;
&lt;li&gt;Tres autores (esperamos que aumenten en el 2013)&lt;/li&gt;
&lt;li&gt;Más de 2000 tuits&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Venga, hablando en serio, os resumo lo que ha sido este año. Primero veamos las novedades de la base de lo que es Python en el entorno científico, la trinidad: NumPy, matplotlib y SciPy:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NUMPY&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ha salido la versión 1.6.2 de NumPy y se &lt;a href="https://github.com/numpy/numpy/issues/milestones?state=open&amp;amp;with_issues=yes"&gt;espera que en breve salga la versión 1.7.0 que ahora mismo está en beta&lt;/a&gt;. La versión 1.6.2 de NumPy es compatible con …&lt;/li&gt;&lt;/ul&gt;</summary></entry><entry><title>Creando una animación con matplotlib y ffmpeg</title><link href="http://pybonacci.github.io/2012/12/16/creando-una-animacion-con-matplotlib-y-ffmpeg/" rel="alternate"></link><published>2012-12-16T12:27:36+00:00</published><updated>2012-12-16T12:27:36+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-12-16:2012/12/16/creando-una-animacion-con-matplotlib-y-ffmpeg/</id><summary type="html">&lt;p&gt;En esta nueva entrada vamos a ver una revisión rápida al &lt;a href="http://matplotlib.org/api/animation_api.html"&gt;módulo animation en matplotlib&lt;/a&gt;, disponible desde la versión 1.1 de matplotlib.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Para esta entrada se ha usado matplotlib 1.1.1, numpy 1.6.1, ipython 0.13 sobre python 2.7.3 y &lt;a href="http://ffmpeg.org/"&gt;ffmpeg&lt;/a&gt; como librería externa que usará matplotlib para crear el video de la animación (aunque también puede usar &lt;a href="http://www.mplayerhq.hu/design7/news.html"&gt;mencoder&lt;/a&gt;)] todo ello corriendo en linux. Puede que los usuarios de windows tengan problemas al guardar el video si ffmpeg no está instalado y/o correctamente configurado para que &lt;a href="https://github.com/matplotlib/matplotlib/issues/760"&gt;matplotlib pueda trabajar con ffmpeg&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hay varias formas de hacer una animación usando &lt;a href="http://matplotlib.org/api/animation_api.html#matplotlib.animation.FuncAnimation"&gt;FuncAnimation&lt;/a&gt;, &lt;a href="http://matplotlib.org/api/animation_api.html#matplotlib.animation.ArtistAnimation"&gt;ArtistAnimation&lt;/a&gt; y/o &lt;a href="http://matplotlib.org/api/animation_api.html#matplotlib.animation.TimedAnimation"&gt;TimedAnimation&lt;/a&gt;. Las dos primeras formas son clases que heredan de la tercera mientras que la tercera hereda de la clase base &lt;a href="http://matplotlib.org/api/animation_api.html#matplotlib.animation.Animation"&gt;Animation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para este ejemplo de como hacer una animación …&lt;/p&gt;</summary><category term="animación"></category><category term="ffmpeg"></category><category term="ipynb2wp"></category><category term="matplotlib"></category><category term="matplotlib.animation"></category><category term="video"></category></entry><entry><title>Trabajando con recarray</title><link href="http://pybonacci.github.io/2012/12/14/trabajando-con-recarray-3/" rel="alternate"></link><published>2012-12-14T23:40:25+00:00</published><updated>2012-12-14T23:40:25+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-12-14:2012/12/14/trabajando-con-recarray-3/</id><summary type="html">&lt;p&gt;En el artículo de hoy vamos a ver el uso de numpy.recarray (o &lt;a href="http://docs.scipy.org/doc/numpy/user/basics.rec.html"&gt;arrays estructurados&lt;/a&gt;) y las posibilidades que tiene usar record arrays, que no son más que arrays numpy a los que se puede acceder usando atributos y donde podemos usar diferente tipo de dato (int, float, string,...) en cada uno de los campos como si fuera una tabla de una hoja de cálculo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[En esta entrada se ha usado numpy 1.6, ipython 0.13 sobre python 2.7]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Primero de todo importamos lo necesario:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creamos una serie de vectores que serán los que usaremos a posteriori para 'poblar' nuestro recarray.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;persona&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;juanlu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dapid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="s1"&gt;&amp;#39;kiko&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eugenia&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="s1"&gt;&amp;#39;fernando&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;maria&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="s1"&gt;&amp;#39;lorena&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;angel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;tomas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;susana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;sexo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;## &amp;#39;v&amp;#39; para varon y &amp;#39;m&amp;#39; para mujer&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;altura&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;185&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;170 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><category term="ipynb2wp"></category><category term="numpy"></category><category term="numpy.recarray"></category><category term="recarray"></category><category term="record array"></category></entry><entry><title>¿Por qué usar netCDF?</title><link href="http://pybonacci.github.io/2012/12/03/por-que-usar-netcdf/" rel="alternate"></link><published>2012-12-03T08:43:37+00:00</published><updated>2012-12-03T08:43:37+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-12-03:2012/12/03/por-que-usar-netcdf/</id><summary type="html">&lt;p&gt;Primero de todo empezaremos por el principio&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;¿Qué es &lt;a href="http://en.wikipedia.org/wiki/NetCDF"&gt;netCDF&lt;/a&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Es un conjunto de librerías (o bibliotecas) y un formato de datos que son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;auto-descriptivo&lt;/strong&gt; ya que incluye información acerca de los datos contenidos en el fichero netCDF&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;independiente de la plataforma&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;podemos &lt;strong&gt;&lt;em&gt;acceder&lt;/em&gt;&lt;/strong&gt; a un subconjunto de datos del fichero &lt;strong&gt;de forma eficiente&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;permite &lt;strong&gt;&lt;em&gt;agregar&lt;/em&gt; datos&lt;/strong&gt; a un fichero ya existente sin necesidad de copiar los datos ya existentes en el fichero&lt;/li&gt;
&lt;li&gt;puede ser &lt;strong&gt;fácilmente &lt;em&gt;compartido&lt;/em&gt;&lt;/strong&gt; ya que una persona puede escribir mientras varias personas pueden leer el mismo fichero.&lt;/li&gt;
&lt;li&gt;puede ser &lt;strong&gt;&lt;em&gt;archivado&lt;/em&gt;&lt;/strong&gt; ya que las versiones previas siempre estarán soportadas por las nuevas versiones&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Su actual versión es la 4 y permite leer los ficheros creados con versiones anteriores de netCDF, como se ha comentado anteriormente.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.unidata.ucar.edu/software/netcdf/docs/interoperability_hdf5.html"&gt;Además es compatible con un subconjunto de HDF5&lt;/a&gt; (del que hablaremos otro …&lt;/p&gt;</summary><category term="array-oriented"></category><category term="arrays"></category><category term="hdf"></category><category term="hdf5"></category><category term="netcdf"></category><category term="netcdf-4"></category><category term="netcdf4-python"></category></entry><entry><title>Publicando directamente en wordpress.com con python</title><link href="http://pybonacci.github.io/2012/12/02/publicando-directamente-en-wordpress-com-con-python/" rel="alternate"></link><published>2012-12-02T02:05:11+00:00</published><updated>2012-12-02T02:05:11+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-12-02:2012/12/02/publicando-directamente-en-wordpress-com-con-python/</id><summary type="html">&lt;p&gt;Este es un notebook de prueba publicado directamente en &lt;a href="http://pybonacci.org"&gt;http://pybonacci.org&lt;/a&gt; (aunque se puede publicar en cualquier plataforma &lt;a href="http://wordpress.org/"&gt;wordpress&lt;/a&gt; que tenga habilitado &lt;a href="http://codex.wordpress.org/XML-RPC_Support"&gt;xml-rpc&lt;/a&gt;) desde un ipython notebook (ipynb de ahora en adelante).&lt;/p&gt;
&lt;p&gt;Este ipynb consta de celdas con código python, celdas con texto formateado con markdown, con output de celdas con imágenes que se muestran 'inline', con celdas que enlazan a videos de youtube, con celdas que enlazan a imágenes online, con celdas que enlazan a páginas web,...&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Las celdas con código python se mostrarán como si en wordpress se envolviese el código con las etiquetas
        :::python&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Las celdas con texto formateado con markdown se transforman a html con la ayuda de &lt;a href="http://pypi.python.org/pypi/Markdown/"&gt;http://pypi.python.org/pypi/Markdown/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Los output de imágenes (por ejemplo, matplotlib) se suben directamente a wordpress como imágenes y se enlazan en la entrada&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Los …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><category term="ipynb"></category><category term="ipython"></category><category term="notebook"></category><category term="prueba de concepto"></category><category term="XML-RPC"></category></entry><entry><title>Juego de la vida de Conway con Python usando NumPy</title><link href="http://pybonacci.github.io/2012/11/30/juego-de-la-vida-de-conway-con-python-usando-numpy/" rel="alternate"></link><published>2012-11-30T10:26:06+00:00</published><updated>2012-11-30T10:26:06+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-11-30:2012/11/30/juego-de-la-vida-de-conway-con-python-usando-numpy/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En esta breve entrada vamos a ver cómo implementar el &lt;strong&gt;juego de la vida de Conway&lt;/strong&gt; en Python utilizando arrays de NumPy. El &lt;a href="http://es.wikipedia.org/wiki/Juego_de_la_vida"&gt;juego de la vida&lt;/a&gt; es posiblemente el ejemplo más famoso de &lt;a href="http://es.wikipedia.org/wiki/Aut%C3%B3mata_celular"&gt;autómata celular&lt;/a&gt;, es decir, &lt;em&gt;un sistema dinámico que evoluciona en pasos discretos&lt;/em&gt;. Actualmente están siendo estudiados en profundidad por Stephen Wolfram (creador además del software Mathematica) y tienen aplicaciones en campos tan diversos como la biología o la economía.&lt;/p&gt;
&lt;p&gt;Aunque existe una implementación muy inteligente en Rosetta Code utilizando objetos &lt;code&gt;defaultdict&lt;/code&gt;, voy a escribir la mía propia porque me parece «visualmente» más intuitiva. Para eso me voy a basar en el algoritmo seguido por Michael Gertelman[I] para escribir el programa en una línea usando APL (!) y en una entrada de Peter Collingridge[II], basada a su vez en la primera, donde aplica la misma …&lt;/p&gt;</summary><category term="autómatas celulares"></category><category term="matplotlib.animation"></category><category term="numpy"></category><category term="python"></category></entry><entry><title>Análisis Cluster (II): Clasificación no supervisada mediante clasificación jerárquica aglomerativa</title><link href="http://pybonacci.github.io/2012/11/19/analisis-cluster-ii-clasificacion-no-supervisada-mediante-clasificacion-jerarquica-aglomerativa/" rel="alternate"></link><published>2012-11-19T23:47:13+00:00</published><updated>2012-11-19T23:47:13+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-11-19:2012/11/19/analisis-cluster-ii-clasificacion-no-supervisada-mediante-clasificacion-jerarquica-aglomerativa/</id><summary type="html">&lt;p&gt;(Este es el segundo capítulo de la mini-serie de artículos sobre análisis cluster que estamos haciendo en pybonacci, si todavía &lt;a href="http://pybonacci.org/2012/11/18/analisis-cluster-i-introduccion/"&gt;no has leído el artículo inicial échale un ojo ahora&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Como vimos anteriormente, existen diferentes formas de hacer clustering y, como también comentamos anteriormente, una de las más habituales es el clustering jerárquico.&lt;/p&gt;
&lt;p&gt;El clustering jerárquico asociativo pretende, partiendo de m observaciones, ir encontrado agrupaciones de forma jerarquizada. Para ello, primero busca similitudes entre las observaciones y después procura asociar en grupos o 'clusters' las observaciones que se encuentran 'más cercanas' o presentan mayor similitud.&lt;/p&gt;
&lt;p&gt;Si os acordáis, en el &lt;a href="http://pybonacci.org/2012/11/18/analisis-cluster-i-introduccion/"&gt;primer capítulo de esta mini-serie&lt;/a&gt;, entrecomillamos la palabra ‘similitud’. Vamos a ver qué significa esto de similitud en general y en nuestro ejemplo concreto (ver &lt;a href="http://pybonacci.org/2012/11/18/analisis-cluster-i-introduccion/"&gt;capítulo anterior&lt;/a&gt; de la serie para conocer el ejemplo). Dependiendo del problema concreto necesitaremos asociar …&lt;/p&gt;</summary><category term="agrupamiento clusters"></category><category term="ai"></category><category term="aprendizaje automático"></category><category term="aprendizaje no supervisado"></category><category term="clasificación clustering"></category><category term="ia"></category><category term="inteligencia artificial"></category><category term="machine learning"></category><category term="scipy"></category><category term="scipy.cluster"></category><category term="scipy.spatial"></category><category term="unsupervised learning"></category></entry><entry><title>Análisis cluster (I): Introducción</title><link href="http://pybonacci.github.io/2012/11/18/analisis-cluster-i-introduccion/" rel="alternate"></link><published>2012-11-18T21:39:39+00:00</published><updated>2012-11-18T21:39:39+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-11-18:2012/11/18/analisis-cluster-i-introduccion/</id><summary type="html">&lt;p&gt;Vamos a empezar una mini-serie de artículos sobre clasificación no supervisada que dividiré, en principio, en tres capítulos. En este primer capítulo no vamos a ver nada de python (oooooohhhhh) pero creo que es necesario dividirlo así para no hacerlos excesivamente pesados y largos y para introducir un poco la teoría de forma muy somera. ¿Vamos al lío?&lt;/p&gt;
&lt;p&gt;Una de las actividades más propias del ser humano consiste en clasificar ‘cosas’ en clases o categorías (¡¡nos encanta etiquetar!!). Esto nos permite simplificar la inmensa cantidad de información que nos está llegando en todo momento:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clase baja, media y alta&lt;/li&gt;
&lt;li&gt;Líquido, sólido, gaseoso (y plasma, y condensado de Bosé-Einstein, y...)&lt;/li&gt;
&lt;li&gt;Friki, flipado, raro, geek, normal,...&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lo largo de todo el texto de esta mini-serie usaré términos tanto en español como en inglés puesto que, normalmente, la terminología anglosajona es también …&lt;/p&gt;</summary><category term="agrupamiento clusters"></category><category term="ai"></category><category term="aprendizaje automático"></category><category term="aprendizaje no supervisado"></category><category term="artificial intelligence"></category><category term="clasificación clustering"></category><category term="ia"></category><category term="inteligencia artificial"></category><category term="machine learning"></category><category term="scipy.cluster"></category><category term="scipy.spatial"></category><category term="unsupervised learning"></category></entry><entry><title>Videos interesantes de la PyConCa 2012</title><link href="http://pybonacci.github.io/2012/11/14/videos-interesantes-de-la-pyconca-2012/" rel="alternate"></link><published>2012-11-14T22:51:02+00:00</published><updated>2012-11-14T22:51:02+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-11-14:2012/11/14/videos-interesantes-de-la-pyconca-2012/</id><summary type="html">&lt;p&gt;A pure python genetic algorithms framework&lt;/p&gt;
&lt;p&gt;&lt;span class="videobox"&gt;
                &lt;iframe width="640" height="390"
                    src='https://www.youtube.com/embed/YYDdBv430sU'
                    frameborder='0' webkitAllowFullScreen mozallowfullscreen
                    allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Dancing with big data: Disco + inferno&lt;/p&gt;
&lt;p&gt;&lt;span class="videobox"&gt;
                &lt;iframe width="640" height="390"
                    src='https://www.youtube.com/embed/D3VFq97NhEk'
                    frameborder='0' webkitAllowFullScreen mozallowfullscreen
                    allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Integrating geocode data with python&lt;/p&gt;
&lt;p&gt;&lt;span class="videobox"&gt;
                &lt;iframe width="640" height="390"
                    src='https://www.youtube.com/embed/MhsbivEDTds'
                    frameborder='0' webkitAllowFullScreen mozallowfullscreen
                    allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Science and python: retrospective of a (mostly) successful decade&lt;/p&gt;
&lt;p&gt;&lt;span class="videobox"&gt;
                &lt;iframe width="640" height="390"
                    src='https://www.youtube.com/embed/F4rFuIb1Ie4'
                    frameborder='0' webkitAllowFullScreen mozallowfullscreen
                    allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Server log analysis with pandas&lt;/p&gt;
&lt;p&gt;&lt;span class="videobox"&gt;
                &lt;iframe width="640" height="390"
                    src='https://www.youtube.com/embed/ZOpR3P-jAno'
                    frameborder='0' webkitAllowFullScreen mozallowfullscreen
                    allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Writing self-documenting scientific code using physical quantities&lt;/p&gt;
&lt;p&gt;&lt;span class="videobox"&gt;
                &lt;iframe width="640" height="390"
                    src='https://www.youtube.com/embed/QcN_Hmh88mA'
                    frameborder='0' webkitAllowFullScreen mozallowfullscreen
                    allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Statistical Data Exchange and Publishing - an introduction to SDMX and DSPL&lt;/p&gt;
&lt;p&gt;&lt;span class="videobox"&gt;
                &lt;iframe width="640" height="390"
                    src='https://www.youtube.com/embed/WSB_xv0t384'
                    frameborder='0' webkitAllowFullScreen mozallowfullscreen
                    allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;MongoDB and Gene databases&lt;/p&gt;
&lt;p&gt;&lt;span class="videobox"&gt;
                &lt;iframe width="640" height="390"
                    src='https://www.youtube.com/embed/L4ITLOWQhjY'
                    frameborder='0' webkitAllowFullScreen mozallowfullscreen
                    allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;El &lt;a href="http://pyvideo.org/category/25/pycon-ca-2012"&gt;resto de videos aquí&lt;/a&gt;.&lt;/p&gt;</summary><category term="videos pycon pyconca"></category></entry><entry><title>Visualizando líneas de corriente en Python con matplotlib</title><link href="http://pybonacci.github.io/2012/11/13/visualizando-lineas-de-corriente-en-python-con-matplotlib/" rel="alternate"></link><published>2012-11-13T23:26:29+00:00</published><updated>2012-11-13T23:26:29+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-11-13:2012/11/13/visualizando-lineas-de-corriente-en-python-con-matplotlib/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Hoy vamos a ver cómo representar diagramas de corriente en Python usando matplotlib. Este tipo de diagramas aparecen en Mecánica de Fluidos para visualizar el movimiento del fluido que estamos estudiando.&lt;/p&gt;
&lt;p&gt;Hace unos días nos hicimos eco en Pybonacci de que se había liberado matplotlib 1.2.0, que introducía entre otras cosas &lt;a href="http://matplotlib.org/users/whats_new.html#streamplot"&gt;soporte para Python 3&lt;/a&gt; y &lt;a href="http://matplotlib.org/users/whats_new.html#streamplot"&gt;la nueva función &lt;code&gt;streamplot&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" width="550"&gt;
  &lt;p&gt;
    Liberado matplotlib 1.2.0, con soporte para Python 3 (al fin) y muchas cosas nuevas más &lt;a href="http://t.co/5Kg4hFm7"&gt;http://t.co/5Kg4hFm7&lt;/a&gt; ¡Difusión!
  &lt;/p&gt;

  &lt;p&gt;
    &amp;mdash; Pybonacci (@Pybonacci) &lt;a href="https://twitter.com/Pybonacci/statuses/266798396654882816"&gt;November 9, 2012&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Así que vamos a estrenar las entradas con Python 3.3 y matplotlib 1.2 con un bonito ejemplo de Aerodinámica básica 🙂 El ejemplo y las gráficas están basados en la página de la Wikipedia sobre &lt;a href="http://en.wikipedia.org/wiki/Potential_flow_around_a_circular_cylinder"&gt;flujo potencial alrededor de un cilindro circular&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;En esta entrada se han usado python …&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</summary><category term="matplotlib"></category><category term="python"></category><category term="python 3"></category></entry><entry><title>El Pybofractal, el nuevo logo de Pybonacci</title><link href="http://pybonacci.github.io/2012/11/07/el-pybofractal-el-nuevo-logo-de-pybonacci/" rel="alternate"></link><published>2012-11-07T10:32:17+00:00</published><updated>2012-11-07T10:32:17+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-11-07:2012/11/07/el-pybofractal-el-nuevo-logo-de-pybonacci/</id><summary type="html">&lt;p&gt;El otro día estaba yo en el Twitter de Pybonacci para variar, y se me ocurrió que tal vez la imagen que representaba al blog en aquel momento, aunque había valido para salir del paso unos meses, no era demasiado significativa y que necesitábamos un cambio:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" width="550"&gt;
  &lt;p&gt;
    ¿Quién más piensa que necesitamos un logo con un poco más de personalidad? =)
  &lt;/p&gt;

  &lt;p&gt;
    &amp;mdash; Pybonacci (@Pybonacci) &lt;a href="https://twitter.com/Pybonacci/statuses/251580091757387776"&gt;September 28, 2012&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Algunas personas se interesaron y Kiko sugirió entonces usar fractales, concretamente una &lt;strong&gt;rosa de Fibonacci&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" width="550"&gt;
  &lt;p&gt;
    &lt;a href="https://twitter.com/Pybonacci"&gt;@Pybonacci&lt;/a&gt; &lt;a href="https://twitter.com/python_majibu"&gt;@python_majibu&lt;/a&gt; &lt;a href="https://twitter.com/nessa_los"&gt;@nessa_los&lt;/a&gt; [k] un fractal de fibonacci &lt;a href="http://t.co/viWGKLii"&gt;http://t.co/viWGKLii&lt;/a&gt; &lt;a href="http://t.co/CvPaR8Mu"&gt;http://t.co/CvPaR8Mu&lt;/a&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &amp;mdash; Pybonacci (@Pybonacci) &lt;a href="https://twitter.com/Pybonacci/statuses/251707454637883392"&gt;September 28, 2012&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ayer vi en los borradores del blog que había vuelto a rescatar el tema, y dije: ¡esta es mi oportunidad! Así que después de un par de iteraciones, Kiko dio con una idea genial: ¿por qué no generar el logo …&lt;/p&gt;</summary><category term="fibonacci"></category><category term="fractales"></category><category term="logo"></category><category term="pybonacci"></category><category term="python"></category></entry><entry><title>Hoy celebramos nuestro artículo número…</title><link href="http://pybonacci.github.io/2012/11/04/hoy-celebramos-nuestro-articulo-numero/" rel="alternate"></link><published>2012-11-04T22:32:34+00:00</published><updated>2012-11-04T22:32:34+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-11-04:2012/11/04/hoy-celebramos-nuestro-articulo-numero/</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fibo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fibo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fibo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ya hemos llegado al artículo número &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fibo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>El notebook de IPython</title><link href="http://pybonacci.github.io/2012/11/02/el-notebook-de-ipython/" rel="alternate"></link><published>2012-11-02T17:52:30+00:00</published><updated>2012-11-02T17:52:30+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-11-02:2012/11/02/el-notebook-de-ipython/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Ya hablamos en su momento de &lt;a href="http://pybonacci.org/2012/07/02/introduccion-a-ipython-mucho-mas-que-un-interprete-de-python/" title="Introducción a IPython: mucho más que un intérprete de Python"&gt;IPython, un intérprete de Python&lt;/a&gt; con multitud de características avanzadas que lo hacían indispensable para ejecutar sesiones interactivas. Hoy vamos a continuar con lo que habíamos dejado a medias, y vamos a dedicar un artículo al &lt;a href="http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html"&gt;notebook de IPython&lt;/a&gt;, una herramienta que está verdaderamente revolucionando la manera en que se utiliza Python en ámbitos científicos y conferencias sobre el lenguaje, como se ha demostrado en la reciente &lt;a href="http://nyc2012.pydata.org/"&gt;PyData NYC 2012&lt;/a&gt; que se ha celebrado en Nueva York (recuerda que en Pybonacci hemos seleccionado un &lt;a href="http://pybonacci.org/2012/10/31/recopilacion-del-pydata-nyc-2012/" title="Recopilación del PyData NYC 2012"&gt;resumen de charlas de la PyData NYC 2012&lt;/a&gt;).&lt;/p&gt;
&lt;blockquote class="twitter-tweet" width="550"&gt;
  &lt;p lang="en" dir="ltr"&gt;
    Biggest PyData winner: IPython notebook by a landslide. Everyone seems to be using it. Can't wait to try to teach &lt;a href="https://twitter.com/swcarpentry"&gt;@swcarpentry&lt;/a&gt; with it.
  &lt;/p&gt;

  &lt;p&gt;
    &amp;mdash; Richard T. Guy (@richardtguy84) &lt;a href="https://twitter.com/richardtguy84/status/262289566009016320"&gt;October 27, 2012&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet" width="550"&gt;
  &lt;p lang="en" dir="ltr"&gt;
    Getting ready for &lt;a href="https://twitter.com/hashtag/pydata?src=hash"&gt;#pydata&lt;/a&gt; = Online Python Tutor on the &lt;a href="https://twitter.com/hashtag/ipython?src=hash"&gt;#ipython&lt;/a&gt; notebook …&lt;/p&gt;&lt;/blockquote&gt;</summary><category term="ipython"></category><category term="notebook"></category><category term="python"></category><category term="video"></category><category term="web"></category></entry><entry><title>Recopilación del PyData NYC 2012</title><link href="http://pybonacci.github.io/2012/10/31/recopilacion-del-pydata-nyc-2012/" rel="alternate"></link><published>2012-10-31T17:24:32+00:00</published><updated>2012-10-31T17:24:32+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-10-31:2012/10/31/recopilacion-del-pydata-nyc-2012/</id><summary type="html">&lt;p&gt;Francesc Alted: &lt;a href="http://pytables.org/docs/PyData2012-NYC.pdf"&gt;PyTables: An on-disk binary data container, query engine and computational kernel.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stefan van der Walt: &lt;a href="http://nbviewer.ipython.org/url/mentat.za.net/numpy/pydata/pydata2012_nyc_numpy.ipynb"&gt;An introduction to numpy: the notebook version.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jake Vanderplas: &lt;a href="http://jakevdp.github.com/mpl_tutorial/"&gt;Matplotlib tutorial.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jake Vanderplas: &lt;a href="http://astroml.github.com/sklearn_tutorial/"&gt;Tutorial: Machine learning for astrophysics with scikit-learn.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thomas Wiecki: &lt;a href="http://www.slideshare.net/twiecki/pydata12-upload-14912969"&gt;Simulated Algorithmic Trading with Zipline: Backtesting, Statistics, and Optimization.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thomas Wiecki: &lt;a href="http://nbviewer.ipython.org/3962843/"&gt;Simulated Algorithmic Trading with Zipline: Backtesting, Statistics, and Optimization (notebook).&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;David Cournapeau: &lt;a href="https://github.com/pydata/pydata2012/blob/master/database_python/slides.pdf"&gt;Database and python: Database for the scientist.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stefan Urbánek: &lt;a href="https://speakerdeck.com/stiivi/business-intelligence-in-python"&gt;Bussiness intelligence in python.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Skipper Seabold: &lt;a href="http://jseabold.net/presentations/seabold_pydata2012.html#slide1"&gt;Statsmodels &amp;amp; Patsy.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andrew Montalenti: &lt;a href="https://speakerdeck.com/amontalenti/web-crawling-and-metadata-extraction-in-python"&gt;Web crawling &amp;amp; metadata with python.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andrew Montalenti: &lt;a href="https://speakerdeck.com/amontalenti/just-enough-nlp-with-python"&gt;Just enough NLP with python.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stephen Diehl: &lt;a href="https://speakerdeck.com/sdiehl/blaze-next-generation-numpy"&gt;Blaze: Next generation Numpy.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Andy Terrel: &lt;a href="http://t.co/KsM7kdGk"&gt;MPI (notebooks).&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Chang She: &lt;a href="https://github.com/changhiskhan/talks/tree/master/pydata2012"&gt;Timeseries with pandas (notebooks).&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Travis Oliphant: &lt;a href="http://www.slideshare.net/teoliphant/pydata-introduction"&gt;PyData introduction.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Travis Oliphant: &lt;a href="http://www.slideshare.net/teoliphant/numba-lightning"&gt;Numba: NumPy-aware dynamic Python compiler (Lightning Talk).&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Didier Deshommes: &lt;a href="https://github.com/dfdeshom/pydata-slides/blob/master/index.rst"&gt;Wikipedia indexing and analysis.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gilad Lotan: &lt;a href="http://www.slideshare.net/giladlotan/pydata-gilad-networkxupload"&gt;Networkx and Gephi tutorial.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[actualización]&lt;/p&gt;
&lt;p&gt;Los &lt;a href="http://vimeo.com/channels/pydata/videos/sort:plays/format:thumbnail"&gt;vídeos están disponibles en …&lt;/a&gt;&lt;/p&gt;</summary><category term="pydata"></category><category term="pydata2012nyc"></category><category term="pydatanyc"></category></entry><entry><title>Nuestro primer algoritmo heurístico</title><link href="http://pybonacci.github.io/2012/10/31/nuestro-primer-algoritmo-heuristico/" rel="alternate"></link><published>2012-10-31T06:00:42+00:00</published><updated>2012-10-31T06:00:42+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-10-31:2012/10/31/nuestro-primer-algoritmo-heuristico/</id><summary type="html">&lt;p&gt;Normalmente, cuando se trata de optimizar 'algo' se pueden usar diferentes aproximaciones.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La primera sería el uso de algoritmos de búsqueda exhaustivos como la fuerza bruta. Estos algoritmos nos dan la solución exacta pero si el &lt;a href="http://en.wikipedia.org/wiki/Combinatorial_explosion"&gt;espacio de búsqueda es muy amplio el tiempo de cálculo necesario puede ser inabordable&lt;/a&gt; (explosión combinatoria).&lt;/li&gt;
&lt;li&gt;Otra aproximación, que es la que veremos hoy, sería el uso de algoritmos &lt;a href="http://es.wikipedia.org/wiki/Heur%C3%ADstica_%28inform%C3%A1tica%29"&gt;heurísticos&lt;/a&gt;. La palabra heurística viene del griego y vendría a significar algo así como 'relativo a la búsqueda'  (recordad, &lt;a href="http://es.wikipedia.org/wiki/%C2%A1Eureka!"&gt;eureka significa 'lo he encontrado' y tiene el mismo origen etimológico&lt;/a&gt;). Estos algoritmos sacrifican la exactitud de la solución en favor del tiempo de respuesta, es decir, intentamos obtener soluciones lo suficientemente buenas con un tiempo de respuesta corto o aceptable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vamos a proponer un problema sencillo y lo vamos a resolver de forma aproximada usando …&lt;/p&gt;</summary><category term="algoritmos"></category><category term="búsqueda en escalada"></category><category term="heurística"></category><category term="hill-climbing"></category><category term="optimización"></category><category term="python"></category></entry><entry><title>Usando el GPS sin perdernos (usando pyproj)</title><link href="http://pybonacci.github.io/2012/10/27/usando-el-gps-sin-perdernos-usando-pyproj/" rel="alternate"></link><published>2012-10-27T03:31:55+00:00</published><updated>2012-10-27T03:31:55+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-10-27:2012/10/27/usando-el-gps-sin-perdernos-usando-pyproj/</id><summary type="html">&lt;p&gt;Como todos sabéis, la tierra no es una esfera perfecta ya que su forma es irregular y sus polos están achatados. Esto complica la vida en muchos ámbitos de la vida como, por ejemplo, conocer una posición sobre la superficie terrestre con el menor error posible.&lt;/p&gt;
&lt;p&gt;Está bien, Houston, tenemos un problema. Vamos a ver una serie de conceptos básicos, vamos a plantear un problema y lo vamos a resolver con la ayuda de nuestro lenguaje de programación preferido.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Para este artículo se ha usado python 2.7.2 y pyproj 1.9.2]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conceptos básicos&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;La tierra no es esférica (ni plana, como algunos creen aun), ya lo sabemos (algunos). Tampoco tiene una forma regular por lo que no existe una única definición de la forma de la tierra. Dependiendo de la zona del mundo en que nos encontremos …&lt;/p&gt;</summary><category term="cartografía"></category><category term="geografía"></category><category term="gps"></category><category term="mapeo"></category><category term="mapping"></category><category term="proj"></category><category term="proj.4"></category><category term="pyproj"></category></entry><entry><title>Cómo resolver ecuaciones algebraicas en Python con SciPy</title><link href="http://pybonacci.github.io/2012/10/25/como-resolver-ecuaciones-algebraicas-en-python-con-scipy/" rel="alternate"></link><published>2012-10-25T15:07:59+00:00</published><updated>2012-10-25T15:07:59+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-10-25:2012/10/25/como-resolver-ecuaciones-algebraicas-en-python-con-scipy/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este artículo vamos a utilizar las rutinas de búsqueda de raíces ya disponibles en el módulo &lt;a href="http://docs.scipy.org/doc/scipy/reference/optimize.html#root-finding"&gt;&lt;code&gt;scipy.optimize&lt;/code&gt;&lt;/a&gt; para &lt;strong&gt;resolver ecuaciones algebraicas con Python&lt;/strong&gt;. Ya vimos hace tiempo &lt;a href="http://pybonacci.org/2012/03/28/como-encontrar-el-minimo-de-una-funcion-usando-scipy/" title="¿Cómo encontrar el mínimo de una función usando scipy?"&gt;cómo encontrar el mínimo de una función con SciPy&lt;/a&gt;, y también &lt;a href="http://pybonacci.org/2012/04/18/ecuaciones-no-lineales-metodo-de-biseccion-y-metodo-de-newton-en-python/" title="Ecuaciones no lineales: método de bisección y método de Newton en Python"&gt;cómo implementar los métodos de la bisección y de Newton en Python&lt;/a&gt;. Ahora, además, exploraremos el caso de &lt;strong&gt;sistemas de ecuaciones&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;En esta entrada se ha usado python 2.7.3, numpy 1.6.2 y scipy 0.11.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Ejemplo básico: métodos de Brent y de Newton&lt;/h2&gt;
&lt;p&gt;Aunque el método de la bisección es muy conocido porque conceptualmente es muy sencillo de entender, nos vamos a olvidar de él y vamos a utilizar en su lugar el &lt;strong&gt;método de Brent&lt;/strong&gt;, que viene implementado en SciPy en la función &lt;a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.brentq.html"&gt;&lt;code&gt;scipy.optimize.brentq&lt;/code&gt;&lt;/a&gt;, ya que &lt;a href="http://docs.scipy.org/doc/scipy/reference/tutorial/optimize.html#scalar-functions"&gt;según la documentación&lt;/a&gt; es la mejor …&lt;/p&gt;</summary><category term="ecuaciones no lineales"></category><category term="python"></category><category term="scipy"></category><category term="scipy.optimize"></category></entry><entry><title>Calculando cosas mientras jugamos a la ruleta</title><link href="http://pybonacci.github.io/2012/10/18/calculando-cosas-mientras-jugamos-a-la-ruleta/" rel="alternate"></link><published>2012-10-18T20:50:20+00:00</published><updated>2012-10-18T20:50:20+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-10-18:2012/10/18/calculando-cosas-mientras-jugamos-a-la-ruleta/</id><summary type="html">&lt;p&gt;Hoy vamos a tratar una serie de simulaciones que deben su nombre al lujoso casino de Monte Carlo y a la capacidad de la ruleta de comportarse como un generador de números aleatorios. Vamos a ver varios ejemplos que ilustran el cálculo aproximado de áreas y del número $pi$ mediante una simulación Monte Carlo.&lt;/p&gt;
&lt;p&gt;En primer lugar vamos a calcular un área considerando el siguiente problema: Tenemos un recuadro que mide 10 km de lado y dentro de este recuadro tenemos un polígono de lados irregulares que, por la razón que sea, no sabemos cuanto ocupa, es decir, cuál es su área.&lt;/p&gt;
&lt;p&gt;Para resolver este problema de forma aproximada vamos a usar &lt;a href="http://pybonacci.org/2012/09/20/buscando-esa-playa-en-la-isla-a-mediodia-usando-shapely/"&gt;shapely&lt;/a&gt;, además de los omnipresentes numpy y matplotlib. Empezamos importando todo lo que necesitamos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;shapely.geometry&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Polygon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><category term="monte carlo"></category><category term="montecarlo"></category><category term="números aleatorios"></category><category term="pi"></category><category term="python"></category><category term="shapely"></category></entry><entry><title>El salto de Felix Baumgartner en Python</title><link href="http://pybonacci.github.io/2012/10/15/el-salto-de-felix-baumgartner-en-python/" rel="alternate"></link><published>2012-10-15T17:40:29+00:00</published><updated>2012-10-15T17:40:29+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-10-15:2012/10/15/el-salto-de-felix-baumgartner-en-python/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Supongo que todos estáis al tanto de la hazaña de &lt;a href="http://en.wikipedia.org/wiki/Felix_Baumgartner"&gt;Felix Baumgartner&lt;/a&gt;, el hombre que ha saltado desde una altura de más de 120000 pies desde un globo, convirtiéndose en el hombre que más alto ha saltado y el que ha alcanzado la mayor velocidad sin ayuda mecánica como parte de la &lt;a href="http://www.redbullstratos.com/"&gt;misión Red Bull Stratos&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En Pybonacci somos &lt;em&gt;tan&lt;/em&gt; frikis, que vamos a visualizar el salto supersónico de Baumgartner como mejor se nos da: con Python 😉&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: Esto es un artículo recreativo que he escrito en un par de horas y he hecho unas cuantas suposiciones que no tienen porqué coincidir con la realidad. Tómese esto en cuenta a la hora de valorar los resultados.&lt;/p&gt;
&lt;h2&gt;Formulación del problema&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: Esta es la parte aburrida. Las gráficas están más abajo 🙂&lt;/p&gt;
&lt;p&gt;La ecuación diferencial que gobierna el movimiento en caída …&lt;/p&gt;</summary><category term="Baumgartner"></category><category term="EDOs"></category><category term="python"></category><category term="stratos"></category></entry><entry><title>Funciones definidas a trozos con arrays de NumPy</title><link href="http://pybonacci.github.io/2012/10/10/funciones-definidas-a-trozos-con-arrays-de-numpy/" rel="alternate"></link><published>2012-10-10T22:16:47+00:00</published><updated>2012-10-10T22:16:47+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-10-10:2012/10/10/funciones-definidas-a-trozos-con-arrays-de-numpy/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Hoy vamos a ver cómo crear &lt;strong&gt;funciones definidas a trozos&lt;/strong&gt; que manejen arrays de NumPy. Seguro que todos conocéis este tipo de funciones, pero a la hora de crearlas en NumPy me encontré con un par de obstáculos en el camino que me gustaría compartir con vosotros.&lt;/p&gt;
&lt;p&gt;Como ya sabéis, las funciones definidas a trozos son ubicuas en matemáticas y se utilizan cuando queremos ensamblar varias funciones en una sola. Vamos a ver cómo construirlas en Python utilizando la función &lt;a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.piecewise.html"&gt;&lt;code&gt;numpy.piecewise&lt;/code&gt;&lt;/a&gt; y vamos a revisar un par de conceptos sobre comparación de arrays e indexación avanzada utilizando valores booleanos. Esto último suena un poco a magia negra pero ya veréis cómo no es para tanto 😛&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;En esta entrada se ha usado python 2.7.3 y numpy 1.6.2.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Funciones definidas a trozos&lt;/h2&gt;
&lt;p&gt;La función de NumPy …&lt;/p&gt;</summary><category term="arrays"></category><category term="numpy"></category><category term="piecewise"></category><category term="python"></category></entry><entry><title>Análisis de componentes principales con python</title><link href="http://pybonacci.github.io/2012/10/08/analisis-de-componentes-principales-con-python/" rel="alternate"></link><published>2012-10-08T18:41:45+00:00</published><updated>2012-10-08T18:41:45+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-10-08:2012/10/08/analisis-de-componentes-principales-con-python/</id><summary type="html">&lt;p&gt;Esta entrada también se podría haber llamado:&lt;/p&gt;
&lt;p&gt;'Reducción de la dimensión'&lt;/p&gt;
&lt;p&gt;'Comprimiendo imágenes usando análisis de componentes principales y python'&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Para la siguiente entrada se ha usado python 2.7.2, numpy 1.6.1, matplotlib 1.1.0 y sklearn 0.10&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;El análisis de componentes principales (PCA, por sus siglas en inglés, Principal Component Analysis) es una técnica que trata de reducir el número de dimensiones (número de variables) de un conjunto de datos intentando, a su vez, conservar la mayor cantidad de información. Es una técnica extremadamente útil como análisis exploratorio de datos (exploratory data analysis, pongo algunos términos en inglés porque a veces pueden resultar extraños en castellano), cuando se tiene demasiada información (muchas dimensiones, variables) y no se puede analizar correctamente la información. &lt;a href="http://www.amazon.com/Principal-Component-Analysis-Statistics-ebook/dp/B003YFJ6U8"&gt;Se ha usado de forma exitosa para encontrar patrones, determinar 'outliers', compresión …&lt;/a&gt;&lt;/p&gt;</summary><category term="acp"></category><category term="analisis de componentes principales"></category><category term="aprendizaje automático"></category><category term="dimensionality reduction"></category><category term="Estadística"></category><category term="machine learning"></category><category term="pca"></category><category term="principal component analysis"></category><category term="python"></category><category term="reducción de dimensiones"></category><category term="scikit-learn"></category><category term="singular value decomposition"></category><category term="sklearn"></category><category term="svd"></category></entry><entry><title>La importancia de inspeccionar los datos</title><link href="http://pybonacci.github.io/2012/10/05/la-importancia-de-inspeccionar-los-datos/" rel="alternate"></link><published>2012-10-05T19:43:39+00:00</published><updated>2012-10-05T19:43:39+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-10-05:2012/10/05/la-importancia-de-inspeccionar-los-datos/</id><summary type="html">&lt;p&gt;Muchas veces, cuando analizo datos, se me cuelan datos erróneos que me llevan a dolores de cabeza posteriores. Para evitar o minimizar esto, una buena práctica consiste en realizar una representación previa de esos datos para ver si los resultados posteriores son coherentes. Un buen ejercicio para entender la importancia de esto es echarle un ojo al &lt;a href="http://es.wikipedia.org/wiki/Cuarteto_de_Anscombe"&gt;cuarteto de Anscombe&lt;/a&gt;. En el siguiente script se representa el cuarteto de Anscombe y sus principales estadísticos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ans_x_I&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;13.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;9.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;11.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="mf"&gt;14.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;12.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;7.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;ans_y_I&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;8.04&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.95&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;7.58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;8.81&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;8.33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="mf"&gt;9.96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;7.24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;10.84&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.82&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5.68&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;ans_x_II&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;10.0 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><category term="Charlas Ted"></category><category term="Estadística"></category><category term="Francis Anscombe"></category><category term="Hans Rosling"></category><category term="representación"></category><category term="Ted"></category><category term="Ted talks"></category><category term="video"></category><category term="visualización"></category></entry><entry><title>Lanzando proyectiles (con ayuda de vpython)</title><link href="http://pybonacci.github.io/2012/10/02/lanzando-proyectiles-con-ayuda-de-vpython/" rel="alternate"></link><published>2012-10-02T22:31:24+00:00</published><updated>2012-10-02T22:31:24+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-10-02:2012/10/02/lanzando-proyectiles-con-ayuda-de-vpython/</id><summary type="html">&lt;p&gt;La mayoría de vosotros habréis resuelto el típico problema del lanzamiento de un proyectil que describe una trayectoria parabólica. Las &lt;a href="http://es.wikipedia.org/wiki/Movimiento_parab%C3%B3lico"&gt;ecuaciones que describen el movimiento&lt;/a&gt; son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vector posición&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$x = v_{0x} t + x_0$&lt;/p&gt;
&lt;p&gt;$y = -frac{1}{2} g t^{2} + v_{0y} t + y_0$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vector velocidad&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$v_x = v_{0x}$ con $v_{0x} = v_0 cos alpha$&lt;/p&gt;
&lt;p&gt;$v_y = -g t + v_{0y}$ con $v_{0y} = v_0 sin alpha$&lt;/p&gt;
&lt;p&gt;Hoy vamos a intentar resolverlo de forma gráfica con la ayuda de python y &lt;a href="http://www.vpython.org/index.html"&gt;vpython&lt;/a&gt;. La biblioteca vpython une python con una librería gráfica 3D de forma que, como vamos a ver, hacer &lt;a href="http://www.vpython.org/contents/docs/visual/index.html"&gt;animaciones 3D sencillas&lt;/a&gt; se convierte en un juego.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;visual&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;vs&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="c1"&gt;## valores iniciales (modifícalos bajo tu responsabilidad)&lt;/span&gt;
&lt;span class="n"&gt;v0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="c1"&gt;## v en m/s&lt;/span&gt;
&lt;span class="n"&gt;alfa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="c1"&gt;## ángulo en grados&lt;/span&gt;
&lt;span class="n"&gt;vel_fotogramas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="c1"&gt;## la velocidad del video&lt;/span&gt;
&lt;span class="c1"&gt;## Constantes&lt;/span&gt;
&lt;span class="n"&gt;g …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><category term="cinemática"></category><category term="física"></category><category term="movimiento parabólico"></category><category term="python"></category><category term="vpython"></category></entry><entry><title>Transformada de Fourier discreta en Python con SciPy</title><link href="http://pybonacci.github.io/2012/09/29/transformada-de-fourier-discreta-en-python-con-scipy/" rel="alternate"></link><published>2012-09-29T23:43:37+00:00</published><updated>2012-09-29T23:43:37+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-09-29:2012/09/29/transformada-de-fourier-discreta-en-python-con-scipy/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este artículo vamos a ver &lt;strong&gt;cómo calcular la transformada de Fourier discreta&lt;/strong&gt; (o DFT) de una señal en Python utilizando la &lt;strong&gt;transformada rápida de Fourier&lt;/strong&gt; (o FFT) implementada en SciPy. El análisis de Fourier es la herramienta fundamental en procesamiento de señales y resulta útil en otras áreas como en la resolución de ecuaciones diferenciales o en el tratamiento de imágenes.&lt;/p&gt;
&lt;p&gt;&lt;ins datetime="2012-10-02T13:51:56+00:00"&gt;&lt;strong&gt;Nota&lt;/strong&gt;: Puedes &lt;a href="http://nbviewer.ipython.org/3804365/"&gt;ver el artículo en forma de notebook de IPython&lt;/a&gt; mediante la herramienta nbviewer.&lt;/ins&gt;&lt;/p&gt;
&lt;p&gt;La transformada rápida de Fourier o FFT es en realidad una familia de algoritmos muy eficientes ($O(n \log n)$) para calcular la DFT de una señal discreta, de los cuales el más utilizado es el algoritmo de Cooley-Tukey. Este es el que está implementado en SciPy a través de las subrutinas FFTPACK, escritas en FORTRAN 77, y es el que vamos …&lt;/p&gt;</summary><category term="fft"></category><category term="fftpack"></category><category term="python"></category><category term="scipy"></category></entry><entry><title>Buscando esa playa en la isla a mediodía (usando Shapely)</title><link href="http://pybonacci.github.io/2012/09/20/buscando-esa-playa-en-la-isla-a-mediodia-usando-shapely/" rel="alternate"></link><published>2012-09-20T20:38:59+00:00</published><updated>2012-09-20T20:38:59+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-09-20:2012/09/20/buscando-esa-playa-en-la-isla-a-mediodia-usando-shapely/</id><summary type="html">&lt;p&gt;Hay un cuento de Julio Cortazar titulado 'la isla a mediodía' en el cual el protagonista, asistente de vuelo, se queda maravillado con una isla en el mar Egeo que sobrevuela a menudo gracias a su trabajo.&lt;/p&gt;
&lt;p&gt;Bien, imaginemos por un rato que somos el protagonista del cuento, Marini se llama, que en lugar de sobrevolar el Egeo estamos sobre el Mediterráneo, que la isla es Mallorca en lugar de ser una de las perlas griegas y que sobrevolamos la isla de noroeste a sudeste. Cada vez que pasamos nos quedamos fascinados con esa isla y en especial con una playa que vemos cuando llegamos a la isla.&lt;/p&gt;
&lt;p&gt;¿Cómo podemos adivinar cual es esa cala?, ¿cómo podemos conocer el tamaño de la isla?, ¿cómo podemos saber el perímetro de la costa la cual nos gustaría recorrer en bicicleta en nuestras …&lt;/p&gt;</summary><category term="gis"></category><category term="polígono"></category><category term="python"></category><category term="shapely"></category><category term="shp"></category><category term="sig"></category></entry><entry><title>Repaso a la EuroScipy 2012</title><link href="http://pybonacci.github.io/2012/09/17/repaso-a-la-euroscipy-2012/" rel="alternate"></link><published>2012-09-17T08:27:34+00:00</published><updated>2012-09-17T08:27:34+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-09-17:2012/09/17/repaso-a-la-euroscipy-2012/</id><summary type="html">&lt;p&gt;Como todos sabéis, hace un par de semanas se celebró la &lt;a href="http://www.euroscipy.org/conference/euroscipy2012"&gt;Euroscipy 2012 con mucho material interesante que repasar&lt;/a&gt;. Voy a hablar de los que tienen algo de material para poder juzgar sobre algo.&lt;/p&gt;
&lt;p&gt;Tutoriales básicos para científicos (o no):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.euroscipy.org/talk/6563"&gt;Introduction to python for scientist&lt;/a&gt; (&lt;a href="http://www.euroscipy.org/file/9018?vid=download"&gt;material del curso&lt;/a&gt;): Le he echado un ojo por encima y me parece un buen curso para empezar en el mundo python&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.euroscipy.org/talk/6573"&gt;Scientific plotting with matplotlib&lt;/a&gt; (&lt;a href="http://webloria.loria.fr/~rougier/teaching/matplotlib/"&gt;Curso&lt;/a&gt; y &lt;a href="https://github.com/rougier/scipy-lecture-notes/tree/euroscipy-2012/intro/matplotlib"&gt;código del curso&lt;/a&gt;): El curso está genial para ver matplotlib por encima, donde todo se ve con ejemplos y donde la documentación completa de cada una de las cosas que se usan la tienes disponible a un click. Si el inglés no es lo tuyo puedes echarle un ojo a nuestro tutorial de matplotlib (&lt;a href="http://pybonacci.org/tag/tutorial-matplotlib-pyplot/"&gt;en el blog&lt;/a&gt; o todo junto &lt;a href="http://new.pybonacci.org/images/2012/08/tutorial-de-matplotlib-pyplotv0-1-201208311.pdf"&gt;en pdf&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.euroscipy.org/talk/6578"&gt;Introducción a la computación científica …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><category term="acikit-learn"></category><category term="cython"></category><category term="euroscipy"></category><category term="matplotlib"></category><category term="numexpr"></category><category term="numpy"></category><category term="opengl"></category><category term="scipy"></category><category term="timeseries"></category><category term="visvis"></category></entry><entry><title>Calculando cuantiles con python</title><link href="http://pybonacci.github.io/2012/09/14/calculando-cuantiles-con-python/" rel="alternate"></link><published>2012-09-14T05:59:40+00:00</published><updated>2012-09-14T05:59:40+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-09-14:2012/09/14/calculando-cuantiles-con-python/</id><summary type="html">&lt;p&gt;Como sabiamente dice la wikipedia, los cuantiles son &lt;a href="http://es.wikipedia.org/wiki/Medidas_de_posici%C3%B3n_no_central"&gt;medidas de posición no central&lt;/a&gt; que permiten conocer otros puntos característicos de la distribución. El cuantil de orden &lt;em&gt;p&lt;/em&gt; de una distribución (con 0 &amp;lt; p &amp;lt; 1) es el valor de la variable $x_p$ que marca un corte de modo que una proporción p de valores de la población es menor o igual que $x_p$. Por ejemplo, el cuantil de orden 0.36 dejaría un 36% de valores por debajo y el cuantil de orden 0.50 se corresponde con la &lt;a href="http://es.wikipedia.org/wiki/Mediana_%28estad%C3%ADstica%29" title="Mediana (estadística)"&gt;mediana&lt;/a&gt; de la distribución.&lt;/p&gt;
&lt;p&gt;Vale, esto es un resumen de la teoría, pero vayamos a practicar un poco con nuestras amadas herramientas (en este caso numpy 1.6.1, matplotlib 1.1.1rc, scipy 0.9.0 y ipython 0.12.1 sobre python 2.7.3).&lt;/p&gt;
&lt;p&gt;Iniciamos haciendo lo siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><category term="cuantiles"></category><category term="cuartiles"></category><category term="deciles"></category><category term="numpy"></category><category term="percentil"></category><category term="percentiles"></category><category term="scipy.stats"></category><category term="scoreatpercentile"></category></entry><entry><title>Creación de documentos con Docutils y reST</title><link href="http://pybonacci.github.io/2012/09/11/creacion-de-documentos-con-docutils-y-rest/" rel="alternate"></link><published>2012-09-11T13:14:52+00:00</published><updated>2012-09-11T13:14:52+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-09-11:2012/09/11/creacion-de-documentos-con-docutils-y-rest/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Hoy vamos a ver una introducción a cómo &lt;strong&gt;crear documentos&lt;/strong&gt; utilizando &lt;strong&gt;Docutils&lt;/strong&gt; y el lenguaje de marcado &lt;strong&gt;reStructuredText&lt;/strong&gt;, o simplemente &lt;strong&gt;reST&lt;/strong&gt;. &lt;a href="http://docutils.sourceforge.net/"&gt;El proyecto Docutils&lt;/a&gt; nació en la década de los años 2000 como parte del esfuerzo para &lt;a href="http://docutils.sourceforge.net/docs/ref/rst/introduction.html#history"&gt;mejorar la documentación del lenguaje Python&lt;/a&gt;, y en los últimos años tanto el lenguaje reST como las herramientas para procesarlo se han convertido en una manera excelente no sólo de documentar proyectos en Python, sino también en otros lenguajes o para escribir documentos que nada tienen que ver con la programación.&lt;/p&gt;
&lt;p&gt;Docutils es compatible con Python 2.4 en adelante y funciona en Windows, Mac OS X y Linux. Para instalarlo en cualquiera de estos sistemas operativos, no tienes más que seguir el procedimiento habitual para instalar paquetes Python:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Descargar el código fuente desde &lt;a href="http://sourceforge.net/projects/docutils/files/docutils/"&gt;la web de Docutils&lt;/a&gt; y extraerlo.&lt;/li&gt;
&lt;li&gt;Escribir desde …&lt;/li&gt;&lt;/ol&gt;</summary><category term="documentación"></category><category term="docutils"></category><category term="python"></category><category term="rest"></category></entry><entry><title>Matrópolis</title><link href="http://pybonacci.github.io/2012/09/03/matropolis/" rel="alternate"></link><published>2012-09-03T23:23:58+00:00</published><updated>2012-09-03T23:23:58+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-09-03:2012/09/03/matropolis/</id><summary type="html">&lt;p&gt;Aquí siempre andamos trasteando con código. Para relajar un poco el lado técnico del blog hoy os traemos una frikada que sabemos os gustará. Ya lo puso Juanlu hace unos días por nuestro twitter pero si no lo has visto aún, aquí lo tienes: "Matropolis: Científicos del mundo uníos (también conocido como las guerras Matlab/Python".&lt;/p&gt;
&lt;p&gt;&lt;span class="videobox"&gt;
                &lt;iframe width="640" height="390"
                    src='https://www.youtube.com/embed/1lBeungEnx4'
                    frameborder='0' webkitAllowFullScreen mozallowfullscreen
                    allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;No pretendemos tener razón, pero &lt;a href="http://guillemborrell.es/blog/carta-abierta-a-mathworks/"&gt;sí daros razones&lt;/a&gt; 😉&lt;/p&gt;
&lt;p&gt;Saludos.&lt;/p&gt;</summary><category term="Entretenimiento"></category></entry><entry><title>Manual de introducción a matplotlib.pyplot (IX): Miscelánea</title><link href="http://pybonacci.github.io/2012/08/30/manual-de-introduccion-a-matplotlib-pyplot-ix-miscelanea/" rel="alternate"></link><published>2012-08-30T16:18:55+00:00</published><updated>2012-08-30T16:18:55+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-08-30:2012/08/30/manual-de-introduccion-a-matplotlib-pyplot-ix-miscelanea/</id><summary type="html">&lt;p&gt;Esto pretende ser un tutorial del módulo pyplot de la librería matplotlib. El tutorial lo dividiremos de la siguiente forma (que podrá ir cambiando a medida que vayamos avanzando).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/14/manual-de-introduccion-a-matplotlib-pyplot-i/" title="Manual de introducción a matplotlib.pyplot (I): Primeros pasos"&gt;Primeros pasos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/19/manual-de-introduccion-a-matplotlib-pyplot-ii-creando-y-manejando-ventanas-y-configurando-la-sesion/" title="Manual de introducción a matplotlib.pyplot (II): Creando y manejando ventanas y configurando la sesión"&gt;Creando ventanas, manejando ventanas y configurando la sesión&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/25/manual-de-introduccion-a-matplotlib-pyplot-iii-configuracion-del-grafico/" title="Manual de introducción a matplotlib.pyplot (III): Configuración del gráfico"&gt;Configuración del gráfico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/06/04/manual-de-introduccion-a-matplotlib-pyplot-iv-tipos-de-grafico-i/" title="Manual de introducción a matplotlib.pyplot (IV): Tipos de gráfico (I)"&gt;Tipos de gráfico I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/06/23/manual-de-introduccion-a-matplotlib-pyplot-v-tipos-de-grafico-ii/" title="Manual de introducción a matplotlib.pyplot (V): Tipos de gráfico (II)"&gt;Tipos de gráfico II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/07/01/manual-de-introduccion-a-matplotlib-pyplot-vi-tipos-de-grafico-iii/" title="Manual de introducción a matplotlib.pyplot (VI): Tipos de gráfico (III)"&gt;Tipos de gráfico III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/07/29/manual-de-introduccion-a-matplotlib-pyplot-vii-tipos-de-grafico-iv/" title="Manual de introducción a matplotlib.pyplot (VII): Tipos de gráfico (IV)"&gt;Tipos de gráfico IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/08/24/manual-de-introduccion-a-matplotlib-pyplot-viii-texto-y-anotaciones/" title="Manual de introducción a matplotlib.pyplot (VIII): Texto y anotaciones"&gt;Texto y anotaciones (arrow, annotate, table, text...)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Herramientas estadísticas (acorr, cohere, csd, psd, specgram, spy, xcorr, ...)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Eventos e interactividad (connect, disconnect, ginput, waitforbuttonpress...)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://pybonacci.org/2012/08/30/manual-de-introduccion-a-matplotlib-pyplot-ix-miscelanea/" title="Manual de introducción a matplotlib.pyplot (IX): Miscelánea"&gt;Miscelánea&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;[Para este tutorial se ha usado python 2.7.1, ipython 0.11, numpy 1.6.1 y matplotlib 1.1.0 ]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[DISCLAIMER: Muchos de los gráficos que vamos a representar no tienen ningún sentido físico y los resultados solo pretenden mostrar el uso de la librería].&lt;/p&gt;
&lt;p&gt;En todo momento supondremos que se ha iniciado la sesión y …&lt;/p&gt;</summary><category term="matplotlib"></category><category term="matplotlib.pyplot"></category><category term="pyplot"></category><category term="tutorial matplotlib.pyplot"></category></entry><entry><title>The amazing Spyder, man!!!</title><link href="http://pybonacci.github.io/2012/08/28/the-amazing-spyder-man/" rel="alternate"></link><published>2012-08-28T18:11:06+00:00</published><updated>2012-08-28T18:11:06+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-08-28:2012/08/28/the-amazing-spyder-man/</id><summary type="html">&lt;p&gt;Spyder es la abreviación de Scientific PYthon Development EnviRonment. Según la documentación oficial, Spyder es un potente entorno de desarrollo interactivo para Python con edición avanzada, ‘testeo’ interactivo y capacidades de introspección y depuración (debugging) y, esto es lo que nos interesa, un entorno de computación numérica gracias al soporte de IPython y de populares librerías como numpy, scipy y matplotlib (todas conocidas ya por aquí).&lt;/p&gt;
&lt;p&gt;Se puede instalar tanto en Linux como en Windows (y en Mac para los amantes de Alcatraz). En el siguiente enlace podéis ver &lt;a href="http://pythonhosted.org/spyder/installation.html"&gt;documentación para la instalación y los requerimientos&lt;/a&gt; previos para poder instalarlo.&lt;/p&gt;
&lt;p&gt;En un vistazo general podemos ver que es muy adaptable a nuestras necesidades (o manías) permitiendo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;definir accesos rápidos,&lt;/li&gt;
&lt;li&gt;Gestionar el PYTHONPATH de manera visual&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="pythonpath" src="http://pybonacci.org/images/2012/08/pythonpath.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Acceso a la documentación de las librerías más importantes (Numpy, Scipy, Matplotlib,...) desde la ayuda …&lt;/li&gt;&lt;/ul&gt;</summary><category term="IDEs"></category><category term="python"></category><category term="spyder"></category><category term="spyderlib"></category></entry><entry><title>Manual de introducción a matplotlib.pyplot (VIII): Texto y anotaciones</title><link href="http://pybonacci.github.io/2012/08/24/manual-de-introduccion-a-matplotlib-pyplot-viii-texto-y-anotaciones/" rel="alternate"></link><published>2012-08-24T20:19:21+00:00</published><updated>2012-08-24T20:19:21+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-08-24:2012/08/24/manual-de-introduccion-a-matplotlib-pyplot-viii-texto-y-anotaciones/</id><summary type="html">&lt;p&gt;Esto pretende ser un tutorial del módulo pyplot de la librería matplotlib. El tutorial lo dividiremos de la siguiente forma (que podrá ir cambiando a medida que vayamos avanzando).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/14/manual-de-introduccion-a-matplotlib-pyplot-i/" title="Manual de introducción a matplotlib.pyplot (I): Primeros pasos"&gt;Primeros pasos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/19/manual-de-introduccion-a-matplotlib-pyplot-ii-creando-y-manejando-ventanas-y-configurando-la-sesion/" title="Manual de introducción a matplotlib.pyplot (II): Creando y manejando ventanas y configurando la sesión"&gt;Creando ventanas, manejando ventanas y configurando la sesión&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/25/manual-de-introduccion-a-matplotlib-pyplot-iii-configuracion-del-grafico/" title="Manual de introducción a matplotlib.pyplot (III): Configuración del gráfico"&gt;Configuración del gráfico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/06/04/manual-de-introduccion-a-matplotlib-pyplot-iv-tipos-de-grafico-i/" title="Manual de introducción a matplotlib.pyplot (IV): Tipos de gráfico (I)"&gt;Tipos de gráfico I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/06/23/manual-de-introduccion-a-matplotlib-pyplot-v-tipos-de-grafico-ii/" title="Manual de introducción a matplotlib.pyplot (V): Tipos de gráfico (II)"&gt;Tipos de gráfico II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/07/01/manual-de-introduccion-a-matplotlib-pyplot-vi-tipos-de-grafico-iii/" title="Manual de introducción a matplotlib.pyplot (VI): Tipos de gráfico (III)"&gt;Tipos de gráfico III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/07/29/manual-de-introduccion-a-matplotlib-pyplot-vii-tipos-de-grafico-iv/" title="Manual de introducción a matplotlib.pyplot (VII): Tipos de gráfico (IV)"&gt;Tipos de gráfico IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://pybonacci.org/2012/08/24/manual-de-introduccion-a-matplotlib-pyplot-viii-texto-y-anotaciones/" title="Manual de introducción a matplotlib.pyplot (VIII): Texto y anotaciones"&gt;Texto y anotaciones (arrow, annotate, table, text...)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Herramientas estadísticas (acorr, cohere, csd, psd, specgram, spy, xcorr, ...)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Eventos e interactividad (connect, disconnect, ginput, waitforbuttonpress...)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/08/30/manual-de-introduccion-a-matplotlib-pyplot-ix-miscelanea/" title="Manual de introducción a matplotlib.pyplot (IX): Miscelánea"&gt;Miscelánea&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;[Para este tutorial se ha usado python 2.7.1, ipython 0.11, numpy 1.6.1 y matplotlib 1.1.0 ]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[DISCLAIMER: Muchos de los gráficos que vamos a representar no tienen ningún sentido físico y los resultados solo pretenden mostrar el uso de la librería].&lt;/p&gt;
&lt;p&gt;En todo momento supondremos que se ha iniciado la sesión y …&lt;/p&gt;</summary><category term="matplotlib"></category><category term="matplotlib.pyplot"></category><category term="pyplot"></category><category term="tutorial matplotlib.pyplot"></category></entry><entry><title>Probando numba: compilador para Python basado en LLVM</title><link href="http://pybonacci.github.io/2012/08/21/probando-numba-compilador-para-python-basado-en-llvm/" rel="alternate"></link><published>2012-08-21T15:28:03+00:00</published><updated>2012-08-21T15:28:03+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-08-21:2012/08/21/probando-numba-compilador-para-python-basado-en-llvm/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Hace unos días &lt;a href="http://continuum.io/our-team.html#travis"&gt;Travis E. Oliphant&lt;/a&gt;, creador de NumPy e importante contribuidor de SciPy entre otras muchas cosas, anunciaba &lt;a href="https://twitter.com/teoliphant/status/235789560678858752"&gt;en su Twitter&lt;/a&gt; y &lt;a href="http://technicaldiscovery.blogspot.com.es/2012/08/numba-and-llvmpy.html"&gt;en su blog&lt;/a&gt; la liberación de &lt;a href="http://numba.pydata.org/"&gt;numba 0.1&lt;/a&gt;, un proyecto que &lt;strong&gt;pretende ser el mejor compilador orientado a arrays&lt;/strong&gt; del mundo, como puedes ver en la presentación que dio en la conferencia SciPy 2012 celebrada en Austin, Texas (&lt;a href="http://youtu.be/WYi1cymszqY"&gt;vídeo&lt;/a&gt; y &lt;a href="http://www.slideshare.net/teoliphant/numba"&gt;diapositivas&lt;/a&gt;).&lt;/p&gt;
&lt;blockquote class="twitter-tweet" width="550"&gt;
  &lt;p&gt;
    Just released Numba 0.1. Thanks Jon Riehl from Resilient Science for all the hard work. Binaries to follow. &lt;a href="http://t.co/o80rn7By"&gt;http://t.co/o80rn7By&lt;/a&gt;
  &lt;/p&gt;

  &lt;p&gt;
    &amp;mdash; Travis Oliphant (@teoliphant) &lt;a href="https://twitter.com/teoliphant/statuses/235789560678858752"&gt;August 15, 2012&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Aunque el proyecto está en una fase bastante precaria todavía y hay unos cuantos fallos pendientes de solucionar todavía, hemos hecho algunas pruebas y los resultados son impresionantes. Vamos a hablar un poco de numba y a explicar cómo puedes probarlo tú mismo.&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;Motivación&lt;/h2&gt;
&lt;p&gt;Ya …&lt;/p&gt;</summary><category term="cython"></category><category term="numba"></category><category term="python"></category><category term="rendimiento"></category></entry><entry><title>Cómo leer y escribir datos en archivos con NumPy</title><link href="http://pybonacci.github.io/2012/08/17/como-leer-y-escribir-datos-en-archivos-con-numpy/" rel="alternate"></link><published>2012-08-17T23:21:55+00:00</published><updated>2012-08-17T23:21:55+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-08-17:2012/08/17/como-leer-y-escribir-datos-en-archivos-con-numpy/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Hoy vamos a ver rápidamente &lt;strong&gt;cómo leer datos desde un archivo con NumPy&lt;/strong&gt; y también &lt;strong&gt;cómo escribirlos&lt;/strong&gt;. Es algo a lo que tendremos que recurrir con mucha frecuencia, ya sea porque hemos recogido nuestros datos de un experimento y los tenemos almacenados en un fichero de texto, porque los hemos recibido por otras fuentes o porque queremos separar lo que es la lógica del programa de los datos con los que opera.&lt;/p&gt;
&lt;p&gt;Ya comentamos hace tiempo &lt;a href="http://pybonacci.org/2012/06/11/como-crear-matrices-en-python-con-numpy/" title="Cómo crear matrices en Python con NumPy"&gt;cómo crear matrices en Python&lt;/a&gt; a partir de listas, utilizando rangos numéricos, etc. Lo bueno que tienen las funciones de NumPy que nos ayudan a desempeñar estas tareas es que no tenemos que preocuparnos por el manejo de ficheros con Python, así que leer o escribir será tan fácil como invocar una función.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;En esta entrada se ha usado python 2.7.3 …&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</summary><category term="archivos"></category><category term="datos"></category><category term="numpy"></category><category term="python"></category></entry><entry><title>Manual de introducción a matplotlib.pyplot (VII): Tipos de gráfico (IV)</title><link href="http://pybonacci.github.io/2012/07/29/manual-de-introduccion-a-matplotlib-pyplot-vii-tipos-de-grafico-iv/" rel="alternate"></link><published>2012-07-29T10:36:08+00:00</published><updated>2012-07-29T10:36:08+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-07-29:2012/07/29/manual-de-introduccion-a-matplotlib-pyplot-vii-tipos-de-grafico-iv/</id><summary type="html">&lt;p&gt;Esto pretende ser un tutorial del módulo pyplot de la librería matplotlib. El tutorial lo dividiremos de la siguiente forma (que podrá ir cambiando a medida que vayamos avanzando).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/14/manual-de-introduccion-a-matplotlib-pyplot-i/" title="Manual de introducción a matplotlib.pyplot (I): Primeros pasos"&gt;Primeros pasos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/19/manual-de-introduccion-a-matplotlib-pyplot-ii-creando-y-manejando-ventanas-y-configurando-la-sesion/" title="Manual de introducción a matplotlib.pyplot (II): Creando y manejando ventanas y configurando la sesión"&gt;Creando ventanas, manejando ventanas y configurando la sesión&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/25/manual-de-introduccion-a-matplotlib-pyplot-iii-configuracion-del-grafico/" title="Manual de introducción a matplotlib.pyplot (III): Configuración del gráfico"&gt;Configuración del gráfico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/06/04/manual-de-introduccion-a-matplotlib-pyplot-iv-tipos-de-grafico-i/" title="Manual de introducción a matplotlib.pyplot (IV): Tipos de gráfico (I)"&gt;Tipos de gráfico I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/06/23/manual-de-introduccion-a-matplotlib-pyplot-v-tipos-de-grafico-ii/" title="Manual de introducción a matplotlib.pyplot (V): Tipos de gráfico (II)"&gt;Tipos de gráfico II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/07/01/manual-de-introduccion-a-matplotlib-pyplot-vi-tipos-de-grafico-iii/" title="Manual de introducción a matplotlib.pyplot (VI): Tipos de gráfico (III)"&gt;Tipos de gráfico III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://pybonacci.org/2012/07/29/manual-de-introduccion-a-matplotlib-pyplot-vii-tipos-de-grafico-iv/" title="Manual de introducción a matplotlib.pyplot (VII): Tipos de gráfico (IV)"&gt;Tipos de gráfico IV&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/08/24/manual-de-introduccion-a-matplotlib-pyplot-viii-texto-y-anotaciones/" title="Manual de introducción a matplotlib.pyplot (VIII): Texto y anotaciones"&gt;Texto y anotaciones (arrow, annotate, table, text...)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Herramientas estadísticas (acorr, cohere, csd, psd, specgram, spy, xcorr, ...)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Eventos e interactividad (connect, disconnect, ginput, waitforbuttonpress...)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/08/30/manual-de-introduccion-a-matplotlib-pyplot-ix-miscelanea/" title="Manual de introducción a matplotlib.pyplot (IX): Miscelánea"&gt;Miscelánea&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;[Para este tutorial se ha usado python 2.7.1, ipython 0.11, numpy 1.6.1, matplotlib 1.1.0, netcdf4-python 0.9.9 y Basemap 1.0.2]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[DISCLAIMER: Muchos de los gráficos que vamos a representar no tienen ningún sentido físico y los resultados solo pretenden mostrar el uso de la librería].&lt;/p&gt;
&lt;p&gt;En todo momento …&lt;/p&gt;</summary><category term="basemap"></category><category term="gráficos"></category><category term="matplotlib"></category><category term="matplotlib.pyplot"></category><category term="netcdf4"></category><category term="pyplot"></category><category term="python"></category><category term="thredds"></category><category term="tutorial matplotlib.pyplot"></category></entry><entry><title>Introducción a IPython: mucho más que un intérprete de Python</title><link href="http://pybonacci.github.io/2012/07/02/introduccion-a-ipython-mucho-mas-que-un-interprete-de-python/" rel="alternate"></link><published>2012-07-02T19:43:16+00:00</published><updated>2012-07-02T19:43:16+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-07-02:2012/07/02/introduccion-a-ipython-mucho-mas-que-un-interprete-de-python/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Hoy ha llegado el momento de hablar de &lt;a href="http://ipython.org/" title="IPython"&gt;IPython&lt;/a&gt;, aprovechando que &lt;a href="http://ipython.org/ipython-doc/rel-0.13/whatsnew/version0.13.html"&gt;acaba de salir la versión 0.13&lt;/a&gt; después de 6 meses de duro trabajo. IPython es un intérprete de Python con unas cuantas características avanzadas que hemos usado desde que empezamos a escribir en el blog y que, sinceramente, si no conoces todavía no sé a qué estás esperando 😛&lt;/p&gt;
&lt;p&gt;Decir que IPython es &lt;em&gt;solo&lt;/em&gt; un intérprete de Python es, no obstante, quedarse muy corto. Actualmente multitud de paquetes utilizan IPython como biblioteca o como intérprete interactivo, siendo el ejemplo más notable el proyecto &lt;a href="http://pybonacci.org/2012/05/06/sage-software-matematico-libre-como-alternativa/" title="Sage: software matemático libre como alternativa"&gt;Sage&lt;/a&gt;. IPython es multiplataforma, es software libre, tiene una enorme comunidad detrás, un desarrollo constante y bien organizado y es extremadamente potente. ¿Qué más se le puede pedir? 🙂&lt;figure id="attachment_681" style="width: 560px" class="wp-caption aligncenter"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Notebook de IPython" src="http://pybonacci.org/images/2012/07/ipy_013_notebook_spectrogram.png"&gt;&lt;/p&gt;
&lt;h2&gt;Breve historia&lt;/h2&gt;
&lt;p&gt;IPython comenzó en 2001 de la mano de &lt;a href="http://fperez.org/personal.html"&gt;Fernando Pérez&lt;/a&gt;, investigador colombiano, cuando completaba su …&lt;/p&gt;</summary><category term="editores"></category><category term="IDEs"></category><category term="ipython"></category><category term="python"></category></entry><entry><title>Manual de introducción a matplotlib.pyplot (VI): Tipos de gráfico (III)</title><link href="http://pybonacci.github.io/2012/07/01/manual-de-introduccion-a-matplotlib-pyplot-vi-tipos-de-grafico-iii/" rel="alternate"></link><published>2012-07-01T13:12:48+00:00</published><updated>2012-07-01T13:12:48+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-07-01:2012/07/01/manual-de-introduccion-a-matplotlib-pyplot-vi-tipos-de-grafico-iii/</id><summary type="html">&lt;p&gt;Esto pretende ser un tutorial del módulo pyplot de la librería matplotlib. El tutorial lo dividiremos de la siguiente forma (que podrá ir cambiando a medida que vayamos avanzando).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/14/manual-de-introduccion-a-matplotlib-pyplot-i/" title="Manual de introducción a matplotlib.pyplot (I): Primeros pasos"&gt;Primeros pasos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/19/manual-de-introduccion-a-matplotlib-pyplot-ii-creando-y-manejando-ventanas-y-configurando-la-sesion/" title="Manual de introducción a matplotlib.pyplot (II): Creando y manejando ventanas y configurando la sesión"&gt;Creando ventanas, manejando ventanas y configurando la sesión&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/25/manual-de-introduccion-a-matplotlib-pyplot-iii-configuracion-del-grafico/" title="Manual de introducción a matplotlib.pyplot (III): Configuración del gráfico"&gt;Configuración del gráfico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/06/04/manual-de-introduccion-a-matplotlib-pyplot-iv-tipos-de-grafico-i/" title="Manual de introducción a matplotlib.pyplot (IV): Tipos de gráfico (I)"&gt;Tipos de gráfico I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/06/23/manual-de-introduccion-a-matplotlib-pyplot-v-tipos-de-grafico-ii/" title="Manual de introducción a matplotlib.pyplot (V): Tipos de gráfico (II)"&gt;Tipos de gráfico II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://pybonacci.org/2012/07/01/manual-de-introduccion-a-matplotlib-pyplot-vi-tipos-de-grafico-iii/" title="Manual de introducción a matplotlib.pyplot (VI): Tipos de gráfico (III)"&gt;Tipos de gráfico III&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/07/29/manual-de-introduccion-a-matplotlib-pyplot-vii-tipos-de-grafico-iv/" title="Manual de introducción a matplotlib.pyplot (VII): Tipos de gráfico (IV)"&gt;Tipos de gráfico IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/08/24/manual-de-introduccion-a-matplotlib-pyplot-viii-texto-y-anotaciones/" title="Manual de introducción a matplotlib.pyplot (VIII): Texto y anotaciones"&gt;Texto y anotaciones (arrow, annotate, table, text...)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Herramientas estadísticas (acorr, cohere, csd, psd, specgram, spy, xcorr, ...)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Eventos e interactividad (connect, disconnect, ginput, waitforbuttonpress...)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/08/30/manual-de-introduccion-a-matplotlib-pyplot-ix-miscelanea/" title="Manual de introducción a matplotlib.pyplot (IX): Miscelánea"&gt;Miscelánea&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;[Para este tutorial se ha usado python 2.7.1, ipython 0.11, numpy 1.6.1 y matplotlib 1.1.0]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[DISCLAIMER: Muchos de los gráficos que vamos a representar no tienen ningún sentido físico y los resultados solo pretenden mostrar el uso de la librería].&lt;/p&gt;
&lt;p&gt;En todo momento supondremos que se ha iniciado la sesión y …&lt;/p&gt;</summary><category term="gráficos"></category><category term="matplotlib"></category><category term="matplotlib.pyplot"></category><category term="pyplot"></category><category term="python"></category><category term="tutorial matplotlib.pyplot"></category></entry><entry><title>Python en Windows: «¡Hola mundo!» en 7 minutos</title><link href="http://pybonacci.github.io/2012/06/27/python-en-windows-hola-mundo-en-7-minutos/" rel="alternate"></link><published>2012-06-27T18:00:42+00:00</published><updated>2012-06-27T18:00:42+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-06-27:2012/06/27/python-en-windows-hola-mundo-en-7-minutos/</id><summary type="html">&lt;h2&gt;Cómo instalar Python en Windows&lt;/h2&gt;
&lt;p&gt;En lugar de escribir un tutorial para todos, este asume dos cosas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eres un usuario de Windows curioso acerca de la programación, y&lt;/li&gt;
&lt;li&gt;Te gustaría instalar el lenguaje de programación Python en tu ordenador con Windows, lanzar el intérprete de Python y ejecutar el clásico programa «¡Hola mundo!».&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si tienes preguntas del tipo «¿Qué es Python y por qué debería instalarlo en mi ordenador con Windows?» lee el principio de &lt;a href="http://pybonacci.org/2012/03/16/introduccion-a-python-para-cientificos-e-ingenieros/" title="Introducción a Python para científicos e ingenieros"&gt;Introducción a Python para científicos e ingenieros&lt;/a&gt;. Y si quieres instalar Python, vuelve.&lt;/p&gt;
&lt;p&gt;¿Ya estás de vuelta? ¿No te habías ido? Vale. Seguimos.&lt;/p&gt;
&lt;p&gt;De la &lt;a href="http://python.org/"&gt;web oficial de Python&lt;/a&gt; podemos descargar directamente un sencillo instalador para poder utilizar Python en Windows.&lt;/p&gt;
&lt;p&gt;¿Listo? Suponiendo que tienes una conexión de banda ancha, ya te quedan menos de siete minutos para tener Python instalado en tu ordenador y …&lt;/p&gt;</summary><category term="instalación"></category><category term="python"></category><category term="windows"></category></entry><entry><title>Revisitando ‘python es lento’: pequeños trucos</title><link href="http://pybonacci.github.io/2012/06/24/revisitando-python-es-lento-pequenos-trucos/" rel="alternate"></link><published>2012-06-24T19:24:39+00:00</published><updated>2012-06-24T19:24:39+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-06-24:2012/06/24/revisitando-python-es-lento-pequenos-trucos/</id><summary type="html">&lt;p&gt;Hace un tiempo &lt;a href="https://www.pybonacci.org/2012/05/01/python-es-lento/"&gt;David os habló sobre acelerar vuestros cálculos hechos con python (si no los has leído aún a qué esperas :-)).&lt;/a&gt; Hoy vamos a revisitar sus textos enfocándonos en pequeñas cositas que podemos hacer sin tener que usar algo que no sea programar en python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Para este tutorial se ha usado python 2.7.1, ipython 0.11, numpy 1.6.1 y numexpr 1.4.2]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[DISCLAIMER: Por favor, no hagáis caso a los tiempos absolutos. Estos valores dependen mucho de lo que uséis para hacer los cálculos (32bits o 64bits, Sistema operativo, procesador,...). He usado distintas máquinas para hacer las pruebas y los resultados están mezclados. Fijaos mejor en las conclusiones.]&lt;/p&gt;
&lt;p&gt;En todo momento supondremos que se ha iniciado la sesión en ipython y se ha hecho&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numexpr&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;ne&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Intenta usar …&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;</summary><category term="numexpr"></category><category term="numpy"></category><category term="performance"></category><category term="python"></category><category term="rendimiento"></category></entry><entry><title>Manual de introducción a matplotlib.pyplot (V): Tipos de gráfico (II)</title><link href="http://pybonacci.github.io/2012/06/23/manual-de-introduccion-a-matplotlib-pyplot-v-tipos-de-grafico-ii/" rel="alternate"></link><published>2012-06-23T10:15:09+00:00</published><updated>2012-06-23T10:15:09+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-06-23:2012/06/23/manual-de-introduccion-a-matplotlib-pyplot-v-tipos-de-grafico-ii/</id><summary type="html">&lt;p&gt;Esto pretende ser un tutorial del módulo pyplot de la librería matplotlib. El tutorial lo dividiremos de la siguiente forma (que podrá ir cambiando a medida que vayamos avanzando).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/14/manual-de-introduccion-a-matplotlib-pyplot-i/" title="Manual de introducción a matplotlib.pyplot (I): Primeros pasos"&gt;Primeros pasos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/19/manual-de-introduccion-a-matplotlib-pyplot-ii-creando-y-manejando-ventanas-y-configurando-la-sesion/" title="Manual de introducción a matplotlib.pyplot (II): Creando y manejando ventanas y configurando la sesión"&gt;Creando ventanas, manejando ventanas y configurando la sesión&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/25/manual-de-introduccion-a-matplotlib-pyplot-iii-configuracion-del-grafico/" title="Manual de introducción a matplotlib.pyplot (III): Configuración del gráfico"&gt;Configuración del gráfico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/06/04/manual-de-introduccion-a-matplotlib-pyplot-iv-tipos-de-grafico-i/" title="Manual de introducción a matplotlib.pyplot (IV): Tipos de gráfico (I)"&gt;Tipos de gráfico I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://pybonacci.org/2012/06/23/manual-de-introduccion-a-matplotlib-pyplot-v-tipos-de-grafico-ii/" title="Manual de introducción a matplotlib.pyplot (V): Tipos de gráfico (II)"&gt;Tipos de gráfico II&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/07/01/manual-de-introduccion-a-matplotlib-pyplot-vi-tipos-de-grafico-iii/" title="Manual de introducción a matplotlib.pyplot (VI): Tipos de gráfico (III)"&gt;Tipos de gráfico III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/07/29/manual-de-introduccion-a-matplotlib-pyplot-vii-tipos-de-grafico-iv/" title="Manual de introducción a matplotlib.pyplot (VII): Tipos de gráfico (IV)"&gt;Tipos de gráfico IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/08/24/manual-de-introduccion-a-matplotlib-pyplot-viii-texto-y-anotaciones/" title="Manual de introducción a matplotlib.pyplot (VIII): Texto y anotaciones"&gt;Texto y anotaciones (arrow, annotate, table, text...)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Herramientas estadísticas (acorr, cohere, csd, psd, specgram, spy, xcorr, ...)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Eventos e interactividad (connect, disconnect, ginput, waitforbuttonpress...)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/08/30/manual-de-introduccion-a-matplotlib-pyplot-ix-miscelanea/" title="Manual de introducción a matplotlib.pyplot (IX): Miscelánea"&gt;Miscelánea&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;[Para este tutorial se ha usado python 2.7.1, ipython 0.11, numpy 1.6.1 y matplotlib 1.1.0]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[DISCLAIMER: Muchos de los gráficos que vamos a representar no tienen ningún sentido físico y los resultados solo pretenden mostrar el uso de la librería].&lt;/p&gt;
&lt;p&gt;En todo momento supondremos que se ha iniciado la sesión y …&lt;/p&gt;</summary><category term="gráficos"></category><category term="matplotlib"></category><category term="matplotlib.pyplot"></category><category term="pyplot"></category><category term="python"></category><category term="tutorial matplotlib.pyplot"></category></entry><entry><title>Presentando Astropy: herramientas básicas para Astronomía y Astrofísica en Python</title><link href="http://pybonacci.github.io/2012/06/20/presentando-astropy-herramientas-basicas-para-astronomia-y-astrofisica-en-python/" rel="alternate"></link><published>2012-06-20T11:30:36+00:00</published><updated>2012-06-20T11:30:36+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-06-20:2012/06/20/presentando-astropy-herramientas-basicas-para-astronomia-y-astrofisica-en-python/</id><summary type="html">&lt;p&gt;Ayer se liberó &lt;a href="http://www.astropy.org/"&gt;Astropy&lt;/a&gt; 0.1, la primera versión de este paquete Python que aspira a unificar las herramientas y utilidades básicas necesarias en &lt;strong&gt;astronomía&lt;/strong&gt; y &lt;strong&gt;astrofísica&lt;/strong&gt;. Puedes leer &lt;a href="http://mail.scipy.org/pipermail/astropy/2012-June/002103.html"&gt;el anuncio&lt;/a&gt; en la lista de correo de Astropy.&lt;figure id="attachment_604" style="width: 560px" class="wp-caption aligncenter"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gráfica con APLpy" src="http://pybonacci.org/images/2012/06/aplpy-plot.png"&gt;&lt;/p&gt;
&lt;p&gt;El lenguaje Python está teniendo bastante impulso en ámbitos científicos durante los últimos años, y uno de los campos donde es bastante activo es en &lt;strong&gt;astronomía&lt;/strong&gt;. El &lt;a href="http://www.astropy.org/vision.html"&gt;proyecto Astropy&lt;/a&gt; nació con el objetivo de incluir los paquetes usados para las tareas más básicas (manejo de imágenes FITS, tablas, coordenadas, ...). No pretende incluir &lt;em&gt;todo&lt;/em&gt; lo que un astrónomo necesita, sino que intenta ser una especie de base común sobre la que construir proyectos más complejos. Es una especie de NumPy de la astronomía.&lt;/p&gt;
&lt;p&gt;Como dicen en la nota, la biblioteca Astropy no está completa todavía, pero la funcionalidad existente ya se puede utilizar …&lt;/p&gt;</summary><category term="astrofísica"></category><category term="astronomía"></category><category term="astropy"></category><category term="foss"></category><category term="python"></category></entry><entry><title>Cómo crear matrices en Python con NumPy</title><link href="http://pybonacci.github.io/2012/06/11/como-crear-matrices-en-python-con-numpy/" rel="alternate"></link><published>2012-06-11T10:19:28+00:00</published><updated>2012-06-11T10:19:28+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-06-11:2012/06/11/como-crear-matrices-en-python-con-numpy/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este breve apunte vamos a ver &lt;strong&gt;cómo crear matrices en Python&lt;/strong&gt; usando la biblioteca NumPy. Para ello, vamos a hacer un repaso rápido de los métodos que ofrece NumPy para crear arrays y matrices.&lt;/p&gt;
&lt;p&gt;Si buscas por Internet encontrarás varias recetas de &lt;a href="http://python.majibu.org/preguntas/1614/como-crear-una-matriz-vacia-en-python-con-listas"&gt;cómo crear una matriz en Python utilizando listas&lt;/a&gt;, es decir, haciendo uso solamente de la biblioteca estándar. Sin embargo, aquí asumimos que vamos a emplear la matriz básicamente para hacer cálculos matemáticos con ella, y por otro lado en nuestro caso no supone un problema añadir NumPy como dependencia porque por unas razones o por otras lo íbamos a necesitar 😉&lt;/p&gt;
&lt;p&gt;Esta entrada es básicamente una recopilación de los &lt;a href="http://docs.scipy.org/doc/numpy/reference/routines.array-creation.html"&gt;métodos listados en la documentación de NumPy&lt;/a&gt;. &lt;del datetime="2012-08-18T07:59:04+00:00"&gt;Otro día veremos&lt;/del&gt;&lt;ins datetime="2012-08-18T08:03:17+00:00"&gt;En este artículo en nuestro blog puedes leer &lt;a title="Cómo leer y escribir datos en archivos con NumPy" href="http://pybonacci.org/2012/08/17/como-leer-y-escribir-datos-en-archivos-con-numpy/"&gt;cómo construir arrays a partir de ficheros externos&lt;/a&gt;.&lt;/ins&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Editado el …&lt;/strong&gt;&lt;/p&gt;</summary><category term="arrays"></category><category term="matrices"></category><category term="numpy"></category><category term="python"></category></entry><entry><title>Álgebra Lineal en Python con NumPy (I): Operaciones básicas</title><link href="http://pybonacci.github.io/2012/06/07/algebra-lineal-en-python-con-numpy-i-operaciones-basicas/" rel="alternate"></link><published>2012-06-07T16:42:30+00:00</published><updated>2012-06-07T16:42:30+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-06-07:2012/06/07/algebra-lineal-en-python-con-numpy-i-operaciones-basicas/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En esta entrada vamos a ver una introducción al Álgebra Lineal en Python con NumPy. En la mayoría de los artículos que hemos escrito hasta ahora en Pybonacci hemos tocado sin mencionarlos conceptos relativos al Álgebra Lineal: sin ir más lejos, el propio manejo de matrices o la norma de vectores. El lenguaje matricial es el punto de partida para una enorme variedad de desarrollos físicos y matemáticos, y por eso le vamos a dedicar un apartado especial para repasar las posibilidades que ofrece el paquete NumPy.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Operaciones básicas&lt;/li&gt;
&lt;li&gt;Sistemas, autovalores y descomposiciones&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;En esta entrada se ha usado python 2.7.3 y numpy 1.6.1 &lt;/strong&gt;&lt;/em&gt;&lt;strong&gt;y es compatible con &lt;/strong&gt;&lt;strong&gt;python 3.2.3&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Arrays y matrices&lt;/h2&gt;
&lt;p&gt;Como ya comentamos hace tiempo en nuestra &lt;a href="http://pybonacci.org/2012/03/16/introduccion-a-python-para-cientificos-e-ingenieros/" title="Introducción a Python para científicos e ingenieros"&gt;introducción a Python&lt;/a&gt;, el paquete NumPy introdujo los arrays N-dimensionales, que no son …&lt;/p&gt;</summary><category term="álgebra lineal"></category><category term="arrays"></category><category term="matrices"></category><category term="numpy"></category><category term="python"></category><category term="vectores"></category></entry><entry><title>Manual de introducción a matplotlib.pyplot (IV): Tipos de gráfico (I)</title><link href="http://pybonacci.github.io/2012/06/04/manual-de-introduccion-a-matplotlib-pyplot-iv-tipos-de-grafico-i/" rel="alternate"></link><published>2012-06-04T18:49:12+00:00</published><updated>2012-06-04T18:49:12+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-06-04:2012/06/04/manual-de-introduccion-a-matplotlib-pyplot-iv-tipos-de-grafico-i/</id><summary type="html">&lt;p&gt;Esto pretende ser un tutorial del módulo pyplot de la librería matplotlib. El tutorial lo dividiremos de la siguiente forma (que podrá ir cambiando a medida que vayamos avanzando).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/14/manual-de-introduccion-a-matplotlib-pyplot-i/" title="Manual de introducción a matplotlib.pyplot (I): Primeros pasos"&gt;Primeros pasos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/19/manual-de-introduccion-a-matplotlib-pyplot-ii-creando-y-manejando-ventanas-y-configurando-la-sesion/" title="Manual de introducción a matplotlib.pyplot (II): Creando y manejando ventanas y configurando la sesión"&gt;Creando ventanas, manejando ventanas y configurando la sesión&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/25/manual-de-introduccion-a-matplotlib-pyplot-iii-configuracion-del-grafico/" title="Manual de introducción a matplotlib.pyplot (III): Configuración del gráfico"&gt;Configuración del gráfico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://pybonacci.org/2012/06/04/manual-de-introduccion-a-matplotlib-pyplot-iv-tipos-de-grafico-i/" title="Manual de introducción a matplotlib.pyplot (IV): Tipos de gráfico (I)"&gt;Tipos de gráfico I&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/06/23/manual-de-introduccion-a-matplotlib-pyplot-v-tipos-de-grafico-ii/" title="Manual de introducción a matplotlib.pyplot (V): Tipos de gráfico (II)"&gt;Tipos de gráfico II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/07/01/manual-de-introduccion-a-matplotlib-pyplot-vi-tipos-de-grafico-iii/" title="Manual de introducción a matplotlib.pyplot (VI): Tipos de gráfico (III)"&gt;Tipos de gráfico III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/07/29/manual-de-introduccion-a-matplotlib-pyplot-vii-tipos-de-grafico-iv/" title="Manual de introducción a matplotlib.pyplot (VII): Tipos de gráfico (IV)"&gt;Tipos de gráfico IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/08/24/manual-de-introduccion-a-matplotlib-pyplot-viii-texto-y-anotaciones/" title="Manual de introducción a matplotlib.pyplot (VIII): Texto y anotaciones"&gt;Texto y anotaciones (arrow, annotate, table, text...)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Herramientas estadísticas (acorr, cohere, csd, psd, specgram, spy, xcorr, ...)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Eventos e interactividad (connect, disconnect, ginput, waitforbuttonpress...)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/08/30/manual-de-introduccion-a-matplotlib-pyplot-ix-miscelanea/" title="Manual de introducción a matplotlib.pyplot (IX): Miscelánea"&gt;Miscelánea&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;[Para este tutorial se ha usado python 2.7.1, ipython 0.11, numpy 1.6.1 y matplotlib 1.1.0]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[DISCLAIMER: Muchos de los gráficos que vamos a representar no tienen ningún sentido físico y los resultados solo pretenden mostrar el uso de la librería].&lt;/p&gt;
&lt;p&gt;En todo momento supondremos que se ha iniciado la sesión y …&lt;/p&gt;</summary><category term="gráficos"></category><category term="matplotlib"></category><category term="matplotlib.pyplot"></category><category term="pyplot"></category><category term="python"></category><category term="tutorial matplotlib.pyplot"></category></entry><entry><title>Pybonacci estrena canal en Youtube</title><link href="http://pybonacci.github.io/2012/06/02/pybonacci-estrena-canal-en-youtube/" rel="alternate"></link><published>2012-06-02T10:54:14+00:00</published><updated>2012-06-02T10:54:14+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-06-02:2012/06/02/pybonacci-estrena-canal-en-youtube/</id><summary type="html">&lt;p&gt;¡Saludos a todos! Hoy os traemos una entrada informativa sobre otro de los horizontes que hemos abierto en Pybonacci. En vista de que a algunos de los que escribimos aquí nos llama la atención la creación de animaciones para la visualización de problemas físicos, ¡hemos creado el &lt;strong&gt;canal de YouTube de Pybonacci!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/user/Pybonacci"&gt;http://www.youtube.com/user/Pybonacci&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ya lleva activo unas semanas, y en él iremos colgando vídeos y animaciones que vayamos creando. De momento podéis ver estas tres animaciones creadas con &lt;a href="/tag/matplotlib"&gt;matplotlib&lt;/a&gt; y &lt;a href="http://ffmpeg.org/"&gt;ffmpeg&lt;/a&gt;. Si quieres iniciarte en matplotlib, ya sabes que puedes empezar por la primera parte de nuestro &lt;a href="http://pybonacci.org/2012/05/14/manual-de-introduccion-a-matplotlib-pyplot-i/" title="Manual de introducción a matplotlib.pyplot (I): Primeros pasos."&gt;manual de introducción a matplotlib&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Péndulo esférico&lt;/h3&gt;
&lt;h3&gt;Péndulo de Foucault&lt;/h3&gt;
&lt;h3&gt;Ecuación del calor&lt;/h3&gt;
&lt;p&gt;Os recordamos que aceptamos sugerencias de todo tipo, vía los comentarios en el blog, &lt;a href="https://twitter.com/Pybonacci"&gt;nuestra cuenta de Twitter&lt;/a&gt;, &lt;a href="http://facebook.com/Pybonacci"&gt;nuestro muro en Facebook&lt;/a&gt; o &lt;a href="https://plus.google.com/104623634006529252977"&gt;nuestro perfil …&lt;/a&gt;&lt;/p&gt;</summary><category term="matplotlib"></category><category term="python"></category><category term="vídeos"></category></entry><entry><title>Manual de introducción a matplotlib.pyplot (III): Configuración del gráfico</title><link href="http://pybonacci.github.io/2012/05/25/manual-de-introduccion-a-matplotlib-pyplot-iii-configuracion-del-grafico/" rel="alternate"></link><published>2012-05-25T20:38:56+00:00</published><updated>2012-05-25T20:38:56+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-05-25:2012/05/25/manual-de-introduccion-a-matplotlib-pyplot-iii-configuracion-del-grafico/</id><summary type="html">&lt;p&gt;Esto pretende ser un tutorial del módulo pyplot de la librería matplotlib. El tutorial lo dividiremos de la siguiente forma (que podrá ir cambiando a medida que vayamos avanzando).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/14/manual-de-introduccion-a-matplotlib-pyplot-i/" title="Manual de introducción a matplotlib.pyplot (I): Primeros pasos"&gt;Primeros pasos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/19/manual-de-introduccion-a-matplotlib-pyplot-ii-creando-y-manejando-ventanas-y-configurando-la-sesion/" title="Manual de introducción a matplotlib.pyplot (II): Creando y manejando ventanas y configurando la sesión"&gt;Creando ventanas, manejando ventanas y configurando la sesión&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://pybonacci.org/2012/05/25/manual-de-introduccion-a-matplotlib-pyplot-iii-configuracion-del-grafico/" title="Manual de introducción a matplotlib.pyplot (III): Configuración del gráfico"&gt;Configuración del gráfico&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/06/04/manual-de-introduccion-a-matplotlib-pyplot-iv-tipos-de-grafico-i/" title="Manual de introducción a matplotlib.pyplot (IV): Tipos de gráfico (I)"&gt;Tipos de gráfico I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/06/23/manual-de-introduccion-a-matplotlib-pyplot-v-tipos-de-grafico-ii/" title="Manual de introducción a matplotlib.pyplot (V): Tipos de gráfico (II)"&gt;Tipos de gráfico II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/07/01/manual-de-introduccion-a-matplotlib-pyplot-vi-tipos-de-grafico-iii/" title="Manual de introducción a matplotlib.pyplot (VI): Tipos de gráfico (III)"&gt;Tipos de gráfico III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/07/29/manual-de-introduccion-a-matplotlib-pyplot-vii-tipos-de-grafico-iv/" title="Manual de introducción a matplotlib.pyplot (VII): Tipos de gráfico (IV)"&gt;Tipos de gráfico IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/08/24/manual-de-introduccion-a-matplotlib-pyplot-viii-texto-y-anotaciones/" title="Manual de introducción a matplotlib.pyplot (VIII): Texto y anotaciones"&gt;Texto y anotaciones (arrow, annotate, table, text...)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Herramientas estadísticas (acorr, cohere, csd, psd, specgram, spy, xcorr, ...)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Eventos e interactividad (connect, disconnect, ginput, waitforbuttonpress...)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/08/30/manual-de-introduccion-a-matplotlib-pyplot-ix-miscelanea/" title="Manual de introducción a matplotlib.pyplot (IX): Miscelánea"&gt;Miscelánea&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;[Para este tutorial se ha usado python 2.7.1, ipython 0.11, numpy 1.6.1 y matplotlib 1.1.0]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[DISCLAIMER: Muchos de los gráficos que vamos a representar no tienen ningún sentido físico y los resultados solo pretenden mostrar el uso de la librería].&lt;/p&gt;
&lt;p&gt;En todo momento supondremos que se ha iniciado la sesión y …&lt;/p&gt;</summary><category term="gráficos"></category><category term="matplotlib"></category><category term="matplotlib.pyplot"></category><category term="pyplot"></category><category term="python"></category><category term="tutorial matplotlib.pyplot"></category></entry><entry><title>Manual de introducción a matplotlib.pyplot (II): Creando y manejando ventanas y configurando la sesión</title><link href="http://pybonacci.github.io/2012/05/19/manual-de-introduccion-a-matplotlib-pyplot-ii-creando-y-manejando-ventanas-y-configurando-la-sesion/" rel="alternate"></link><published>2012-05-19T20:31:43+00:00</published><updated>2012-05-19T20:31:43+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-05-19:2012/05/19/manual-de-introduccion-a-matplotlib-pyplot-ii-creando-y-manejando-ventanas-y-configurando-la-sesion/</id><summary type="html">&lt;p&gt;Esto pretende ser un tutorial del módulo pyplot de la librería matplotlib. El tutorial lo dividiremos de la siguiente forma (que podrá ir cambiando a medida que vayamos avanzando).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/14/manual-de-introduccion-a-matplotlib-pyplot-i/" title="Manual de introducción a matplotlib.pyplot (I): Primeros pasos"&gt;Primeros pasos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://pybonacci.org/2012/05/19/manual-de-introduccion-a-matplotlib-pyplot-ii-creando-y-manejando-ventanas-y-configurando-la-sesion/" title="Manual de introducción a matplotlib.pyplot (II): Creando y manejando ventanas y configurando la sesión"&gt;Creando ventanas, manejando ventanas y configurando la sesión&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/25/manual-de-introduccion-a-matplotlib-pyplot-iii-configuracion-del-grafico/" title="Manual de introducción a matplotlib.pyplot (III): Configuración del gráfico"&gt;Configuración del gráfico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/06/04/manual-de-introduccion-a-matplotlib-pyplot-iv-tipos-de-grafico-i/" title="Manual de introducción a matplotlib.pyplot (IV): Tipos de gráfico (I)"&gt;Tipos de gráfico I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/06/23/manual-de-introduccion-a-matplotlib-pyplot-v-tipos-de-grafico-ii/" title="Manual de introducción a matplotlib.pyplot (V): Tipos de gráfico (II)"&gt;Tipos de gráfico II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/07/01/manual-de-introduccion-a-matplotlib-pyplot-vi-tipos-de-grafico-iii/" title="Manual de introducción a matplotlib.pyplot (VI): Tipos de gráfico (III)"&gt;Tipos de gráfico III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/07/29/manual-de-introduccion-a-matplotlib-pyplot-vii-tipos-de-grafico-iv/" title="Manual de introducción a matplotlib.pyplot (VII): Tipos de gráfico (IV)"&gt;Tipos de gráfico IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/08/24/manual-de-introduccion-a-matplotlib-pyplot-viii-texto-y-anotaciones/" title="Manual de introducción a matplotlib.pyplot (VIII): Texto y anotaciones"&gt;Texto y anotaciones (arrow, annotate, table, text...)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Herramientas estadísticas (acorr, cohere, csd, psd, specgram, spy, xcorr, ...)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Eventos e interactividad (connect, disconnect, ginput, waitforbuttonpress...)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/08/30/manual-de-introduccion-a-matplotlib-pyplot-ix-miscelanea/" title="Manual de introducción a matplotlib.pyplot (IX): Miscelánea"&gt;Miscelánea&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;[Para este tutorial se ha usado python 2.7.1, ipython 0.11, numpy 1.6.1 y matplotlib 1.1.0]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[DISCLAIMER: Muchos de los gráficos que vamos a representar no tienen ningún sentido físico y los resultados solo pretenden mostrar el uso de la librería].&lt;/p&gt;
&lt;p&gt;En todo momento supondremos que se ha iniciado la sesión y …&lt;/p&gt;</summary><category term="gráficos"></category><category term="matplotlib"></category><category term="matplotlib.pyplot"></category><category term="pyplot"></category><category term="python"></category><category term="tutorial matplotlib.pyplot"></category></entry><entry><title>Manual de introducción a matplotlib.pyplot (I): Primeros pasos</title><link href="http://pybonacci.github.io/2012/05/14/manual-de-introduccion-a-matplotlib-pyplot-i/" rel="alternate"></link><published>2012-05-14T20:31:00+00:00</published><updated>2012-05-14T20:31:00+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-05-14:2012/05/14/manual-de-introduccion-a-matplotlib-pyplot-i/</id><summary type="html">&lt;p&gt;Esto pretende ser un tutorial del módulo pyplot de la librería matplotlib. El tutorial lo dividiremos de la siguiente forma (que podrá ir cambiando a medida que vayamos avanzando).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://pybonacci.org/2012/05/14/manual-de-introduccion-a-matplotlib-pyplot-i/" title="Manual de introducción a matplotlib.pyplot (I): Primeros pasos"&gt;Primeros pasos&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/19/manual-de-introduccion-a-matplotlib-pyplot-ii-creando-y-manejando-ventanas-y-configurando-la-sesion/" title="Manual de introducción a matplotlib.pyplot (II): Creando y manejando ventanas y configurando la sesión"&gt;Creando ventanas, manejando ventanas y configurando la sesión&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/05/25/manual-de-introduccion-a-matplotlib-pyplot-iii-configuracion-del-grafico/" title="Manual de introducción a matplotlib.pyplot (III): Configuración del gráfico"&gt;Configuración del gráfico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/06/04/manual-de-introduccion-a-matplotlib-pyplot-iv-tipos-de-grafico-i/" title="Manual de introducción a matplotlib.pyplot (IV): Tipos de gráfico (I)"&gt;Tipos de gráfico I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/06/23/manual-de-introduccion-a-matplotlib-pyplot-v-tipos-de-grafico-ii/" title="Manual de introducción a matplotlib.pyplot (V): Tipos de gráfico (II)"&gt;Tipos de gráfico II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/07/01/manual-de-introduccion-a-matplotlib-pyplot-vi-tipos-de-grafico-iii/" title="Manual de introducción a matplotlib.pyplot (VI): Tipos de gráfico (III)"&gt;Tipos de gráfico III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/07/29/manual-de-introduccion-a-matplotlib-pyplot-vii-tipos-de-grafico-iv/" title="Manual de introducción a matplotlib.pyplot (VII): Tipos de gráfico (IV)"&gt;Tipos de gráfico IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/08/24/manual-de-introduccion-a-matplotlib-pyplot-viii-texto-y-anotaciones/" title="Manual de introducción a matplotlib.pyplot (VIII): Texto y anotaciones"&gt;Texto y anotaciones (arrow, annotate, table, text...)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Herramientas estadísticas (acorr, cohere, csd,  psd, specgram, spy, xcorr, ...)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Eventos e interactividad (connect, disconnect, ginput, waitforbuttonpress...)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybonacci.org/2012/08/30/manual-de-introduccion-a-matplotlib-pyplot-ix-miscelanea/" title="Manual de introducción a matplotlib.pyplot (IX): Miscelánea"&gt;Miscelánea&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;[Para este tutorial se ha usado python 2.7.1, ipython 0.11, numpy 1.6.1 y matplotlib 1.1.0]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;En todo momento supondremos que se ha iniciado la sesión y se ha hecho&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para empezar diremos que hay tres formas de usar la librería Matplotlib:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;La …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><category term="gráficos"></category><category term="matplotlib"></category><category term="matplotlib.pyplot"></category><category term="pyplot"></category><category term="python"></category><category term="tutorial matplotlib.pyplot"></category></entry><entry><title>Cómo crear una matriz tridiagonal en Python con NumPy y SciPy</title><link href="http://pybonacci.github.io/2012/05/10/como-crear-una-matriz-tridiagonal-en-python-con-numpy-y-scipy/" rel="alternate"></link><published>2012-05-10T10:41:37+00:00</published><updated>2012-05-10T10:41:37+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-05-10:2012/05/10/como-crear-una-matriz-tridiagonal-en-python-con-numpy-y-scipy/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este rápido apunte vamos a ver cómo construir una &lt;a href="http://en.wikipedia.org/wiki/Tridiagonal_matrix"&gt;matriz tridiagonal&lt;/a&gt; en Python utilizando NumPy y SciPy. Una &lt;strong&gt;matriz tridiagonal&lt;/strong&gt; es una matriz &lt;em&gt;cuadrada _que solamente tiene elementos distintos de cero en su diagonal principal y en las dos diagonales adyacentes a esta (la superdiagonal y la subdiagonal). Las matrices tridiagonales aparecen mucho en cálculo numérico, por ejemplo en la discretización de ecuaciones diferenciales, y tienen la característica de ser &lt;strong&gt;matrices dispersas&lt;/strong&gt; (en lugar de _densas&lt;/em&gt;) al ser la mayoría de sus elementos cero.&lt;/p&gt;
&lt;p&gt;Sin que sirva de precedente, hoy vamos a escribir código que sea compatible tanto con Python 2 como con Python 3. Es un cambio nimio, pero merece la pena ir acostumbrándose a pensar que tarde o temprano habrá que abandonar Python 2 🙂&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;En esta entrada se ha usado python 2.7.3, numpy 1 …&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</summary><category term="ecuaciones diferenciales"></category><category term="EDOs"></category><category term="EDPs"></category><category term="matrices"></category><category term="numpy"></category><category term="python"></category><category term="scipy"></category><category term="scipy.sparse"></category></entry><entry><title>Sage: software matemático libre como alternativa</title><link href="http://pybonacci.github.io/2012/05/06/sage-software-matematico-libre-como-alternativa/" rel="alternate"></link><published>2012-05-06T19:15:42+00:00</published><updated>2012-05-06T19:15:42+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-05-06:2012/05/06/sage-software-matematico-libre-como-alternativa/</id><summary type="html">&lt;p&gt;Seguro que muchos de vosotros ya conocéis &lt;a href="http://sagemath.org/"&gt;Sage&lt;/a&gt;: un proyecto cuyo nada ambicioso objetivo es&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Crear una alternativa de código abierto, libre y viable a Magma, Maple, Mathematica y MATLAB.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Desde luego hay que admitir que como declaración de intenciones no está mal. Hechas las presentaciones, ¿qué más podemos decir sobre Sage?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Logo de Sage" src="http://pybonacci.org/images/2012/05/sage-logo-new-l.png"&gt;&lt;/p&gt;
&lt;p&gt;Sage comenzó en 2004 como un proyecto personal de &lt;a href="http://www.wstein.org/"&gt;William Stein&lt;/a&gt;, profesor de matemáticas en la Universidad de Washington, quien, &lt;a href="http://sagemath.blogspot.com.es/2009/12/mathematical-software-and-me-very.html"&gt;como explica en su blog&lt;/a&gt;, estaba frustrado por no poder solucionar las limitaciones de Magma al no ser un programa libre. Stein se dio cuenta de que, aunque crear un sistema como Magma o Maple llevaría años con un equipo de desarrolladores voluntarios partiendo de cero, &lt;em&gt;ya había numerosos paquetes de código abierto&lt;/em&gt; escritos en diferentes lenguajes enfocados a diversas áreas matemáticas. Así que decidió unir todos estos …&lt;/p&gt;</summary><category term="cálculo simbólico"></category><category term="notebook"></category><category term="python"></category><category term="sage"></category></entry><entry><title>Python es lento</title><link href="http://pybonacci.github.io/2012/05/01/python-es-lento/" rel="alternate"></link><published>2012-05-01T02:11:32+00:00</published><updated>2012-05-01T02:11:32+00:00</updated><author><name>Davidmh</name></author><id>tag:pybonacci.github.io,2012-05-01:2012/05/01/python-es-lento/</id><summary type="html">&lt;p&gt;La programación científica consiste, en su mayor parte, en cálculos numéricos intensos. CPU en estado puro. Un lenguaje interpretado es, por construcción, más lento que su homólogo compilado, por lo que puede parecer un contrasentido usar Python para aplicaciones «pesadas».  Estamos perdiendo el tiempo, ¿o no?&lt;/p&gt;
&lt;p&gt;Muchos programas científicos se ejecutan sólo una vez, son un cálculo concreto que no hará falta repetir. La mayor parte del tiempo del cálculo no es la ejecución del programa, sino escribirlo, trabajo de un humano. Aquí es donde entran las bondades de Python: es sencillo, rápido de escribir, y potente como el que más. Y, por lo sencillo que eso, aunque sea de naturaleza lenta (o precisamente por eso), se han creado muchas herramientas para mejorar su eficiencia de formas elegantes y pythónicas.&lt;/p&gt;
&lt;p&gt;Muchas críticas sobre la lentitud de Python adolecen de alguno …&lt;/p&gt;</summary></entry><entry><title>Cómo calcular límites, derivadas, series e integrales en Python con SymPy</title><link href="http://pybonacci.github.io/2012/04/30/como-calcular-limites-derivadas-series-e-integrales-en-python-con-sympy/" rel="alternate"></link><published>2012-04-30T16:19:27+00:00</published><updated>2012-04-30T16:19:27+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-04-30:2012/04/30/como-calcular-limites-derivadas-series-e-integrales-en-python-con-sympy/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Como buen paquete de cálculo simbólico que es, Sympy ofrece numerosas posibilidades para realizar tareas comunes del cálculo infinitesimal, como son calcular &lt;strong&gt;límites, derivadas, series e integrales simbólicas&lt;/strong&gt;. Por ejemplo, mientras que con SciPy podemos calcular, utilizando &lt;a href="http://es.wikipedia.org/wiki/Derivaci%C3%B3n_num%C3%A9rica"&gt;diferencias centradas&lt;/a&gt;, la derivada de una función en un punto utilizando la función &lt;code&gt;&amp;lt;a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.derivative.html"&amp;gt;scipy.misc.derivative&amp;lt;/a&amp;gt;&lt;/code&gt;, con SymPy podemos &lt;strong&gt;calcular la derivada simbólica&lt;/strong&gt; de la función.&lt;/p&gt;
&lt;p&gt;Si no conoces SymPy, puedes leer nuestra &lt;a href="http://pybonacci.org/2012/04/04/introduccion-al-calculo-simbolico-en-python-con-sympy/"&gt;Introducción al Cálculo Simbólico en Python con SymPy&lt;/a&gt; para hacerte una idea del manejo del paquete. Este artículo está basado en la &lt;a href="http://docs.sympy.org/0.7.1/tutorial.html#calculus"&gt;sección de Cálculo Infinitesimal del tutorial de SymPy&lt;/a&gt;, y en él utilizaremos el intérprete interactivo de SymPy (&lt;code&gt;isympy&lt;/code&gt;) que viene incluido con el paquete; para que el código funcione en un programa …&lt;/p&gt;</summary><category term="cálculo simbólico"></category><category term="derivadas"></category><category term="integrales"></category><category term="límites"></category><category term="python"></category><category term="series"></category><category term="sympy"></category></entry><entry><title>Regiones de estabilidad de métodos numéricos en Python</title><link href="http://pybonacci.github.io/2012/04/27/regiones-de-estabilidad-de-metodos-numericos-en-python/" rel="alternate"></link><published>2012-04-27T09:36:19+00:00</published><updated>2012-04-27T09:36:19+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-04-27:2012/04/27/regiones-de-estabilidad-de-metodos-numericos-en-python/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Hoy veremos cómo computar con Python la &lt;strong&gt;región de estabilidad absoluta&lt;/strong&gt; de un método numérico para resolver problemas de valores iniciales en ecuaciones diferenciales ordinarias, una herramienta muy importante a la hora de escoger un método numérico adecuado para integrar nuestro problema concreto. Se trata simplemente de otro ejemplo aplicado de lo que publicamos hace unos días sobre &lt;a href="http://pybonacci.org/2012/04/13/dibujando-lineas-de-nivel-en-python-con-matplotlib/"&gt;cómo pintar curvas de nivel con matplotlib&lt;/a&gt;; si quieres ver otro más, puedes leer nuestro &lt;a href="http://pybonacci.org/2012/04/14/ejemplo-de-uso-de-basemap-y-netcdf4/"&gt;ejemplo de uso de Basemap y NetCDF4&lt;/a&gt;, donde vimos cómo representar datos climatológicos.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;En esta entrada se ha usado python 2.7.3, numpy 1.6.1 y matplotlib 1.1.0.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;Región de estabilidad absoluta&lt;/h2&gt;
&lt;p&gt;A la hora de integrar numéricamente un problema diferencial del tipo&lt;/p&gt;
&lt;p&gt;$\frac{d U}{d t} = A U$&lt;/p&gt;
&lt;p&gt;nos interesa que la solución numérica tenga el mismo carácter de estabilidad …&lt;/p&gt;</summary><category term="ecuaciones diferenciales"></category><category term="matplotlib"></category><category term="métodos numéricos"></category><category term="numpy"></category><category term="python"></category></entry><entry><title>Estadística en Python con SciPy (I)</title><link href="http://pybonacci.github.io/2012/04/21/estadistica-en-python-con-scipy/" rel="alternate"></link><published>2012-04-21T17:46:31+00:00</published><updated>2012-04-21T17:46:31+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-04-21:2012/04/21/estadistica-en-python-con-scipy/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Hoy vamos a ver cómo trabajar con variable aleatoria con el módulo &lt;code&gt;stats&lt;/code&gt; de la biblioteca Scipy. Scipy viene con numerosas &lt;a href="http://docs.scipy.org/doc/scipy/reference/stats.html"&gt;distribuciones de probabilidad&lt;/a&gt;, tanto discretas como continuas, y además pone a nuestra disposición herramientas para crear nuestras propias distribuciones y multitud de herramientas para hacer cálculos estadísticos. En esta primera parte nos centraremos en cómo manejar esas distribuciones y sus funciones de distribución, cómo representarlas con matplotlib y cómo definir nuevas distribuciones.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;En esta entrada se ha usado python 2.7.3, numpy 1.6.1, matplotlib 1.1.0 y scipy 0.10.1.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; En mi opinión la documentación de este módulo deja un poco que desear. No resulta demasiado didáctica, hay algunas imprecisiones y cosas que directamente no tienen sentido o están mal. En cuanto sepas manejarlo un poco puedes usar de referencia en primer …&lt;/p&gt;</summary><category term="Estadística"></category><category term="matplotlib"></category><category term="numpy"></category><category term="python"></category><category term="scipy"></category></entry><entry><title>Ecuaciones no lineales: método de bisección y método de Newton en Python</title><link href="http://pybonacci.github.io/2012/04/18/ecuaciones-no-lineales-metodo-de-biseccion-y-metodo-de-newton-en-python/" rel="alternate"></link><published>2012-04-18T19:53:50+00:00</published><updated>2012-04-18T19:53:50+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-04-18:2012/04/18/ecuaciones-no-lineales-metodo-de-biseccion-y-metodo-de-newton-en-python/</id><summary type="html">&lt;p&gt;En este artículo vamos a ver cómo implementar en Python el &lt;strong&gt;método de bisección&lt;/strong&gt; y el &lt;strong&gt;método de Newton&lt;/strong&gt;, dos métodos iterativos clásicos para hallar raíces de ecuaciones no lineales de la forma $f(x) = 0$, con $f: [a, b] \longrightarrow \mathbb{R}$ y $f \in C^1([a, b])$. Estos métodos y muchos otros más refinados están ya implementados en multitud de bibliotecas muy utilizadas, sin ir más lejos en el módulo &lt;a href="http://docs.scipy.org/doc/scipy/reference/tutorial/optimize.html#root-finding"&gt;&lt;code&gt;optimize&lt;/code&gt;&lt;/a&gt; del paquete Scipy (&lt;a href="http://docs.scipy.org/doc/scipy/reference/optimize.html#root-finding"&gt;referencia&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Crearemos un módulo &lt;code&gt;ceros.py&lt;/code&gt; en el que incluiremos los dos métodos que vamos a desarrollar aquí, y así veremos un ejemplo de código limpio y fácilmente reutilizable.&lt;/p&gt;
&lt;h2&gt;Módulo &lt;code&gt;ceros.py&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Vamos a ver la anatomía de un módulo en Python. Este es el código del archivo:&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Búsqueda de raíces&lt;/span&gt;
&lt;span class="sd"&gt;Este módulo contiene métodos para la búsqueda de raíces de …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><category term="biseccion"></category><category term="ecuaciones no lineales"></category><category term="newton"></category><category term="python"></category></entry><entry><title>Ejemplo de uso de Basemap y NetCDF4</title><link href="http://pybonacci.github.io/2012/04/14/ejemplo-de-uso-de-basemap-y-netcdf4/" rel="alternate"></link><published>2012-04-14T12:14:50+00:00</published><updated>2012-04-14T12:14:50+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-04-14:2012/04/14/ejemplo-de-uso-de-basemap-y-netcdf4/</id><summary type="html">&lt;p&gt;Continuando lo que enseñó Juanlu en la anterior entrada vamos a mostrar líneas de nivel y temperatura del aire en la superficie, en este caso la presión al nivel del mar del día 01 de enero de 2012 a las 00.00 UTC según los datos extraídos del &lt;a href="http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanalysis.html"&gt;reanálisis NCEP/NCAR&lt;/a&gt;, sobre un mapa con la ayuda de la librería &lt;a href="http://matplotlib.github.com/basemap/"&gt;Basemap&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Como los datos del reanálisis NCEP/NCAR vienen en formato &lt;a href="http://www.unidata.ucar.edu/software/netcdf/"&gt;netCDF&lt;/a&gt; usaremos la librería &lt;a href="https://unidata.github.io/netcdf4-python/"&gt;netcdf4-python&lt;/a&gt;. El formato netCDF es un estándar abierto y es ampliamente usado en temas de ciencias de la tierra, atmósfera, climatología, meteorología,... No es estrictamente necesario usar netcdf4-python para acceder a ficheros netCDF puesto que desde &lt;a href="https://docs.scipy.org/doc/scipy/reference/tutorial/io.html#module-scipy.io.netcdf"&gt;scipy tenéis esta funcionalidad&lt;/a&gt;. Pero bueno, yo uso esta por una serie de ventajas que veremos otro día.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;En la presente entrada se ha usado python 2.7.2 …&lt;/strong&gt;&lt;/p&gt;</summary><category term="basemap"></category><category term="mapas"></category><category term="matplotlib"></category><category term="meteorología"></category><category term="netcdf"></category><category term="netcdf4-python"></category><category term="numpy"></category><category term="python"></category></entry><entry><title>Dibujando líneas de nivel en Python con matplotlib</title><link href="http://pybonacci.github.io/2012/04/13/dibujando-lineas-de-nivel-en-python-con-matplotlib/" rel="alternate"></link><published>2012-04-13T12:08:04+00:00</published><updated>2012-04-13T12:08:04+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-04-13:2012/04/13/dibujando-lineas-de-nivel-en-python-con-matplotlib/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este artículo vamos a ver cómo representar en Python un mapa de &lt;em&gt;curvas de nivel&lt;/em&gt; o de &lt;em&gt;isolíneas&lt;/em&gt;, esto es, curvas que conectan los puntos en los que una función tiene un mismo valor constante, utilizando NumPy y matplotlib. Los mapas de curvas de nivel («contour lines» en inglés) son muy útiles, porque ayudan a ver la información de una manera mucho más cómoda que las representaciones de superficies en tres dimensiones, por muy espectaculares que estas últimas puedan quedar. Un ejemplo muy cotidiano es el mapa de isobaras que nos dan en la predicción del tiempo como el que se ve en la imagen: los puntos que están sobre la misma línea están todos a la misma presión.&lt;figure id="attachment_156" style="width: 448px" class="wp-caption aligncenter"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mapa de isobaras" src="http://pybonacci.org/images/2012/04/2012041300006_ww_i1x0w006.gif"&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;En este artículo nos ceñiremos a funciones&lt;/p&gt;
&lt;p&gt;$f: D \longrightarrow \mathbb{R}, D \subset \mathbb{R}^2,$&lt;/p&gt;
&lt;p&gt;es decir …&lt;/p&gt;</summary><category term="gráficos"></category><category term="matplotlib"></category><category term="numpy"></category><category term="python"></category><category term="vectorización"></category></entry><entry><title>Listado de tutoriales: EuroScipy 2012</title><link href="http://pybonacci.github.io/2012/04/06/listado-de-tutoriales-euroscipy-2012/" rel="alternate"></link><published>2012-04-06T19:26:49+00:00</published><updated>2012-04-06T19:26:49+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-04-06:2012/04/06/listado-de-tutoriales-euroscipy-2012/</id><summary type="html">&lt;p&gt;La EuroScipy de 2012 se celebrará los días 23 y 24 de agosto en Bruselas (Bélgica). Ya han sido publicado el listado de tutoriales que se impartirán. Si tenéis la posibilidad de acercaros podréis disfrutar de tutoriales impartidos por gente muy importante del mundillo 'python científico'.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.euroscipy.org/conference/euroscipy2012"&gt;Aquí podéis acceder al listado&lt;/a&gt;. Si tuviera la posibilidad de ir no me gustaría perderme:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.euroscipy.org/talk/6607"&gt;Numpy + Cython&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.euroscipy.org/talk/6602"&gt;Beyond NumPy: Numexp, Blosc and CArray&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.euroscipy.org/talk/6612"&gt;Parallel computing with Multiprocessing, ParallelPython and Ipython&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.euroscipy.org/talk/6617"&gt;Better numerics with SciPy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.euroscipy.org/talk/6629"&gt;Statistics with Pandas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sin, por supuesto, despreciar al resto de charlas, que también serán realmente interesantes.&lt;/p&gt;
&lt;p&gt;Seguiremos informando.&lt;/p&gt;</summary><category term="euroscipy"></category><category term="python"></category><category term="tutoriales"></category></entry><entry><title>Introducción al Cálculo Simbólico en Python con SymPy</title><link href="http://pybonacci.github.io/2012/04/04/introduccion-al-calculo-simbolico-en-python-con-sympy/" rel="alternate"></link><published>2012-04-04T10:00:04+00:00</published><updated>2012-04-04T10:00:04+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-04-04:2012/04/04/introduccion-al-calculo-simbolico-en-python-con-sympy/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este artículo voy a hacer una introducción a &lt;a href="http://sympy.org/" title="SymPy"&gt;SymPy&lt;/a&gt;, una biblioteca para hacer Cálculo Simbólico en Python a la vez que un &lt;a href="http://es.wikipedia.org/wiki/Sistema_algebraico_computacional" title="Sistema de álgebra computacional"&gt;sistema de álgebra computacional&lt;/a&gt; (o CAS en inglés) muy prometedor. Si alguna vez te has preguntado cómo hacer derivadas y resolver ecuaciones con Python o conoces ya sistemas como Mathematica o Maple pero prefieres utilizar una solución libre, has venido al sitio correcto.&lt;/p&gt;
&lt;p&gt;Actualmente &lt;a href="https://github.com/sympy/sympy"&gt;el desarrollo de SymPy&lt;/a&gt; está muy activo: a pesar de ser un CAS bastante completo, todavía tiene algunas cosas que sus desarrolladores piensan pulir a lo largo de los próximos meses y están trabajando duro para ello. Personalmente es uno de mis proyectos de software libre favoritos, por la buenísima documentación que escriben, por lo elegante que queda el código y por lo bonita que es su web 😛&lt;/p&gt;
&lt;p&gt;SymPy tiene una característica …&lt;/p&gt;</summary><category term="cálculo simbólico"></category><category term="python"></category><category term="sympy"></category></entry><entry><title>Presentando Mathics: una alternativa libre y ligera a Mathematica</title><link href="http://pybonacci.github.io/2012/04/02/presentando-mathics-una-alternativa-libre-y-ligera-a-mathematica/" rel="alternate"></link><published>2012-04-02T15:42:02+00:00</published><updated>2012-04-02T15:42:02+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-04-02:2012/04/02/presentando-mathics-una-alternativa-libre-y-ligera-a-mathematica/</id><summary type="html">&lt;p&gt;A través de la lista de correo sage-dev acabo de descubrir hace un momento &lt;a href="http://www.mathics.org/"&gt;Mathics&lt;/a&gt;: un sistema de álgebra computacional (CAS) libre y gratuito con una interfaz web y basado en SymPy y Sage.&lt;figure id="attachment_126" style="width: 560px" class="wp-caption aligncenter"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Interfaz web de Mathics" src="http://pybonacci.org/images/2012/04/2012-04-02-161414_1366x768_scrot.png"&gt;&lt;/p&gt;
&lt;p&gt;En el momento de escribir estas líneas se trata de un proyecto personal de &lt;a href="http://www.poeschko.com/"&gt;Jan Pöschko&lt;/a&gt;, un estudiante austríaco. Me parece impresionante que &lt;a href="http://www.mathics.net/doc/manual/introduction/who-is-behind-it/"&gt;una sola persona haya llevado esto adelante&lt;/a&gt;: este hombre tiene mi más sincera admiración.&lt;/p&gt;
&lt;p&gt;Aunque está basado en SymPy y tiene soporte para Sage también, Mathics toma la sintaxis de Mathematica, el popular CAS de Wolfram Research. Como se menciona en la &lt;a href="http://www.mathics.net/doc/manual/introduction/"&gt;introducción&lt;/a&gt;, Mathics busca parecerse a Mathematica lo máximo posible. Puedes leer &lt;a href="http://www.mathics.net/doc/manual/introduction/why-yet-another-cas/"&gt;las motivaciones del proyecto&lt;/a&gt; &lt;del datetime="2012-04-02T17:12:32+00:00"&gt;(hay por ahí quien dice que tienen un punto de ironía, cada uno que lo interprete a su manera :P)&lt;/del&gt;.&lt;/p&gt;
&lt;p&gt;Al contrario que CAS como Mathematica …&lt;/p&gt;</summary><category term="cas"></category><category term="foss"></category><category term="mathematica"></category><category term="mathics"></category><category term="python"></category><category term="sympy"></category></entry><entry><title>Videos interesantes de la PyCon US 2012</title><link href="http://pybonacci.github.io/2012/04/01/videos-interesantes-de-la-pycon-us-2012/" rel="alternate"></link><published>2012-04-01T14:21:47+00:00</published><updated>2012-04-01T14:21:47+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-04-01:2012/04/01/videos-interesantes-de-la-pycon-us-2012/</id><summary type="html">&lt;p&gt;Ya se ha celebrado la PyCon US de este año con una gran presencia de videos relacionados directamente con el uso de python para tareas de ciencia. Podéis encontrar tutoriales de iniciación a &lt;a href="http://pyvideo.org/video/617/plotting-with-matplotlib"&gt;Matplotlib&lt;/a&gt;, análisis de datos (estadística , análisis de datos, aprendizaje automático,...[&lt;a href="http://pyvideo.org/video/611/data-analysis-in-python-with-pandas"&gt;1&lt;/a&gt;], [&lt;a href="http://pyvideo.org/video/608/bayesian-statistics-made-as-simple-as-possible"&gt;2&lt;/a&gt;], [&lt;a href="http://pyvideo.org/video/622/introduction-to-interactive-predictive-analytics"&gt;3&lt;/a&gt;], [&lt;a href="http://pyvideo.org/video/636/practical-machine-learning-in-python"&gt;4&lt;/a&gt;], [&lt;a href="http://pyvideo.org/video/696/pandas-powerful-data-analysis-tools-for-python"&gt;5&lt;/a&gt;], [&lt;a href="http://pyvideo.org/video/947/storing-manipulating-and-visualizing-timeseries"&gt;6&lt;/a&gt;], [&lt;a href="http://pyvideo.org/video/676/python-for-data-lovers-explore-it-analyze-it-m"&gt;7&lt;/a&gt;],...), &lt;a href="http://pyvideo.org/video/670/python-and-hdf5-fast-storage-for-large-data"&gt;almacenamiento de datos usando HDF5 y PyTables&lt;/a&gt;, mapeo y SIG (Sistemas de Información Geográfica o GIS por sus siglas en inglés, Geographical Information Systems, [&lt;a href="http://pyvideo.org/video/887/a-gentle-introduction-to-gis"&gt;1&lt;/a&gt;], [&lt;a href="http://pyvideo.org/video/672/making-maps-with-python"&gt;2&lt;/a&gt;], [&lt;a href="http://pyvideo.org/video/680/spatial-data-and-web-mapping-with-python"&gt;3&lt;/a&gt;], [&lt;a href="http://pyvideo.org/video/623/making-interactive-maps-for-the-web"&gt;4&lt;/a&gt;],...), uso de Ipython ([&lt;a href="http://pyvideo.org/video/640/ipython-python-at-your-fingertips"&gt;1&lt;/a&gt;], [&lt;a href="http://pyvideo.org/video/605/ipython-in-depth-high-productivity-interactive-a"&gt;2&lt;/a&gt;]), &lt;a href="http://pyvideo.org/video/652/sage-open-source-math-in-python"&gt;SAGE&lt;/a&gt;,...&lt;/p&gt;
&lt;p&gt;Todos los videos de las charlas, tutoriales, sesión de posters,..., los podéis encontrar en:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pyvideo.org/events/pycon-us-2012.html"&gt;http://pyvideo.org/events/pycon-us-2012.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Viendo la gran presencia que ha tenido la ciencia este año en la PyCon US podría decirse que el presente y futuro de python en este campo parece muy prometedor.&lt;/p&gt;
&lt;p&gt;Debido a la gran cantidad de …&lt;/p&gt;</summary><category term="pycon"></category><category term="python"></category><category term="vídeos"></category></entry><entry><title>¿Cómo encontrar el mínimo de una función usando scipy?</title><link href="http://pybonacci.github.io/2012/03/28/como-encontrar-el-minimo-de-una-funcion-usando-scipy/" rel="alternate"></link><published>2012-03-28T11:55:12+00:00</published><updated>2012-03-28T11:55:12+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-03-28:2012/03/28/como-encontrar-el-minimo-de-una-funcion-usando-scipy/</id><summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTICE: Esta entrada es una traducción libre (algunas cosas no serán traducidas por no existir una traducción sencilla en castellano) de un artículo publicado en &lt;a href="http://glowingpython.blogspot.com.es/2011/04/how-to-find-minimum-of-function-using.html"&gt;The Glowing Python&lt;/a&gt; con permiso de su autor.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Para la siguiente entrada se ha usado python 2.7.2, numpy 1.6.1, scipy 0.9.0 y matplotlib 1.1.0&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;En este ejemplo veremos como usar la función &lt;strong&gt;fmin&lt;/strong&gt; para minimizar una función. La función &lt;strong&gt;fmin&lt;/strong&gt; se encuentra en el módulo optimize de la librería scipy. La función &lt;strong&gt;fmin&lt;/strong&gt; usa el algoritmo &lt;em&gt;downhill simplex&lt;/em&gt; para encontrar el mínimo de la función objetivo empezando por un punto inicial dado por el usuario. En el ejemplo emezaremos a partir de dos puntos iniciales diferentes para comparar los resultados.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy.optimize&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fmin&lt;/span&gt;
&lt;span class="c1"&gt;# Función objetivo&lt;/span&gt;
&lt;span class="n"&gt;rsinc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><category term="downhill simplex algorithm"></category><category term="matplotlib.pyplot"></category><category term="numpy"></category><category term="optimización"></category><category term="python"></category><category term="scipy.optimize"></category></entry><entry><title>Integrando ecuaciones diferenciales: método leapfrog en Python</title><link href="http://pybonacci.github.io/2012/03/27/integrando-ecuaciones-diferenciales-metodo-leapfrog-en-python/" rel="alternate"></link><published>2012-03-27T10:06:27+00:00</published><updated>2012-03-27T10:06:27+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-03-27:2012/03/27/integrando-ecuaciones-diferenciales-metodo-leapfrog-en-python/</id><summary type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En Python tenemos numerosas herramientas listas para que podamos integrar ecuaciones diferenciales ordinarias sin tener que preocuparnos en implementar un esquema numérico. Sin ir más lejos, en el módulo integrate de &lt;a href="http://scipy.org/" title="SciPy"&gt;SciPy&lt;/a&gt; existen varias funciones a tal efecto. La función &lt;a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.odeint.html" title="Función odeint"&gt;odeint&lt;/a&gt; es una interfraz en Python a la biblioteca ODEPACK, escrita en Fortran. Sin embargo, con un propósito didáctico vamos a estudiar cómo programaríamos la solución a un problema de ecuaciones diferenciales, en este caso utilizando la regla del punto medio o método leapfrog[1].&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Para esta entrada se ha utilizado python 2.7.2, numpy 1.6.1 y matplotlib 1.1.0.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Enunciado&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Problema de Cauchy: integrar la siguiente ecuación diferencial&lt;/p&gt;
&lt;p&gt;$\frac{d^2 x}{d t^2} + x = 0$&lt;/p&gt;
&lt;p&gt;Con las condiciones iniciales $x(0) = 1, \dot{x}(0) = 0$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;

&lt;h2&gt;Tratamiento matemático&lt;/h2&gt;
&lt;p&gt;Sabemos que la solución …&lt;/p&gt;</summary><category term="ecuaciones diferenciales"></category><category term="integración"></category><category term="numpy"></category><category term="python"></category></entry><entry><title>Videos del PyData Workshop</title><link href="http://pybonacci.github.io/2012/03/26/videos-del-pydata-workshop/" rel="alternate"></link><published>2012-03-26T13:29:49+00:00</published><updated>2012-03-26T13:29:49+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-03-26:2012/03/26/videos-del-pydata-workshop/</id><summary type="html">&lt;p&gt;Hace unas pocas semanas se celebró el &lt;a href="http://pydataworkshop.eventbrite.com/"&gt;taller PyData en las oficinas de Google en Mountain View&lt;/a&gt;. Por supuesto, se grabaron las charlas/presentaciones y están &lt;a href="http://marakana.com/s/2012_pydata_workshop,1090/index.html"&gt;disponibles en el siguiente enlace&lt;/a&gt; (si falta alguna charla las irán ir añadiendo poco a poco).&lt;/p&gt;
&lt;p&gt;Aquí os dejamos uno de los videos: &lt;em&gt;Python in Big Data with an overview of NumPy &amp;amp; SciPy&lt;/em&gt; (Python en &lt;a href="http://www.enriquedans.com/2011/10/big-data-una-pequena-introduccion.html"&gt;Big Data&lt;/a&gt; con un vistazo a Numpy y Scipy) por Travis Oliphant (creador de Numpy)&lt;/p&gt;
&lt;p&gt;&lt;span class="videobox"&gt;
                &lt;iframe width="640" height="390"
                    src='https://www.youtube.com/embed/i0FCn889ucs'
                    frameborder='0' webkitAllowFullScreen mozallowfullscreen
                    allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Espero que os resulte interesante.&lt;/p&gt;</summary><category term="big data"></category><category term="pydata"></category><category term="python"></category><category term="vídeos"></category></entry><entry><title>Dibujando una rosa de frecuencias</title><link href="http://pybonacci.github.io/2012/03/24/dibujando-una-rosa-de-frecuencias/" rel="alternate"></link><published>2012-03-24T13:46:44+00:00</published><updated>2012-03-24T13:46:44+00:00</updated><author><name>Kiko Correoso</name></author><id>tag:pybonacci.github.io,2012-03-24:2012/03/24/dibujando-una-rosa-de-frecuencias/</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;a href="http://pybonacci.org/2014/07/31/dibujando-una-rosa-de-frecuencias-reloaded-3/"&gt;Este post ha sido actualizado para usar nuevas funcionalidades de matplotlib. Pincha sobre este enlace para ver la nueva versión.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Para la siguiente entrada se ha usado python 2.7.2, math (de la librería estándar), numpy 1.6.1 y matplotlib 1.1.0&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Imaginaos que estáis de vacaciones en Agosto en la playa y la única preocupación que tenéis es observar las nubes. Como sois un poco frikis y no podéis desconectar de vuestra curiosidad científica decidís apuntar las ocurrencias de la procedencia de las nubes y al final de las vacaciones decidís representar esos datos. La forma más normal de hacerlo sería usando una rosa de frecuencias.&lt;/p&gt;
&lt;p&gt;Primero de todo vamos a importar los módulos que nos harán falta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;## De la librería estándar&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="c1"&gt;## De librerías de terceros&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><category term="gráficos"></category><category term="math"></category><category term="matplotlib"></category><category term="numpy"></category><category term="python"></category><category term="python 2"></category></entry><entry><title>Introducción a Python para científicos e ingenieros</title><link href="http://pybonacci.github.io/2012/03/16/introduccion-a-python-para-cientificos-e-ingenieros/" rel="alternate"></link><published>2012-03-16T19:25:50+00:00</published><updated>2012-03-16T19:25:50+00:00</updated><author><name>Juan Luis Cano</name></author><id>tag:pybonacci.github.io,2012-03-16:2012/03/16/introduccion-a-python-para-cientificos-e-ingenieros/</id><summary type="html">&lt;h2&gt;El lenguaje Python&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://python.org" title="Python"&gt;Python&lt;/a&gt; es un lenguaje de programación de propósito general muy fácil de aprender, con una sintaxis característica que hace que los programas escritos en él sean muy legibles, &lt;a href="http://wiki.python.org/moin/OrganizationsUsingPython"&gt;ampliamente utilizado&lt;/a&gt; por empresas como Google o la NASA y, además, &lt;a href="http://docs.python.org/license.html"&gt;libre&lt;/a&gt;. Fue creado en 1991 por &lt;a href="http://es.wikipedia.org/wiki/Guido_van_Rossum" title="Guido van Rossum"&gt;Guido van Rossum&lt;/a&gt;, un programador holandés.&lt;/p&gt;
&lt;p&gt;Un programa escrito en Python tiene esta pinta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# Suma dos números (suma.py)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;suma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2.3&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;La suma de x e y es: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;suma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este programa imprimiría por pantalla&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python suma.py
La suma de x e y es: &lt;span class="m"&gt;3&lt;/span&gt;.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;y funciona tanto con Python 2.7 como con Python 3.2. Ya hablaremos de qué es lo que hace exactamente …&lt;/p&gt;</summary><category term="python"></category><category term="python 3"></category></entry></feed>